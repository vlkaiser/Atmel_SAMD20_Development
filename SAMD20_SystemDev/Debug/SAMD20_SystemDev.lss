
SAMD20_SystemDev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002aa4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  20000000  00002aa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000158  20000074  00002b18  00020074  2**2
                  ALLOC
  3 .stack        00002004  200001cc  00002c70  00020074  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002d33e  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000467e  00000000  00000000  0004d433  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005c06  00000000  00000000  00051ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000678  00000000  00000000  000576b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000006e0  00000000  00000000  00057d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00014ed1  00000000  00000000  0005840f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e26a  00000000  00000000  0006d2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00060d18  00000000  00000000  0007b54a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001280  00000000  00000000  000dc264  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d0 21 00 20 e9 1d 00 00 e5 1d 00 00 e5 1d 00 00     .!. ............
	...
      2c:	e5 1d 00 00 00 00 00 00 00 00 00 00 e5 1d 00 00     ................
      3c:	a5 1e 00 00 e5 1d 00 00 e5 1d 00 00 e5 1d 00 00     ................
      4c:	e5 1d 00 00 51 01 00 00 e5 1d 00 00 e5 1d 00 00     ....Q...........
      5c:	55 12 00 00 65 12 00 00 75 12 00 00 85 12 00 00     U...e...u.......
      6c:	95 12 00 00 a5 12 00 00 e5 1d 00 00 e5 1d 00 00     ................
      7c:	e5 1d 00 00 e5 1d 00 00 e5 1d 00 00 e5 1d 00 00     ................
      8c:	e5 1d 00 00 e5 1d 00 00 e5 1d 00 00 e5 1d 00 00     ................
      9c:	e5 1d 00 00 e5 1d 00 00                             ........

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	20000074 	.word	0x20000074
      c4:	00000000 	.word	0x00000000
      c8:	00002aa4 	.word	0x00002aa4

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	20000078 	.word	0x20000078
      f8:	00002aa4 	.word	0x00002aa4
      fc:	00002aa4 	.word	0x00002aa4
     100:	00000000 	.word	0x00000000

00000104 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     104:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     106:	2a00      	cmp	r2, #0
     108:	d001      	beq.n	10e <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     10a:	0018      	movs	r0, r3
     10c:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     10e:	008b      	lsls	r3, r1, #2
     110:	4a06      	ldr	r2, [pc, #24]	; (12c <extint_register_callback+0x28>)
     112:	589b      	ldr	r3, [r3, r2]
     114:	2b00      	cmp	r3, #0
     116:	d003      	beq.n	120 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     118:	4283      	cmp	r3, r0
     11a:	d005      	beq.n	128 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     11c:	231d      	movs	r3, #29
     11e:	e7f4      	b.n	10a <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     120:	0089      	lsls	r1, r1, #2
     122:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     124:	2300      	movs	r3, #0
     126:	e7f0      	b.n	10a <extint_register_callback+0x6>
		return STATUS_OK;
     128:	2300      	movs	r3, #0
     12a:	e7ee      	b.n	10a <extint_register_callback+0x6>
     12c:	200000dc 	.word	0x200000dc

00000130 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     130:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     132:	2900      	cmp	r1, #0
     134:	d001      	beq.n	13a <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     136:	0018      	movs	r0, r3
     138:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     13a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     13c:	281f      	cmp	r0, #31
     13e:	d800      	bhi.n	142 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     140:	4a02      	ldr	r2, [pc, #8]	; (14c <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     142:	2301      	movs	r3, #1
     144:	4083      	lsls	r3, r0
     146:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
     148:	2300      	movs	r3, #0
     14a:	e7f4      	b.n	136 <extint_chan_enable_callback+0x6>
     14c:	40001800 	.word	0x40001800

00000150 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     150:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     152:	2200      	movs	r2, #0
     154:	4b10      	ldr	r3, [pc, #64]	; (198 <EIC_Handler+0x48>)
     156:	701a      	strb	r2, [r3, #0]
     158:	2300      	movs	r3, #0
     15a:	4910      	ldr	r1, [pc, #64]	; (19c <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     15c:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     15e:	4e10      	ldr	r6, [pc, #64]	; (1a0 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     160:	4c0d      	ldr	r4, [pc, #52]	; (198 <EIC_Handler+0x48>)
     162:	e00a      	b.n	17a <EIC_Handler+0x2a>
		return eics[eic_index];
     164:	490d      	ldr	r1, [pc, #52]	; (19c <EIC_Handler+0x4c>)
     166:	e008      	b.n	17a <EIC_Handler+0x2a>
     168:	7823      	ldrb	r3, [r4, #0]
     16a:	3301      	adds	r3, #1
     16c:	b2db      	uxtb	r3, r3
     16e:	7023      	strb	r3, [r4, #0]
     170:	2b0f      	cmp	r3, #15
     172:	d810      	bhi.n	196 <EIC_Handler+0x46>
		return NULL;
     174:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     176:	2b1f      	cmp	r3, #31
     178:	d9f4      	bls.n	164 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     17a:	0028      	movs	r0, r5
     17c:	4018      	ands	r0, r3
     17e:	2201      	movs	r2, #1
     180:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     182:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     184:	4210      	tst	r0, r2
     186:	d0ef      	beq.n	168 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     188:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     18a:	009b      	lsls	r3, r3, #2
     18c:	599b      	ldr	r3, [r3, r6]
     18e:	2b00      	cmp	r3, #0
     190:	d0ea      	beq.n	168 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     192:	4798      	blx	r3
     194:	e7e8      	b.n	168 <EIC_Handler+0x18>
			}
		}
	}
}
     196:	bd70      	pop	{r4, r5, r6, pc}
     198:	200000d8 	.word	0x200000d8
     19c:	40001800 	.word	0x40001800
     1a0:	200000dc 	.word	0x200000dc

000001a4 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     1a4:	4a04      	ldr	r2, [pc, #16]	; (1b8 <_extint_enable+0x14>)
     1a6:	7813      	ldrb	r3, [r2, #0]
     1a8:	2102      	movs	r1, #2
     1aa:	430b      	orrs	r3, r1
     1ac:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     1ae:	7853      	ldrb	r3, [r2, #1]
     1b0:	b25b      	sxtb	r3, r3
     1b2:	2b00      	cmp	r3, #0
     1b4:	dbfb      	blt.n	1ae <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     1b6:	4770      	bx	lr
     1b8:	40001800 	.word	0x40001800

000001bc <_system_extint_init>:
{
     1bc:	b500      	push	{lr}
     1be:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     1c0:	4a12      	ldr	r2, [pc, #72]	; (20c <_system_extint_init+0x50>)
     1c2:	6993      	ldr	r3, [r2, #24]
     1c4:	2140      	movs	r1, #64	; 0x40
     1c6:	430b      	orrs	r3, r1
     1c8:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     1ca:	a901      	add	r1, sp, #4
     1cc:	2300      	movs	r3, #0
     1ce:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     1d0:	2003      	movs	r0, #3
     1d2:	4b0f      	ldr	r3, [pc, #60]	; (210 <_system_extint_init+0x54>)
     1d4:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     1d6:	2003      	movs	r0, #3
     1d8:	4b0e      	ldr	r3, [pc, #56]	; (214 <_system_extint_init+0x58>)
     1da:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     1dc:	4a0e      	ldr	r2, [pc, #56]	; (218 <_system_extint_init+0x5c>)
     1de:	7813      	ldrb	r3, [r2, #0]
     1e0:	2101      	movs	r1, #1
     1e2:	430b      	orrs	r3, r1
     1e4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     1e6:	7853      	ldrb	r3, [r2, #1]
     1e8:	b25b      	sxtb	r3, r3
     1ea:	2b00      	cmp	r3, #0
     1ec:	dbfb      	blt.n	1e6 <_system_extint_init+0x2a>
     1ee:	4b0b      	ldr	r3, [pc, #44]	; (21c <_system_extint_init+0x60>)
     1f0:	0019      	movs	r1, r3
     1f2:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     1f4:	2200      	movs	r2, #0
     1f6:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     1f8:	4299      	cmp	r1, r3
     1fa:	d1fc      	bne.n	1f6 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     1fc:	2210      	movs	r2, #16
     1fe:	4b08      	ldr	r3, [pc, #32]	; (220 <_system_extint_init+0x64>)
     200:	601a      	str	r2, [r3, #0]
	_extint_enable();
     202:	4b08      	ldr	r3, [pc, #32]	; (224 <_system_extint_init+0x68>)
     204:	4798      	blx	r3
}
     206:	b003      	add	sp, #12
     208:	bd00      	pop	{pc}
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	40000400 	.word	0x40000400
     210:	00001c8d 	.word	0x00001c8d
     214:	00001c01 	.word	0x00001c01
     218:	40001800 	.word	0x40001800
     21c:	200000dc 	.word	0x200000dc
     220:	e000e100 	.word	0xe000e100
     224:	000001a5 	.word	0x000001a5

00000228 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     228:	2300      	movs	r3, #0
     22a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     22c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     22e:	2201      	movs	r2, #1
     230:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     232:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     234:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     236:	3302      	adds	r3, #2
     238:	72c3      	strb	r3, [r0, #11]
}
     23a:	4770      	bx	lr

0000023c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     23c:	b5f0      	push	{r4, r5, r6, r7, lr}
     23e:	b083      	sub	sp, #12
     240:	0005      	movs	r5, r0
     242:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     244:	a901      	add	r1, sp, #4
     246:	2300      	movs	r3, #0
     248:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     24a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     24c:	7923      	ldrb	r3, [r4, #4]
     24e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     250:	7a23      	ldrb	r3, [r4, #8]
     252:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     254:	7820      	ldrb	r0, [r4, #0]
     256:	4b15      	ldr	r3, [pc, #84]	; (2ac <extint_chan_set_config+0x70>)
     258:	4798      	blx	r3
		return NULL;
     25a:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     25c:	2d1f      	cmp	r5, #31
     25e:	d800      	bhi.n	262 <extint_chan_set_config+0x26>
		return eics[eic_index];
     260:	4813      	ldr	r0, [pc, #76]	; (2b0 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     262:	2207      	movs	r2, #7
     264:	402a      	ands	r2, r5
     266:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     268:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     26a:	7aa3      	ldrb	r3, [r4, #10]
     26c:	2b00      	cmp	r3, #0
     26e:	d001      	beq.n	274 <extint_chan_set_config+0x38>
     270:	2308      	movs	r3, #8
     272:	431f      	orrs	r7, r3
     274:	08eb      	lsrs	r3, r5, #3
     276:	009b      	lsls	r3, r3, #2
     278:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     27a:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     27c:	260f      	movs	r6, #15
     27e:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     280:	43b1      	bics	r1, r6
			(new_config << config_pos);
     282:	4097      	lsls	r7, r2
     284:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     286:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     288:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     28a:	7a63      	ldrb	r3, [r4, #9]
     28c:	2b00      	cmp	r3, #0
     28e:	d106      	bne.n	29e <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     290:	6943      	ldr	r3, [r0, #20]
     292:	2201      	movs	r2, #1
     294:	40aa      	lsls	r2, r5
     296:	4393      	bics	r3, r2
     298:	6143      	str	r3, [r0, #20]
	}
}
     29a:	b003      	add	sp, #12
     29c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     29e:	6942      	ldr	r2, [r0, #20]
     2a0:	2301      	movs	r3, #1
     2a2:	40ab      	lsls	r3, r5
     2a4:	4313      	orrs	r3, r2
     2a6:	6143      	str	r3, [r0, #20]
     2a8:	e7f7      	b.n	29a <extint_chan_set_config+0x5e>
     2aa:	46c0      	nop			; (mov r8, r8)
     2ac:	00001d85 	.word	0x00001d85
     2b0:	40001800 	.word	0x40001800

000002b4 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     2b4:	6802      	ldr	r2, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
     2b6:	8a13      	ldrh	r3, [r2, #16]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     2b8:	b21b      	sxth	r3, r3
     2ba:	2b00      	cmp	r3, #0
     2bc:	dbfb      	blt.n	2b6 <_i2c_master_wait_for_sync+0x2>
		/* Wait for I2C module to sync. */
	}
}
     2be:	4770      	bx	lr

000002c0 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     2c0:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     2c2:	7b9a      	ldrb	r2, [r3, #14]
     2c4:	0792      	lsls	r2, r2, #30
     2c6:	d507      	bpl.n	2d8 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     2c8:	2202      	movs	r2, #2
     2ca:	739a      	strb	r2, [r3, #14]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     2cc:	8a1b      	ldrh	r3, [r3, #16]
     2ce:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     2d0:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     2d2:	17db      	asrs	r3, r3, #31
     2d4:	4018      	ands	r0, r3
}
     2d6:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     2d8:	8a1a      	ldrh	r2, [r3, #16]
     2da:	0752      	lsls	r2, r2, #29
     2dc:	d506      	bpl.n	2ec <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     2de:	6859      	ldr	r1, [r3, #4]
     2e0:	22c0      	movs	r2, #192	; 0xc0
     2e2:	0292      	lsls	r2, r2, #10
     2e4:	430a      	orrs	r2, r1
     2e6:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     2e8:	2018      	movs	r0, #24
     2ea:	e7f4      	b.n	2d6 <_i2c_master_address_response+0x16>
	return STATUS_OK;
     2ec:	2000      	movs	r0, #0
     2ee:	e7f2      	b.n	2d6 <_i2c_master_address_response+0x16>

000002f0 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
static enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     2f0:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     2f2:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     2f4:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     2f6:	2401      	movs	r4, #1
     2f8:	2502      	movs	r5, #2
     2fa:	7b91      	ldrb	r1, [r2, #14]
     2fc:	4221      	tst	r1, r4
     2fe:	d10b      	bne.n	318 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     300:	7b91      	ldrb	r1, [r2, #14]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     302:	4229      	tst	r1, r5
     304:	d106      	bne.n	314 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     306:	3301      	adds	r3, #1
     308:	b29b      	uxth	r3, r3
     30a:	8901      	ldrh	r1, [r0, #8]
     30c:	4299      	cmp	r1, r3
     30e:	d8f4      	bhi.n	2fa <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     310:	2012      	movs	r0, #18
     312:	e002      	b.n	31a <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     314:	2000      	movs	r0, #0
     316:	e000      	b.n	31a <_i2c_master_wait_for_bus+0x2a>
     318:	2000      	movs	r0, #0
}
     31a:	bd30      	pop	{r4, r5, pc}

0000031c <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     31c:	b5f0      	push	{r4, r5, r6, r7, lr}
     31e:	46de      	mov	lr, fp
     320:	4657      	mov	r7, sl
     322:	464e      	mov	r6, r9
     324:	4645      	mov	r5, r8
     326:	b5e0      	push	{r5, r6, r7, lr}
     328:	b083      	sub	sp, #12
     32a:	0006      	movs	r6, r0
     32c:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     32e:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     330:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	/* Set address and direction bit. Will send start command on bus. */
	i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ;
     332:	880b      	ldrh	r3, [r1, #0]
     334:	005b      	lsls	r3, r3, #1
     336:	2201      	movs	r2, #1
     338:	4313      	orrs	r3, r2
     33a:	b2db      	uxtb	r3, r3
     33c:	752b      	strb	r3, [r5, #20]

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     33e:	4b32      	ldr	r3, [pc, #200]	; (408 <_i2c_master_read_packet+0xec>)
     340:	4798      	blx	r3
     342:	9001      	str	r0, [sp, #4]

	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     344:	686b      	ldr	r3, [r5, #4]
     346:	4a31      	ldr	r2, [pc, #196]	; (40c <_i2c_master_read_packet+0xf0>)
     348:	4013      	ands	r3, r2
     34a:	606b      	str	r3, [r5, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     34c:	2800      	cmp	r0, #0
     34e:	d007      	beq.n	360 <_i2c_master_read_packet+0x44>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     350:	9801      	ldr	r0, [sp, #4]
     352:	b003      	add	sp, #12
     354:	bc3c      	pop	{r2, r3, r4, r5}
     356:	4690      	mov	r8, r2
     358:	4699      	mov	r9, r3
     35a:	46a2      	mov	sl, r4
     35c:	46ab      	mov	fp, r5
     35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp_status = _i2c_master_address_response(module);
     360:	0030      	movs	r0, r6
     362:	4b2b      	ldr	r3, [pc, #172]	; (410 <_i2c_master_read_packet+0xf4>)
     364:	4798      	blx	r3
     366:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     368:	2800      	cmp	r0, #0
     36a:	d1f1      	bne.n	350 <_i2c_master_read_packet+0x34>
     36c:	3c01      	subs	r4, #1
     36e:	b2a4      	uxth	r4, r4
     370:	4680      	mov	r8, r0
		while (tmp_data_length--) {
     372:	4b28      	ldr	r3, [pc, #160]	; (414 <_i2c_master_read_packet+0xf8>)
     374:	469a      	mov	sl, r3
				_i2c_master_wait_for_sync(module);
     376:	4b28      	ldr	r3, [pc, #160]	; (418 <_i2c_master_read_packet+0xfc>)
     378:	469b      	mov	fp, r3
     37a:	e011      	b.n	3a0 <_i2c_master_read_packet+0x84>
     37c:	0030      	movs	r0, r6
     37e:	47d8      	blx	fp
				packet->data[counter++] = i2c_module->DATA.reg;
     380:	4643      	mov	r3, r8
     382:	1c5f      	adds	r7, r3, #1
     384:	b2bf      	uxth	r7, r7
     386:	7e2b      	ldrb	r3, [r5, #24]
     388:	464a      	mov	r2, r9
     38a:	6852      	ldr	r2, [r2, #4]
     38c:	4641      	mov	r1, r8
     38e:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
     390:	0030      	movs	r0, r6
     392:	4b1d      	ldr	r3, [pc, #116]	; (408 <_i2c_master_read_packet+0xec>)
     394:	4798      	blx	r3
     396:	3c01      	subs	r4, #1
     398:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
     39a:	2800      	cmp	r0, #0
     39c:	d112      	bne.n	3c4 <_i2c_master_read_packet+0xa8>
				packet->data[counter++] = i2c_module->DATA.reg;
     39e:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
     3a0:	4554      	cmp	r4, sl
     3a2:	d011      	beq.n	3c8 <_i2c_master_read_packet+0xac>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     3a4:	8a2b      	ldrh	r3, [r5, #16]
     3a6:	069b      	lsls	r3, r3, #26
     3a8:	d52b      	bpl.n	402 <_i2c_master_read_packet+0xe6>
			if (module->send_nack && tmp_data_length == 0) {
     3aa:	7af3      	ldrb	r3, [r6, #11]
     3ac:	2b00      	cmp	r3, #0
     3ae:	d0e5      	beq.n	37c <_i2c_master_read_packet+0x60>
     3b0:	2c00      	cmp	r4, #0
     3b2:	d1e3      	bne.n	37c <_i2c_master_read_packet+0x60>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     3b4:	686a      	ldr	r2, [r5, #4]
     3b6:	2380      	movs	r3, #128	; 0x80
     3b8:	02db      	lsls	r3, r3, #11
     3ba:	4313      	orrs	r3, r2
     3bc:	606b      	str	r3, [r5, #4]
     3be:	3c01      	subs	r4, #1
     3c0:	b2a4      	uxth	r4, r4
     3c2:	e7ed      	b.n	3a0 <_i2c_master_read_packet+0x84>
				packet->data[counter++] = i2c_module->DATA.reg;
     3c4:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
     3c6:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     3c8:	7ab3      	ldrb	r3, [r6, #10]
     3ca:	2b00      	cmp	r3, #0
     3cc:	d010      	beq.n	3f0 <_i2c_master_read_packet+0xd4>
			_i2c_master_wait_for_sync(module);
     3ce:	0030      	movs	r0, r6
     3d0:	4b11      	ldr	r3, [pc, #68]	; (418 <_i2c_master_read_packet+0xfc>)
     3d2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     3d4:	686a      	ldr	r2, [r5, #4]
     3d6:	23c0      	movs	r3, #192	; 0xc0
     3d8:	029b      	lsls	r3, r3, #10
     3da:	4313      	orrs	r3, r2
     3dc:	606b      	str	r3, [r5, #4]
		_i2c_master_wait_for_sync(module);
     3de:	0030      	movs	r0, r6
     3e0:	4b0d      	ldr	r3, [pc, #52]	; (418 <_i2c_master_read_packet+0xfc>)
     3e2:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     3e4:	7e2a      	ldrb	r2, [r5, #24]
     3e6:	464b      	mov	r3, r9
     3e8:	685b      	ldr	r3, [r3, #4]
     3ea:	4641      	mov	r1, r8
     3ec:	545a      	strb	r2, [r3, r1]
     3ee:	e7af      	b.n	350 <_i2c_master_read_packet+0x34>
		  	_i2c_master_wait_for_sync(module);
     3f0:	0030      	movs	r0, r6
     3f2:	4b09      	ldr	r3, [pc, #36]	; (418 <_i2c_master_read_packet+0xfc>)
     3f4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(1);
     3f6:	686a      	ldr	r2, [r5, #4]
     3f8:	2380      	movs	r3, #128	; 0x80
     3fa:	025b      	lsls	r3, r3, #9
     3fc:	4313      	orrs	r3, r2
     3fe:	606b      	str	r3, [r5, #4]
     400:	e7ed      	b.n	3de <_i2c_master_read_packet+0xc2>
				return STATUS_ERR_PACKET_COLLISION;
     402:	2341      	movs	r3, #65	; 0x41
     404:	9301      	str	r3, [sp, #4]
     406:	e7a3      	b.n	350 <_i2c_master_read_packet+0x34>
     408:	000002f1 	.word	0x000002f1
     40c:	fffbffff 	.word	0xfffbffff
     410:	000002c1 	.word	0x000002c1
     414:	0000ffff 	.word	0x0000ffff
     418:	000002b5 	.word	0x000002b5

0000041c <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     41c:	b5f0      	push	{r4, r5, r6, r7, lr}
     41e:	46de      	mov	lr, fp
     420:	4657      	mov	r7, sl
     422:	464e      	mov	r6, r9
     424:	4645      	mov	r5, r8
     426:	b5e0      	push	{r5, r6, r7, lr}
     428:	b083      	sub	sp, #12
     42a:	0006      	movs	r6, r0
     42c:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     42e:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     430:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     432:	4b24      	ldr	r3, [pc, #144]	; (4c4 <_i2c_master_write_packet+0xa8>)
     434:	4798      	blx	r3

	/* Set address and direction bit. Will send start command on bus. */
	i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE;
     436:	883b      	ldrh	r3, [r7, #0]
     438:	005b      	lsls	r3, r3, #1
     43a:	b2db      	uxtb	r3, r3
     43c:	752b      	strb	r3, [r5, #20]

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     43e:	0030      	movs	r0, r6
     440:	4b21      	ldr	r3, [pc, #132]	; (4c8 <_i2c_master_write_packet+0xac>)
     442:	4798      	blx	r3
     444:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     446:	2800      	cmp	r0, #0
     448:	d007      	beq.n	45a <_i2c_master_write_packet+0x3e>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     44a:	9801      	ldr	r0, [sp, #4]
     44c:	b003      	add	sp, #12
     44e:	bc3c      	pop	{r2, r3, r4, r5}
     450:	4690      	mov	r8, r2
     452:	4699      	mov	r9, r3
     454:	46a2      	mov	sl, r4
     456:	46ab      	mov	fp, r5
     458:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp_status = _i2c_master_address_response(module);
     45a:	0030      	movs	r0, r6
     45c:	4b1b      	ldr	r3, [pc, #108]	; (4cc <_i2c_master_write_packet+0xb0>)
     45e:	4798      	blx	r3
     460:	1e03      	subs	r3, r0, #0
     462:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     464:	d1f1      	bne.n	44a <_i2c_master_write_packet+0x2e>
     466:	46a0      	mov	r8, r4
     468:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     46a:	3320      	adds	r3, #32
     46c:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     46e:	4b15      	ldr	r3, [pc, #84]	; (4c4 <_i2c_master_write_packet+0xa8>)
     470:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     472:	4b15      	ldr	r3, [pc, #84]	; (4c8 <_i2c_master_write_packet+0xac>)
     474:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     476:	4544      	cmp	r4, r8
     478:	d014      	beq.n	4a4 <_i2c_master_write_packet+0x88>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     47a:	8a2b      	ldrh	r3, [r5, #16]
     47c:	464a      	mov	r2, r9
     47e:	4213      	tst	r3, r2
     480:	d01c      	beq.n	4bc <_i2c_master_write_packet+0xa0>
			_i2c_master_wait_for_sync(module);
     482:	0030      	movs	r0, r6
     484:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     486:	687b      	ldr	r3, [r7, #4]
     488:	5d1b      	ldrb	r3, [r3, r4]
     48a:	762b      	strb	r3, [r5, #24]
			tmp_status = _i2c_master_wait_for_bus(module);
     48c:	0030      	movs	r0, r6
     48e:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     490:	2800      	cmp	r0, #0
     492:	d106      	bne.n	4a2 <_i2c_master_write_packet+0x86>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     494:	8a2b      	ldrh	r3, [r5, #16]
     496:	3401      	adds	r4, #1
     498:	075b      	lsls	r3, r3, #29
     49a:	d5ec      	bpl.n	476 <_i2c_master_write_packet+0x5a>
				tmp_status = STATUS_ERR_OVERFLOW;
     49c:	231e      	movs	r3, #30
     49e:	9301      	str	r3, [sp, #4]
     4a0:	e000      	b.n	4a4 <_i2c_master_write_packet+0x88>
			tmp_status = _i2c_master_wait_for_bus(module);
     4a2:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     4a4:	7ab3      	ldrb	r3, [r6, #10]
     4a6:	2b00      	cmp	r3, #0
     4a8:	d0cf      	beq.n	44a <_i2c_master_write_packet+0x2e>
			_i2c_master_wait_for_sync(module);
     4aa:	0030      	movs	r0, r6
     4ac:	4b05      	ldr	r3, [pc, #20]	; (4c4 <_i2c_master_write_packet+0xa8>)
     4ae:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     4b0:	686a      	ldr	r2, [r5, #4]
     4b2:	23c0      	movs	r3, #192	; 0xc0
     4b4:	029b      	lsls	r3, r3, #10
     4b6:	4313      	orrs	r3, r2
     4b8:	606b      	str	r3, [r5, #4]
     4ba:	e7c6      	b.n	44a <_i2c_master_write_packet+0x2e>
				return STATUS_ERR_PACKET_COLLISION;
     4bc:	2341      	movs	r3, #65	; 0x41
     4be:	9301      	str	r3, [sp, #4]
     4c0:	e7c3      	b.n	44a <_i2c_master_write_packet+0x2e>
     4c2:	46c0      	nop			; (mov r8, r8)
     4c4:	000002b5 	.word	0x000002b5
     4c8:	000002f1 	.word	0x000002f1
     4cc:	000002c1 	.word	0x000002c1

000004d0 <i2c_master_init>:
{
     4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     4d2:	46ce      	mov	lr, r9
     4d4:	4647      	mov	r7, r8
     4d6:	b580      	push	{r7, lr}
     4d8:	b083      	sub	sp, #12
     4da:	0007      	movs	r7, r0
     4dc:	000d      	movs	r5, r1
     4de:	0016      	movs	r6, r2
	module->hw = hw;
     4e0:	6039      	str	r1, [r7, #0]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     4e2:	0008      	movs	r0, r1
     4e4:	4b52      	ldr	r3, [pc, #328]	; (630 <i2c_master_init+0x160>)
     4e6:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     4e8:	4a52      	ldr	r2, [pc, #328]	; (634 <i2c_master_init+0x164>)
     4ea:	6a11      	ldr	r1, [r2, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     4ec:	1c84      	adds	r4, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     4ee:	2301      	movs	r3, #1
     4f0:	40a3      	lsls	r3, r4
     4f2:	430b      	orrs	r3, r1
     4f4:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     4f6:	a901      	add	r1, sp, #4
     4f8:	7933      	ldrb	r3, [r6, #4]
     4fa:	700b      	strb	r3, [r1, #0]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     4fc:	300d      	adds	r0, #13
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     4fe:	b2c4      	uxtb	r4, r0
     500:	0020      	movs	r0, r4
     502:	4b4d      	ldr	r3, [pc, #308]	; (638 <i2c_master_init+0x168>)
     504:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     506:	0020      	movs	r0, r4
     508:	4b4c      	ldr	r3, [pc, #304]	; (63c <i2c_master_init+0x16c>)
     50a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     50c:	7930      	ldrb	r0, [r6, #4]
     50e:	2100      	movs	r1, #0
     510:	4b4b      	ldr	r3, [pc, #300]	; (640 <i2c_master_init+0x170>)
     512:	4798      	blx	r3
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     514:	682b      	ldr	r3, [r5, #0]
		return STATUS_ERR_DENIED;
     516:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     518:	079b      	lsls	r3, r3, #30
     51a:	d504      	bpl.n	526 <i2c_master_init+0x56>
}
     51c:	b003      	add	sp, #12
     51e:	bc0c      	pop	{r2, r3}
     520:	4690      	mov	r8, r2
     522:	4699      	mov	r9, r3
     524:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     526:	682b      	ldr	r3, [r5, #0]
		return STATUS_BUSY;
     528:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     52a:	07db      	lsls	r3, r3, #31
     52c:	d4f6      	bmi.n	51c <i2c_master_init+0x4c>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     52e:	6838      	ldr	r0, [r7, #0]
     530:	4b3f      	ldr	r3, [pc, #252]	; (630 <i2c_master_init+0x160>)
     532:	4698      	mov	r8, r3
     534:	4798      	blx	r3
     536:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     538:	4942      	ldr	r1, [pc, #264]	; (644 <i2c_master_init+0x174>)
     53a:	4b43      	ldr	r3, [pc, #268]	; (648 <i2c_master_init+0x178>)
     53c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     53e:	00a4      	lsls	r4, r4, #2
     540:	4b42      	ldr	r3, [pc, #264]	; (64c <i2c_master_init+0x17c>)
     542:	50e7      	str	r7, [r4, r3]
	module->registered_callback = 0;
     544:	2300      	movs	r3, #0
     546:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
     548:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
     54a:	2200      	movs	r2, #0
     54c:	4691      	mov	r9, r2
     54e:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
     550:	83bb      	strh	r3, [r7, #28]
	module->status = STATUS_OK;
     552:	2225      	movs	r2, #37	; 0x25
     554:	4649      	mov	r1, r9
     556:	54b9      	strb	r1, [r7, r2]
	module->buffer = NULL;
     558:	623b      	str	r3, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE_I2C_MASTER;
     55a:	3314      	adds	r3, #20
     55c:	602b      	str	r3, [r5, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     55e:	683c      	ldr	r4, [r7, #0]
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     560:	0020      	movs	r0, r4
     562:	47c0      	blx	r8
     564:	4680      	mov	r8, r0
	config->mux_position = SYSTEM_PINMUX_GPIO;
     566:	2380      	movs	r3, #128	; 0x80
     568:	466a      	mov	r2, sp
     56a:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     56c:	466b      	mov	r3, sp
     56e:	464a      	mov	r2, r9
     570:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     572:	2301      	movs	r3, #1
     574:	466a      	mov	r2, sp
     576:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     578:	466b      	mov	r3, sp
     57a:	464a      	mov	r2, r9
     57c:	70da      	strb	r2, [r3, #3]
	uint32_t pad0 = config->pinmux_pad0;
     57e:	6970      	ldr	r0, [r6, #20]
	uint32_t pad1 = config->pinmux_pad1;
     580:	69b5      	ldr	r5, [r6, #24]
	if (pad0 == PINMUX_DEFAULT) {
     582:	2800      	cmp	r0, #0
     584:	d048      	beq.n	618 <i2c_master_init+0x148>
	pin_conf.mux_position = pad0 & 0xFFFF;
     586:	466b      	mov	r3, sp
     588:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     58a:	2302      	movs	r3, #2
     58c:	466a      	mov	r2, sp
     58e:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     590:	0c00      	lsrs	r0, r0, #16
     592:	b2c0      	uxtb	r0, r0
     594:	4669      	mov	r1, sp
     596:	4b2e      	ldr	r3, [pc, #184]	; (650 <i2c_master_init+0x180>)
     598:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     59a:	2d00      	cmp	r5, #0
     59c:	d041      	beq.n	622 <i2c_master_init+0x152>
	pin_conf.mux_position = pad1 & 0xFFFF;
     59e:	466b      	mov	r3, sp
     5a0:	701d      	strb	r5, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     5a2:	2302      	movs	r3, #2
     5a4:	466a      	mov	r2, sp
     5a6:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     5a8:	0c28      	lsrs	r0, r5, #16
     5aa:	b2c0      	uxtb	r0, r0
     5ac:	4669      	mov	r1, sp
     5ae:	4b28      	ldr	r3, [pc, #160]	; (650 <i2c_master_init+0x180>)
     5b0:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     5b2:	89b3      	ldrh	r3, [r6, #12]
     5b4:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
     5b6:	89f3      	ldrh	r3, [r6, #14]
     5b8:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     5ba:	7c32      	ldrb	r2, [r6, #16]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     5bc:	2380      	movs	r3, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     5be:	2a00      	cmp	r2, #0
     5c0:	d104      	bne.n	5cc <i2c_master_init+0xfc>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     5c2:	4b24      	ldr	r3, [pc, #144]	; (654 <i2c_master_init+0x184>)
     5c4:	789b      	ldrb	r3, [r3, #2]
     5c6:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     5c8:	0fdb      	lsrs	r3, r3, #31
     5ca:	01db      	lsls	r3, r3, #7
		tmp_ctrla |= config->start_hold_time;
     5cc:	68b2      	ldr	r2, [r6, #8]
     5ce:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     5d0:	7f32      	ldrb	r2, [r6, #28]
     5d2:	2a00      	cmp	r2, #0
     5d4:	d002      	beq.n	5dc <i2c_master_init+0x10c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUT;
     5d6:	2280      	movs	r2, #128	; 0x80
     5d8:	05d2      	lsls	r2, r2, #23
     5da:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     5dc:	6822      	ldr	r2, [r4, #0]
     5de:	6a31      	ldr	r1, [r6, #32]
     5e0:	430a      	orrs	r2, r1
     5e2:	4313      	orrs	r3, r2
     5e4:	6023      	str	r3, [r4, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     5e6:	2380      	movs	r3, #128	; 0x80
     5e8:	005b      	lsls	r3, r3, #1
     5ea:	6063      	str	r3, [r4, #4]
	tmp_baud = (int32_t)(div_ceil(
     5ec:	4645      	mov	r5, r8
     5ee:	350d      	adds	r5, #13
     5f0:	b2e8      	uxtb	r0, r5
     5f2:	4b19      	ldr	r3, [pc, #100]	; (658 <i2c_master_init+0x188>)
     5f4:	4798      	blx	r3
     5f6:	6833      	ldr	r3, [r6, #0]
     5f8:	21fa      	movs	r1, #250	; 0xfa
     5fa:	00c9      	lsls	r1, r1, #3
     5fc:	4359      	muls	r1, r3
     5fe:	1e4b      	subs	r3, r1, #1
     600:	1818      	adds	r0, r3, r0
     602:	4b16      	ldr	r3, [pc, #88]	; (65c <i2c_master_init+0x18c>)
     604:	4798      	blx	r3
				(2000*(config->baud_rate))) - 5);
     606:	1f43      	subs	r3, r0, #5
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
     608:	2040      	movs	r0, #64	; 0x40
	if (tmp_baud > 255 || tmp_baud < 0) {
     60a:	2bff      	cmp	r3, #255	; 0xff
     60c:	d900      	bls.n	610 <i2c_master_init+0x140>
     60e:	e785      	b.n	51c <i2c_master_init+0x4c>
		i2c_module->BAUD.reg = (uint8_t)tmp_baud;
     610:	b2db      	uxtb	r3, r3
     612:	8163      	strh	r3, [r4, #10]
	enum status_code tmp_status_code = STATUS_OK;
     614:	2000      	movs	r0, #0
     616:	e781      	b.n	51c <i2c_master_init+0x4c>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     618:	2100      	movs	r1, #0
     61a:	0020      	movs	r0, r4
     61c:	4b10      	ldr	r3, [pc, #64]	; (660 <i2c_master_init+0x190>)
     61e:	4798      	blx	r3
     620:	e7b1      	b.n	586 <i2c_master_init+0xb6>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     622:	2101      	movs	r1, #1
     624:	0020      	movs	r0, r4
     626:	4b0e      	ldr	r3, [pc, #56]	; (660 <i2c_master_init+0x190>)
     628:	4798      	blx	r3
     62a:	0005      	movs	r5, r0
     62c:	e7b7      	b.n	59e <i2c_master_init+0xce>
     62e:	46c0      	nop			; (mov r8, r8)
     630:	00000ccd 	.word	0x00000ccd
     634:	40000400 	.word	0x40000400
     638:	00001c8d 	.word	0x00001c8d
     63c:	00001c01 	.word	0x00001c01
     640:	00000b09 	.word	0x00000b09
     644:	000007c1 	.word	0x000007c1
     648:	000011e9 	.word	0x000011e9
     64c:	2000011c 	.word	0x2000011c
     650:	00001d85 	.word	0x00001d85
     654:	41002000 	.word	0x41002000
     658:	00001ca9 	.word	0x00001ca9
     65c:	00001fc9 	.word	0x00001fc9
     660:	00000b55 	.word	0x00000b55

00000664 <i2c_master_read_packet_wait>:
{
     664:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
     666:	8b83      	ldrh	r3, [r0, #28]
     668:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     66a:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     66c:	2b00      	cmp	r3, #0
     66e:	d001      	beq.n	674 <i2c_master_read_packet_wait+0x10>
}
     670:	0010      	movs	r0, r2
     672:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     674:	3301      	adds	r3, #1
     676:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     678:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     67a:	4b02      	ldr	r3, [pc, #8]	; (684 <i2c_master_read_packet_wait+0x20>)
     67c:	4798      	blx	r3
     67e:	0002      	movs	r2, r0
     680:	e7f6      	b.n	670 <i2c_master_read_packet_wait+0xc>
     682:	46c0      	nop			; (mov r8, r8)
     684:	0000031d 	.word	0x0000031d

00000688 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     688:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     68a:	8b83      	ldrh	r3, [r0, #28]
     68c:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     68e:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     690:	2b00      	cmp	r3, #0
     692:	d001      	beq.n	698 <i2c_master_write_packet_wait+0x10>

	module->send_stop = true;
	module->send_nack = true;
	
	return _i2c_master_write_packet(module, packet);
}
     694:	0010      	movs	r0, r2
     696:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     698:	3301      	adds	r3, #1
     69a:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     69c:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     69e:	4b02      	ldr	r3, [pc, #8]	; (6a8 <i2c_master_write_packet_wait+0x20>)
     6a0:	4798      	blx	r3
     6a2:	0002      	movs	r2, r0
     6a4:	e7f6      	b.n	694 <i2c_master_write_packet_wait+0xc>
     6a6:	46c0      	nop			; (mov r8, r8)
     6a8:	0000041d 	.word	0x0000041d

000006ac <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     6ac:	6802      	ldr	r2, [r0, #0]
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
     6ae:	8a13      	ldrh	r3, [r2, #16]
	while (i2c_master_is_syncing(module)) {
     6b0:	b21b      	sxth	r3, r3
     6b2:	2b00      	cmp	r3, #0
     6b4:	dbfb      	blt.n	6ae <_i2c_master_wait_for_sync+0x2>
}
     6b6:	4770      	bx	lr

000006b8 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     6b8:	b570      	push	{r4, r5, r6, lr}
     6ba:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6bc:	6806      	ldr	r6, [r0, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
     6be:	8b45      	ldrh	r5, [r0, #26]
     6c0:	8b83      	ldrh	r3, [r0, #28]
     6c2:	1aed      	subs	r5, r5, r3
     6c4:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     6c6:	8b83      	ldrh	r3, [r0, #28]
     6c8:	3b01      	subs	r3, #1
     6ca:	b29b      	uxth	r3, r3
     6cc:	8383      	strh	r3, [r0, #28]

	if (!module->buffer_remaining) {
     6ce:	8b83      	ldrh	r3, [r0, #28]
     6d0:	b29b      	uxth	r3, r3
     6d2:	2b00      	cmp	r3, #0
     6d4:	d11c      	bne.n	710 <_i2c_master_read+0x58>
		/* Send nack */
	  	if (module->send_nack)
     6d6:	7ac3      	ldrb	r3, [r0, #11]
     6d8:	2b00      	cmp	r3, #0
     6da:	d004      	beq.n	6e6 <_i2c_master_read+0x2e>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     6dc:	6872      	ldr	r2, [r6, #4]
     6de:	2380      	movs	r3, #128	; 0x80
     6e0:	02db      	lsls	r3, r3, #11
     6e2:	4313      	orrs	r3, r2
     6e4:	6073      	str	r3, [r6, #4]
		if (module->send_stop) {
     6e6:	7aa3      	ldrb	r3, [r4, #10]
     6e8:	2b00      	cmp	r3, #0
     6ea:	d008      	beq.n	6fe <_i2c_master_read+0x46>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
     6ec:	0020      	movs	r0, r4
     6ee:	4b0f      	ldr	r3, [pc, #60]	; (72c <_i2c_master_read+0x74>)
     6f0:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     6f2:	6872      	ldr	r2, [r6, #4]
     6f4:	23c0      	movs	r3, #192	; 0xc0
     6f6:	029b      	lsls	r3, r3, #10
     6f8:	4313      	orrs	r3, r2
     6fa:	6073      	str	r3, [r6, #4]
     6fc:	e00c      	b.n	718 <_i2c_master_read+0x60>
		} else {
		  	_i2c_master_wait_for_sync(module);
     6fe:	0020      	movs	r0, r4
     700:	4b0a      	ldr	r3, [pc, #40]	; (72c <_i2c_master_read+0x74>)
     702:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(1);
     704:	6872      	ldr	r2, [r6, #4]
     706:	2380      	movs	r3, #128	; 0x80
     708:	025b      	lsls	r3, r3, #9
     70a:	4313      	orrs	r3, r2
     70c:	6073      	str	r3, [r6, #4]
     70e:	e003      	b.n	718 <_i2c_master_read+0x60>
		}
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     710:	6873      	ldr	r3, [r6, #4]
     712:	4a07      	ldr	r2, [pc, #28]	; (730 <_i2c_master_read+0x78>)
     714:	4013      	ands	r3, r2
     716:	6073      	str	r3, [r6, #4]
	}

	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     718:	0020      	movs	r0, r4
     71a:	4b04      	ldr	r3, [pc, #16]	; (72c <_i2c_master_read+0x74>)
     71c:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     71e:	6a23      	ldr	r3, [r4, #32]
     720:	195d      	adds	r5, r3, r5
     722:	7e33      	ldrb	r3, [r6, #24]
     724:	b2db      	uxtb	r3, r3
     726:	702b      	strb	r3, [r5, #0]
}
     728:	bd70      	pop	{r4, r5, r6, pc}
     72a:	46c0      	nop			; (mov r8, r8)
     72c:	000006ad 	.word	0x000006ad
     730:	fffbffff 	.word	0xfffbffff

00000734 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     734:	b570      	push	{r4, r5, r6, lr}
     736:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     738:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     73a:	8a2b      	ldrh	r3, [r5, #16]
     73c:	075b      	lsls	r3, r3, #29
     73e:	d503      	bpl.n	748 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     740:	221e      	movs	r2, #30
     742:	2325      	movs	r3, #37	; 0x25
     744:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     746:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
     748:	8b46      	ldrh	r6, [r0, #26]
     74a:	8b83      	ldrh	r3, [r0, #28]
     74c:	1af6      	subs	r6, r6, r3
     74e:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     750:	8b83      	ldrh	r3, [r0, #28]
     752:	3b01      	subs	r3, #1
     754:	b29b      	uxth	r3, r3
     756:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     758:	4b03      	ldr	r3, [pc, #12]	; (768 <_i2c_master_write+0x34>)
     75a:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     75c:	6a23      	ldr	r3, [r4, #32]
     75e:	199e      	adds	r6, r3, r6
     760:	7833      	ldrb	r3, [r6, #0]
     762:	b2db      	uxtb	r3, r3
     764:	762b      	strb	r3, [r5, #24]
     766:	e7ee      	b.n	746 <_i2c_master_write+0x12>
     768:	000006ad 	.word	0x000006ad

0000076c <i2c_master_register_callback>:
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
     76c:	1c93      	adds	r3, r2, #2
     76e:	009b      	lsls	r3, r3, #2
     770:	18c3      	adds	r3, r0, r3
     772:	6059      	str	r1, [r3, #4]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
     774:	7e03      	ldrb	r3, [r0, #24]
     776:	2101      	movs	r1, #1
     778:	4091      	lsls	r1, r2
     77a:	430b      	orrs	r3, r1
     77c:	b2db      	uxtb	r3, r3
     77e:	7603      	strb	r3, [r0, #24]
}
     780:	4770      	bx	lr

00000782 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     782:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     784:	8b83      	ldrh	r3, [r0, #28]
     786:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     788:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     78a:	2b00      	cmp	r3, #0
     78c:	d001      	beq.n	792 <i2c_master_read_packet_job+0x10>
	/* Make sure we send STOP */
	module->send_stop = true;
	module->send_nack = true;
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
}
     78e:	0010      	movs	r0, r2
     790:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     792:	3301      	adds	r3, #1
     794:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     796:	72c3      	strb	r3, [r0, #11]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     798:	6802      	ldr	r2, [r0, #0]
	module->buffer             = packet->data;
     79a:	684c      	ldr	r4, [r1, #4]
     79c:	6204      	str	r4, [r0, #32]
	module->buffer_remaining   = packet->data_length;
     79e:	884c      	ldrh	r4, [r1, #2]
     7a0:	8384      	strh	r4, [r0, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
     7a2:	2424      	movs	r4, #36	; 0x24
     7a4:	5503      	strb	r3, [r0, r4]
	module->status             = STATUS_BUSY;
     7a6:	3c1f      	subs	r4, #31
     7a8:	3324      	adds	r3, #36	; 0x24
     7aa:	54c4      	strb	r4, [r0, r3]
	i2c_module->INTENSET.reg =
     7ac:	3b22      	subs	r3, #34	; 0x22
     7ae:	7353      	strb	r3, [r2, #13]
	i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ;
     7b0:	880b      	ldrh	r3, [r1, #0]
     7b2:	005b      	lsls	r3, r3, #1
     7b4:	2101      	movs	r1, #1
     7b6:	430b      	orrs	r3, r1
     7b8:	b2db      	uxtb	r3, r3
     7ba:	7513      	strb	r3, [r2, #20]
	return _i2c_master_read_packet(module, packet);
     7bc:	2200      	movs	r2, #0
     7be:	e7e6      	b.n	78e <i2c_master_read_packet_job+0xc>

000007c0 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     7c0:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     7c2:	0080      	lsls	r0, r0, #2
     7c4:	4b6e      	ldr	r3, [pc, #440]	; (980 <_i2c_master_interrupt_handler+0x1c0>)
     7c6:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     7c8:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback &
     7ca:	7e63      	ldrb	r3, [r4, #25]
			module->registered_callback;
     7cc:	7e25      	ldrb	r5, [r4, #24]
	uint8_t callback_mask = module->enabled_callback &
     7ce:	401d      	ands	r5, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     7d0:	8b63      	ldrh	r3, [r4, #26]
     7d2:	b29b      	uxth	r3, r3
     7d4:	2b00      	cmp	r3, #0
     7d6:	d103      	bne.n	7e0 <_i2c_master_interrupt_handler+0x20>
     7d8:	8ba3      	ldrh	r3, [r4, #28]
     7da:	b29b      	uxth	r3, r3
     7dc:	2b00      	cmp	r3, #0
     7de:	d141      	bne.n	864 <_i2c_master_interrupt_handler+0xa4>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     7e0:	8b63      	ldrh	r3, [r4, #26]
     7e2:	b29b      	uxth	r3, r3
     7e4:	2b00      	cmp	r3, #0
     7e6:	d008      	beq.n	7fa <_i2c_master_interrupt_handler+0x3a>
     7e8:	8ba3      	ldrh	r3, [r4, #28]
     7ea:	b29b      	uxth	r3, r3
     7ec:	2b00      	cmp	r3, #0
     7ee:	d104      	bne.n	7fa <_i2c_master_interrupt_handler+0x3a>
			(module->status == STATUS_BUSY) &&
     7f0:	3325      	adds	r3, #37	; 0x25
     7f2:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     7f4:	2b05      	cmp	r3, #5
     7f6:	d100      	bne.n	7fa <_i2c_master_interrupt_handler+0x3a>
     7f8:	e066      	b.n	8c8 <_i2c_master_interrupt_handler+0x108>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     7fa:	8b63      	ldrh	r3, [r4, #26]
     7fc:	b29b      	uxth	r3, r3
     7fe:	2b00      	cmp	r3, #0
     800:	d00a      	beq.n	818 <_i2c_master_interrupt_handler+0x58>
     802:	8ba3      	ldrh	r3, [r4, #28]
     804:	b29b      	uxth	r3, r3
     806:	2b00      	cmp	r3, #0
     808:	d006      	beq.n	818 <_i2c_master_interrupt_handler+0x58>
		/* Check that bus ownership is not lost */
		if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     80a:	8a33      	ldrh	r3, [r6, #16]
     80c:	069b      	lsls	r3, r3, #26
     80e:	d500      	bpl.n	812 <_i2c_master_interrupt_handler+0x52>
     810:	e07b      	b.n	90a <_i2c_master_interrupt_handler+0x14a>
			module->status = STATUS_ERR_PACKET_COLLISION;
     812:	2241      	movs	r2, #65	; 0x41
     814:	2325      	movs	r3, #37	; 0x25
     816:	54e2      	strb	r2, [r4, r3]
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     818:	8b63      	ldrh	r3, [r4, #26]
     81a:	b29b      	uxth	r3, r3
     81c:	2b00      	cmp	r3, #0
     81e:	d008      	beq.n	832 <_i2c_master_interrupt_handler+0x72>
     820:	8ba3      	ldrh	r3, [r4, #28]
     822:	b29b      	uxth	r3, r3
     824:	2b00      	cmp	r3, #0
     826:	d104      	bne.n	832 <_i2c_master_interrupt_handler+0x72>
			(module->status == STATUS_BUSY) &&
     828:	3325      	adds	r3, #37	; 0x25
     82a:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     82c:	2b05      	cmp	r3, #5
     82e:	d100      	bne.n	832 <_i2c_master_interrupt_handler+0x72>
     830:	e077      	b.n	922 <_i2c_master_interrupt_handler+0x162>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     832:	2325      	movs	r3, #37	; 0x25
     834:	5ce3      	ldrb	r3, [r4, r3]
     836:	2b05      	cmp	r3, #5
     838:	d013      	beq.n	862 <_i2c_master_interrupt_handler+0xa2>
     83a:	2325      	movs	r3, #37	; 0x25
     83c:	5ce3      	ldrb	r3, [r4, r3]
     83e:	2b00      	cmp	r3, #0
     840:	d00f      	beq.n	862 <_i2c_master_interrupt_handler+0xa2>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     842:	2303      	movs	r3, #3
     844:	7333      	strb	r3, [r6, #12]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     846:	2300      	movs	r3, #0
     848:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     84a:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     84c:	3325      	adds	r3, #37	; 0x25
     84e:	5ce3      	ldrb	r3, [r4, r3]
     850:	2b41      	cmp	r3, #65	; 0x41
     852:	d003      	beq.n	85c <_i2c_master_interrupt_handler+0x9c>
     854:	7aa3      	ldrb	r3, [r4, #10]
     856:	2b00      	cmp	r3, #0
     858:	d000      	beq.n	85c <_i2c_master_interrupt_handler+0x9c>
     85a:	e084      	b.n	966 <_i2c_master_interrupt_handler+0x1a6>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     85c:	076b      	lsls	r3, r5, #29
     85e:	d500      	bpl.n	862 <_i2c_master_interrupt_handler+0xa2>
     860:	e08a      	b.n	978 <_i2c_master_interrupt_handler+0x1b8>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     862:	bd70      	pop	{r4, r5, r6, pc}
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     864:	7bb3      	ldrb	r3, [r6, #14]
     866:	07db      	lsls	r3, r3, #31
     868:	d507      	bpl.n	87a <_i2c_master_interrupt_handler+0xba>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     86a:	2301      	movs	r3, #1
     86c:	73b3      	strb	r3, [r6, #14]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     86e:	8a33      	ldrh	r3, [r6, #16]
     870:	079b      	lsls	r3, r3, #30
     872:	d502      	bpl.n	87a <_i2c_master_interrupt_handler+0xba>
			module->status = STATUS_ERR_PACKET_COLLISION;
     874:	2241      	movs	r2, #65	; 0x41
     876:	2325      	movs	r3, #37	; 0x25
     878:	54e2      	strb	r2, [r4, r3]
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     87a:	8a33      	ldrh	r3, [r6, #16]
     87c:	075b      	lsls	r3, r3, #29
     87e:	d507      	bpl.n	890 <_i2c_master_interrupt_handler+0xd0>
		module->status           = STATUS_ERR_BAD_ADDRESS;
     880:	2218      	movs	r2, #24
     882:	2325      	movs	r3, #37	; 0x25
     884:	54e2      	strb	r2, [r4, r3]
		module->buffer_remaining = 0;
     886:	2300      	movs	r3, #0
     888:	83a3      	strh	r3, [r4, #28]
		if (module->send_stop) {
     88a:	7aa3      	ldrb	r3, [r4, #10]
     88c:	2b00      	cmp	r3, #0
     88e:	d10e      	bne.n	8ae <_i2c_master_interrupt_handler+0xee>
	module->buffer_length = module->buffer_remaining;
     890:	8ba3      	ldrh	r3, [r4, #28]
     892:	b29b      	uxth	r3, r3
     894:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     896:	2325      	movs	r3, #37	; 0x25
     898:	5ce3      	ldrb	r3, [r4, r3]
     89a:	2b05      	cmp	r3, #5
     89c:	d1bc      	bne.n	818 <_i2c_master_interrupt_handler+0x58>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     89e:	331f      	adds	r3, #31
     8a0:	5ce3      	ldrb	r3, [r4, r3]
     8a2:	2b00      	cmp	r3, #0
     8a4:	d00c      	beq.n	8c0 <_i2c_master_interrupt_handler+0x100>
			_i2c_master_read(module);
     8a6:	0020      	movs	r0, r4
     8a8:	4b36      	ldr	r3, [pc, #216]	; (984 <_i2c_master_interrupt_handler+0x1c4>)
     8aa:	4798      	blx	r3
     8ac:	e7b4      	b.n	818 <_i2c_master_interrupt_handler+0x58>
			_i2c_master_wait_for_sync(module);
     8ae:	0020      	movs	r0, r4
     8b0:	4b35      	ldr	r3, [pc, #212]	; (988 <_i2c_master_interrupt_handler+0x1c8>)
     8b2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     8b4:	6872      	ldr	r2, [r6, #4]
     8b6:	23c0      	movs	r3, #192	; 0xc0
     8b8:	029b      	lsls	r3, r3, #10
     8ba:	4313      	orrs	r3, r2
     8bc:	6073      	str	r3, [r6, #4]
     8be:	e7e7      	b.n	890 <_i2c_master_interrupt_handler+0xd0>
			_i2c_master_write(module);
     8c0:	0020      	movs	r0, r4
     8c2:	4b32      	ldr	r3, [pc, #200]	; (98c <_i2c_master_interrupt_handler+0x1cc>)
     8c4:	4798      	blx	r3
     8c6:	e7a7      	b.n	818 <_i2c_master_interrupt_handler+0x58>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     8c8:	331f      	adds	r3, #31
     8ca:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     8cc:	2b00      	cmp	r3, #0
     8ce:	d000      	beq.n	8d2 <_i2c_master_interrupt_handler+0x112>
     8d0:	e793      	b.n	7fa <_i2c_master_interrupt_handler+0x3a>
		i2c_module->INTENCLR.reg =
     8d2:	3303      	adds	r3, #3
     8d4:	7333      	strb	r3, [r6, #12]
		module->buffer_length = 0;
     8d6:	2300      	movs	r3, #0
     8d8:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     8da:	3325      	adds	r3, #37	; 0x25
     8dc:	2200      	movs	r2, #0
     8de:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     8e0:	7aa3      	ldrb	r3, [r4, #10]
     8e2:	2b00      	cmp	r3, #0
     8e4:	d108      	bne.n	8f8 <_i2c_master_interrupt_handler+0x138>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     8e6:	2301      	movs	r3, #1
     8e8:	73b3      	strb	r3, [r6, #14]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     8ea:	07eb      	lsls	r3, r5, #31
     8ec:	d400      	bmi.n	8f0 <_i2c_master_interrupt_handler+0x130>
     8ee:	e793      	b.n	818 <_i2c_master_interrupt_handler+0x58>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     8f0:	68e3      	ldr	r3, [r4, #12]
     8f2:	0020      	movs	r0, r4
     8f4:	4798      	blx	r3
     8f6:	e78f      	b.n	818 <_i2c_master_interrupt_handler+0x58>
			_i2c_master_wait_for_sync(module);
     8f8:	0020      	movs	r0, r4
     8fa:	4b23      	ldr	r3, [pc, #140]	; (988 <_i2c_master_interrupt_handler+0x1c8>)
     8fc:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     8fe:	6872      	ldr	r2, [r6, #4]
     900:	23c0      	movs	r3, #192	; 0xc0
     902:	029b      	lsls	r3, r3, #10
     904:	4313      	orrs	r3, r2
     906:	6073      	str	r3, [r6, #4]
     908:	e7ef      	b.n	8ea <_i2c_master_interrupt_handler+0x12a>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     90a:	2324      	movs	r3, #36	; 0x24
     90c:	5ce3      	ldrb	r3, [r4, r3]
     90e:	2b00      	cmp	r3, #0
     910:	d103      	bne.n	91a <_i2c_master_interrupt_handler+0x15a>
			_i2c_master_write(module);
     912:	0020      	movs	r0, r4
     914:	4b1d      	ldr	r3, [pc, #116]	; (98c <_i2c_master_interrupt_handler+0x1cc>)
     916:	4798      	blx	r3
     918:	e77e      	b.n	818 <_i2c_master_interrupt_handler+0x58>
			_i2c_master_read(module);
     91a:	0020      	movs	r0, r4
     91c:	4b19      	ldr	r3, [pc, #100]	; (984 <_i2c_master_interrupt_handler+0x1c4>)
     91e:	4798      	blx	r3
     920:	e77a      	b.n	818 <_i2c_master_interrupt_handler+0x58>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     922:	331f      	adds	r3, #31
     924:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     926:	2b01      	cmp	r3, #1
     928:	d000      	beq.n	92c <_i2c_master_interrupt_handler+0x16c>
     92a:	e782      	b.n	832 <_i2c_master_interrupt_handler+0x72>
		i2c_module->INTENCLR.reg =
     92c:	3302      	adds	r3, #2
     92e:	7333      	strb	r3, [r6, #12]
		module->buffer_length = 0;
     930:	2300      	movs	r3, #0
     932:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     934:	3325      	adds	r3, #37	; 0x25
     936:	2200      	movs	r2, #0
     938:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     93a:	07ab      	lsls	r3, r5, #30
     93c:	d503      	bpl.n	946 <_i2c_master_interrupt_handler+0x186>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     93e:	2324      	movs	r3, #36	; 0x24
     940:	5ce3      	ldrb	r3, [r4, r3]
     942:	2b01      	cmp	r3, #1
     944:	d00b      	beq.n	95e <_i2c_master_interrupt_handler+0x19e>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     946:	07eb      	lsls	r3, r5, #31
     948:	d400      	bmi.n	94c <_i2c_master_interrupt_handler+0x18c>
     94a:	e772      	b.n	832 <_i2c_master_interrupt_handler+0x72>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     94c:	2324      	movs	r3, #36	; 0x24
     94e:	5ce3      	ldrb	r3, [r4, r3]
     950:	2b00      	cmp	r3, #0
     952:	d000      	beq.n	956 <_i2c_master_interrupt_handler+0x196>
     954:	e76d      	b.n	832 <_i2c_master_interrupt_handler+0x72>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     956:	68e3      	ldr	r3, [r4, #12]
     958:	0020      	movs	r0, r4
     95a:	4798      	blx	r3
     95c:	e769      	b.n	832 <_i2c_master_interrupt_handler+0x72>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     95e:	6923      	ldr	r3, [r4, #16]
     960:	0020      	movs	r0, r4
     962:	4798      	blx	r3
     964:	e765      	b.n	832 <_i2c_master_interrupt_handler+0x72>
			_i2c_master_wait_for_sync(module);
     966:	0020      	movs	r0, r4
     968:	4b07      	ldr	r3, [pc, #28]	; (988 <_i2c_master_interrupt_handler+0x1c8>)
     96a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     96c:	6872      	ldr	r2, [r6, #4]
     96e:	23e0      	movs	r3, #224	; 0xe0
     970:	02db      	lsls	r3, r3, #11
     972:	4313      	orrs	r3, r2
     974:	6073      	str	r3, [r6, #4]
     976:	e771      	b.n	85c <_i2c_master_interrupt_handler+0x9c>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     978:	6963      	ldr	r3, [r4, #20]
     97a:	0020      	movs	r0, r4
     97c:	4798      	blx	r3
}
     97e:	e770      	b.n	862 <_i2c_master_interrupt_handler+0xa2>
     980:	2000011c 	.word	0x2000011c
     984:	000006b9 	.word	0x000006b9
     988:	000006ad 	.word	0x000006ad
     98c:	00000735 	.word	0x00000735

00000990 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     990:	b5f0      	push	{r4, r5, r6, r7, lr}
     992:	46de      	mov	lr, fp
     994:	4657      	mov	r7, sl
     996:	464e      	mov	r6, r9
     998:	4645      	mov	r5, r8
     99a:	b5e0      	push	{r5, r6, r7, lr}
     99c:	b087      	sub	sp, #28
     99e:	4680      	mov	r8, r0
     9a0:	9104      	str	r1, [sp, #16]
     9a2:	0016      	movs	r6, r2
     9a4:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     9a6:	2200      	movs	r2, #0
     9a8:	2300      	movs	r3, #0
     9aa:	2100      	movs	r1, #0
     9ac:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     9ae:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     9b0:	2001      	movs	r0, #1
     9b2:	0021      	movs	r1, r4
     9b4:	9600      	str	r6, [sp, #0]
     9b6:	9701      	str	r7, [sp, #4]
     9b8:	465c      	mov	r4, fp
     9ba:	9403      	str	r4, [sp, #12]
     9bc:	4644      	mov	r4, r8
     9be:	9405      	str	r4, [sp, #20]
     9c0:	e013      	b.n	9ea <long_division+0x5a>
     9c2:	2420      	movs	r4, #32
     9c4:	1a64      	subs	r4, r4, r1
     9c6:	0005      	movs	r5, r0
     9c8:	40e5      	lsrs	r5, r4
     9ca:	46a8      	mov	r8, r5
     9cc:	e014      	b.n	9f8 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     9ce:	9c00      	ldr	r4, [sp, #0]
     9d0:	9d01      	ldr	r5, [sp, #4]
     9d2:	1b12      	subs	r2, r2, r4
     9d4:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     9d6:	465c      	mov	r4, fp
     9d8:	464d      	mov	r5, r9
     9da:	432c      	orrs	r4, r5
     9dc:	46a3      	mov	fp, r4
     9de:	9c03      	ldr	r4, [sp, #12]
     9e0:	4645      	mov	r5, r8
     9e2:	432c      	orrs	r4, r5
     9e4:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     9e6:	3901      	subs	r1, #1
     9e8:	d325      	bcc.n	a36 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     9ea:	2420      	movs	r4, #32
     9ec:	4264      	negs	r4, r4
     9ee:	190c      	adds	r4, r1, r4
     9f0:	d4e7      	bmi.n	9c2 <long_division+0x32>
     9f2:	0005      	movs	r5, r0
     9f4:	40a5      	lsls	r5, r4
     9f6:	46a8      	mov	r8, r5
     9f8:	0004      	movs	r4, r0
     9fa:	408c      	lsls	r4, r1
     9fc:	46a1      	mov	r9, r4
		r = r << 1;
     9fe:	1892      	adds	r2, r2, r2
     a00:	415b      	adcs	r3, r3
     a02:	0014      	movs	r4, r2
     a04:	001d      	movs	r5, r3
		if (n & bit_shift) {
     a06:	9e05      	ldr	r6, [sp, #20]
     a08:	464f      	mov	r7, r9
     a0a:	403e      	ands	r6, r7
     a0c:	46b4      	mov	ip, r6
     a0e:	9e04      	ldr	r6, [sp, #16]
     a10:	4647      	mov	r7, r8
     a12:	403e      	ands	r6, r7
     a14:	46b2      	mov	sl, r6
     a16:	4666      	mov	r6, ip
     a18:	4657      	mov	r7, sl
     a1a:	433e      	orrs	r6, r7
     a1c:	d003      	beq.n	a26 <long_division+0x96>
			r |= 0x01;
     a1e:	0006      	movs	r6, r0
     a20:	4326      	orrs	r6, r4
     a22:	0032      	movs	r2, r6
     a24:	002b      	movs	r3, r5
		if (r >= d) {
     a26:	9c00      	ldr	r4, [sp, #0]
     a28:	9d01      	ldr	r5, [sp, #4]
     a2a:	429d      	cmp	r5, r3
     a2c:	d8db      	bhi.n	9e6 <long_division+0x56>
     a2e:	d1ce      	bne.n	9ce <long_division+0x3e>
     a30:	4294      	cmp	r4, r2
     a32:	d8d8      	bhi.n	9e6 <long_division+0x56>
     a34:	e7cb      	b.n	9ce <long_division+0x3e>
     a36:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     a38:	4658      	mov	r0, fp
     a3a:	0019      	movs	r1, r3
     a3c:	b007      	add	sp, #28
     a3e:	bc3c      	pop	{r2, r3, r4, r5}
     a40:	4690      	mov	r8, r2
     a42:	4699      	mov	r9, r3
     a44:	46a2      	mov	sl, r4
     a46:	46ab      	mov	fp, r5
     a48:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000a4a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     a4a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     a4c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a4e:	2340      	movs	r3, #64	; 0x40
     a50:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     a52:	4281      	cmp	r1, r0
     a54:	d202      	bcs.n	a5c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     a56:	0018      	movs	r0, r3
     a58:	bd10      	pop	{r4, pc}
		baud_calculated++;
     a5a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     a5c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     a5e:	1c63      	adds	r3, r4, #1
     a60:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     a62:	4288      	cmp	r0, r1
     a64:	d9f9      	bls.n	a5a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a66:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     a68:	2cff      	cmp	r4, #255	; 0xff
     a6a:	d8f4      	bhi.n	a56 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     a6c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     a6e:	2300      	movs	r3, #0
     a70:	e7f1      	b.n	a56 <_sercom_get_sync_baud_val+0xc>
	...

00000a74 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     a74:	b5f0      	push	{r4, r5, r6, r7, lr}
     a76:	b083      	sub	sp, #12
     a78:	000f      	movs	r7, r1
     a7a:	0016      	movs	r6, r2
     a7c:	aa08      	add	r2, sp, #32
     a7e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     a80:	0004      	movs	r4, r0
     a82:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a84:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     a86:	42bc      	cmp	r4, r7
     a88:	d902      	bls.n	a90 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     a8a:	0010      	movs	r0, r2
     a8c:	b003      	add	sp, #12
     a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     a90:	2b00      	cmp	r3, #0
     a92:	d114      	bne.n	abe <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     a94:	0002      	movs	r2, r0
     a96:	0008      	movs	r0, r1
     a98:	2100      	movs	r1, #0
     a9a:	4c19      	ldr	r4, [pc, #100]	; (b00 <_sercom_get_async_baud_val+0x8c>)
     a9c:	47a0      	blx	r4
     a9e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     aa0:	003a      	movs	r2, r7
     aa2:	2300      	movs	r3, #0
     aa4:	2000      	movs	r0, #0
     aa6:	4c17      	ldr	r4, [pc, #92]	; (b04 <_sercom_get_async_baud_val+0x90>)
     aa8:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     aaa:	2200      	movs	r2, #0
     aac:	2301      	movs	r3, #1
     aae:	1a12      	subs	r2, r2, r0
     ab0:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     ab2:	0c12      	lsrs	r2, r2, #16
     ab4:	041b      	lsls	r3, r3, #16
     ab6:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     ab8:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     aba:	2200      	movs	r2, #0
     abc:	e7e5      	b.n	a8a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     abe:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     ac0:	2b01      	cmp	r3, #1
     ac2:	d1f9      	bne.n	ab8 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     ac4:	000a      	movs	r2, r1
     ac6:	2300      	movs	r3, #0
     ac8:	2100      	movs	r1, #0
     aca:	4c0d      	ldr	r4, [pc, #52]	; (b00 <_sercom_get_async_baud_val+0x8c>)
     acc:	47a0      	blx	r4
     ace:	0002      	movs	r2, r0
     ad0:	000b      	movs	r3, r1
     ad2:	9200      	str	r2, [sp, #0]
     ad4:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     ad6:	0038      	movs	r0, r7
     ad8:	2100      	movs	r1, #0
     ada:	4c0a      	ldr	r4, [pc, #40]	; (b04 <_sercom_get_async_baud_val+0x90>)
     adc:	47a0      	blx	r4
     ade:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     ae0:	2380      	movs	r3, #128	; 0x80
     ae2:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     ae4:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     ae6:	4298      	cmp	r0, r3
     ae8:	d8cf      	bhi.n	a8a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     aea:	0f79      	lsrs	r1, r7, #29
     aec:	00f8      	lsls	r0, r7, #3
     aee:	9a00      	ldr	r2, [sp, #0]
     af0:	9b01      	ldr	r3, [sp, #4]
     af2:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     af4:	00ea      	lsls	r2, r5, #3
     af6:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     af8:	b2d2      	uxtb	r2, r2
     afa:	0352      	lsls	r2, r2, #13
     afc:	432a      	orrs	r2, r5
     afe:	e7db      	b.n	ab8 <_sercom_get_async_baud_val+0x44>
     b00:	000020e1 	.word	0x000020e1
     b04:	00000991 	.word	0x00000991

00000b08 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     b08:	b510      	push	{r4, lr}
     b0a:	b082      	sub	sp, #8
     b0c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     b0e:	4b0e      	ldr	r3, [pc, #56]	; (b48 <sercom_set_gclk_generator+0x40>)
     b10:	781b      	ldrb	r3, [r3, #0]
     b12:	2b00      	cmp	r3, #0
     b14:	d007      	beq.n	b26 <sercom_set_gclk_generator+0x1e>
     b16:	2900      	cmp	r1, #0
     b18:	d105      	bne.n	b26 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     b1a:	4b0b      	ldr	r3, [pc, #44]	; (b48 <sercom_set_gclk_generator+0x40>)
     b1c:	785b      	ldrb	r3, [r3, #1]
     b1e:	4283      	cmp	r3, r0
     b20:	d010      	beq.n	b44 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     b22:	201d      	movs	r0, #29
     b24:	e00c      	b.n	b40 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     b26:	a901      	add	r1, sp, #4
     b28:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     b2a:	200c      	movs	r0, #12
     b2c:	4b07      	ldr	r3, [pc, #28]	; (b4c <sercom_set_gclk_generator+0x44>)
     b2e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     b30:	200c      	movs	r0, #12
     b32:	4b07      	ldr	r3, [pc, #28]	; (b50 <sercom_set_gclk_generator+0x48>)
     b34:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     b36:	4b04      	ldr	r3, [pc, #16]	; (b48 <sercom_set_gclk_generator+0x40>)
     b38:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     b3a:	2201      	movs	r2, #1
     b3c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     b3e:	2000      	movs	r0, #0
}
     b40:	b002      	add	sp, #8
     b42:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     b44:	2000      	movs	r0, #0
     b46:	e7fb      	b.n	b40 <sercom_set_gclk_generator+0x38>
     b48:	20000090 	.word	0x20000090
     b4c:	00001c8d 	.word	0x00001c8d
     b50:	00001c01 	.word	0x00001c01

00000b54 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     b54:	4b40      	ldr	r3, [pc, #256]	; (c58 <_sercom_get_default_pad+0x104>)
     b56:	4298      	cmp	r0, r3
     b58:	d031      	beq.n	bbe <_sercom_get_default_pad+0x6a>
     b5a:	d90a      	bls.n	b72 <_sercom_get_default_pad+0x1e>
     b5c:	4b3f      	ldr	r3, [pc, #252]	; (c5c <_sercom_get_default_pad+0x108>)
     b5e:	4298      	cmp	r0, r3
     b60:	d04d      	beq.n	bfe <_sercom_get_default_pad+0xaa>
     b62:	4b3f      	ldr	r3, [pc, #252]	; (c60 <_sercom_get_default_pad+0x10c>)
     b64:	4298      	cmp	r0, r3
     b66:	d05a      	beq.n	c1e <_sercom_get_default_pad+0xca>
     b68:	4b3e      	ldr	r3, [pc, #248]	; (c64 <_sercom_get_default_pad+0x110>)
     b6a:	4298      	cmp	r0, r3
     b6c:	d037      	beq.n	bde <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     b6e:	2000      	movs	r0, #0
}
     b70:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     b72:	4b3d      	ldr	r3, [pc, #244]	; (c68 <_sercom_get_default_pad+0x114>)
     b74:	4298      	cmp	r0, r3
     b76:	d00c      	beq.n	b92 <_sercom_get_default_pad+0x3e>
     b78:	4b3c      	ldr	r3, [pc, #240]	; (c6c <_sercom_get_default_pad+0x118>)
     b7a:	4298      	cmp	r0, r3
     b7c:	d1f7      	bne.n	b6e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b7e:	2901      	cmp	r1, #1
     b80:	d017      	beq.n	bb2 <_sercom_get_default_pad+0x5e>
     b82:	2900      	cmp	r1, #0
     b84:	d05d      	beq.n	c42 <_sercom_get_default_pad+0xee>
     b86:	2902      	cmp	r1, #2
     b88:	d015      	beq.n	bb6 <_sercom_get_default_pad+0x62>
     b8a:	2903      	cmp	r1, #3
     b8c:	d015      	beq.n	bba <_sercom_get_default_pad+0x66>
	return 0;
     b8e:	2000      	movs	r0, #0
     b90:	e7ee      	b.n	b70 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b92:	2901      	cmp	r1, #1
     b94:	d007      	beq.n	ba6 <_sercom_get_default_pad+0x52>
     b96:	2900      	cmp	r1, #0
     b98:	d051      	beq.n	c3e <_sercom_get_default_pad+0xea>
     b9a:	2902      	cmp	r1, #2
     b9c:	d005      	beq.n	baa <_sercom_get_default_pad+0x56>
     b9e:	2903      	cmp	r1, #3
     ba0:	d005      	beq.n	bae <_sercom_get_default_pad+0x5a>
	return 0;
     ba2:	2000      	movs	r0, #0
     ba4:	e7e4      	b.n	b70 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ba6:	4832      	ldr	r0, [pc, #200]	; (c70 <_sercom_get_default_pad+0x11c>)
     ba8:	e7e2      	b.n	b70 <_sercom_get_default_pad+0x1c>
     baa:	4832      	ldr	r0, [pc, #200]	; (c74 <_sercom_get_default_pad+0x120>)
     bac:	e7e0      	b.n	b70 <_sercom_get_default_pad+0x1c>
     bae:	4832      	ldr	r0, [pc, #200]	; (c78 <_sercom_get_default_pad+0x124>)
     bb0:	e7de      	b.n	b70 <_sercom_get_default_pad+0x1c>
     bb2:	4832      	ldr	r0, [pc, #200]	; (c7c <_sercom_get_default_pad+0x128>)
     bb4:	e7dc      	b.n	b70 <_sercom_get_default_pad+0x1c>
     bb6:	4832      	ldr	r0, [pc, #200]	; (c80 <_sercom_get_default_pad+0x12c>)
     bb8:	e7da      	b.n	b70 <_sercom_get_default_pad+0x1c>
     bba:	4832      	ldr	r0, [pc, #200]	; (c84 <_sercom_get_default_pad+0x130>)
     bbc:	e7d8      	b.n	b70 <_sercom_get_default_pad+0x1c>
     bbe:	2901      	cmp	r1, #1
     bc0:	d007      	beq.n	bd2 <_sercom_get_default_pad+0x7e>
     bc2:	2900      	cmp	r1, #0
     bc4:	d03f      	beq.n	c46 <_sercom_get_default_pad+0xf2>
     bc6:	2902      	cmp	r1, #2
     bc8:	d005      	beq.n	bd6 <_sercom_get_default_pad+0x82>
     bca:	2903      	cmp	r1, #3
     bcc:	d005      	beq.n	bda <_sercom_get_default_pad+0x86>
	return 0;
     bce:	2000      	movs	r0, #0
     bd0:	e7ce      	b.n	b70 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     bd2:	482d      	ldr	r0, [pc, #180]	; (c88 <_sercom_get_default_pad+0x134>)
     bd4:	e7cc      	b.n	b70 <_sercom_get_default_pad+0x1c>
     bd6:	482d      	ldr	r0, [pc, #180]	; (c8c <_sercom_get_default_pad+0x138>)
     bd8:	e7ca      	b.n	b70 <_sercom_get_default_pad+0x1c>
     bda:	482d      	ldr	r0, [pc, #180]	; (c90 <_sercom_get_default_pad+0x13c>)
     bdc:	e7c8      	b.n	b70 <_sercom_get_default_pad+0x1c>
     bde:	2901      	cmp	r1, #1
     be0:	d007      	beq.n	bf2 <_sercom_get_default_pad+0x9e>
     be2:	2900      	cmp	r1, #0
     be4:	d031      	beq.n	c4a <_sercom_get_default_pad+0xf6>
     be6:	2902      	cmp	r1, #2
     be8:	d005      	beq.n	bf6 <_sercom_get_default_pad+0xa2>
     bea:	2903      	cmp	r1, #3
     bec:	d005      	beq.n	bfa <_sercom_get_default_pad+0xa6>
	return 0;
     bee:	2000      	movs	r0, #0
     bf0:	e7be      	b.n	b70 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     bf2:	4828      	ldr	r0, [pc, #160]	; (c94 <_sercom_get_default_pad+0x140>)
     bf4:	e7bc      	b.n	b70 <_sercom_get_default_pad+0x1c>
     bf6:	4828      	ldr	r0, [pc, #160]	; (c98 <_sercom_get_default_pad+0x144>)
     bf8:	e7ba      	b.n	b70 <_sercom_get_default_pad+0x1c>
     bfa:	4828      	ldr	r0, [pc, #160]	; (c9c <_sercom_get_default_pad+0x148>)
     bfc:	e7b8      	b.n	b70 <_sercom_get_default_pad+0x1c>
     bfe:	2901      	cmp	r1, #1
     c00:	d007      	beq.n	c12 <_sercom_get_default_pad+0xbe>
     c02:	2900      	cmp	r1, #0
     c04:	d023      	beq.n	c4e <_sercom_get_default_pad+0xfa>
     c06:	2902      	cmp	r1, #2
     c08:	d005      	beq.n	c16 <_sercom_get_default_pad+0xc2>
     c0a:	2903      	cmp	r1, #3
     c0c:	d005      	beq.n	c1a <_sercom_get_default_pad+0xc6>
	return 0;
     c0e:	2000      	movs	r0, #0
     c10:	e7ae      	b.n	b70 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c12:	4823      	ldr	r0, [pc, #140]	; (ca0 <_sercom_get_default_pad+0x14c>)
     c14:	e7ac      	b.n	b70 <_sercom_get_default_pad+0x1c>
     c16:	4823      	ldr	r0, [pc, #140]	; (ca4 <_sercom_get_default_pad+0x150>)
     c18:	e7aa      	b.n	b70 <_sercom_get_default_pad+0x1c>
     c1a:	4823      	ldr	r0, [pc, #140]	; (ca8 <_sercom_get_default_pad+0x154>)
     c1c:	e7a8      	b.n	b70 <_sercom_get_default_pad+0x1c>
     c1e:	2901      	cmp	r1, #1
     c20:	d007      	beq.n	c32 <_sercom_get_default_pad+0xde>
     c22:	2900      	cmp	r1, #0
     c24:	d015      	beq.n	c52 <_sercom_get_default_pad+0xfe>
     c26:	2902      	cmp	r1, #2
     c28:	d005      	beq.n	c36 <_sercom_get_default_pad+0xe2>
     c2a:	2903      	cmp	r1, #3
     c2c:	d005      	beq.n	c3a <_sercom_get_default_pad+0xe6>
	return 0;
     c2e:	2000      	movs	r0, #0
     c30:	e79e      	b.n	b70 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c32:	481e      	ldr	r0, [pc, #120]	; (cac <_sercom_get_default_pad+0x158>)
     c34:	e79c      	b.n	b70 <_sercom_get_default_pad+0x1c>
     c36:	481e      	ldr	r0, [pc, #120]	; (cb0 <_sercom_get_default_pad+0x15c>)
     c38:	e79a      	b.n	b70 <_sercom_get_default_pad+0x1c>
     c3a:	481e      	ldr	r0, [pc, #120]	; (cb4 <_sercom_get_default_pad+0x160>)
     c3c:	e798      	b.n	b70 <_sercom_get_default_pad+0x1c>
     c3e:	481e      	ldr	r0, [pc, #120]	; (cb8 <_sercom_get_default_pad+0x164>)
     c40:	e796      	b.n	b70 <_sercom_get_default_pad+0x1c>
     c42:	2003      	movs	r0, #3
     c44:	e794      	b.n	b70 <_sercom_get_default_pad+0x1c>
     c46:	481d      	ldr	r0, [pc, #116]	; (cbc <_sercom_get_default_pad+0x168>)
     c48:	e792      	b.n	b70 <_sercom_get_default_pad+0x1c>
     c4a:	481d      	ldr	r0, [pc, #116]	; (cc0 <_sercom_get_default_pad+0x16c>)
     c4c:	e790      	b.n	b70 <_sercom_get_default_pad+0x1c>
     c4e:	481d      	ldr	r0, [pc, #116]	; (cc4 <_sercom_get_default_pad+0x170>)
     c50:	e78e      	b.n	b70 <_sercom_get_default_pad+0x1c>
     c52:	481d      	ldr	r0, [pc, #116]	; (cc8 <_sercom_get_default_pad+0x174>)
     c54:	e78c      	b.n	b70 <_sercom_get_default_pad+0x1c>
     c56:	46c0      	nop			; (mov r8, r8)
     c58:	42001000 	.word	0x42001000
     c5c:	42001800 	.word	0x42001800
     c60:	42001c00 	.word	0x42001c00
     c64:	42001400 	.word	0x42001400
     c68:	42000800 	.word	0x42000800
     c6c:	42000c00 	.word	0x42000c00
     c70:	00050003 	.word	0x00050003
     c74:	00060003 	.word	0x00060003
     c78:	00070003 	.word	0x00070003
     c7c:	00010003 	.word	0x00010003
     c80:	001e0003 	.word	0x001e0003
     c84:	001f0003 	.word	0x001f0003
     c88:	00090003 	.word	0x00090003
     c8c:	000a0003 	.word	0x000a0003
     c90:	000b0003 	.word	0x000b0003
     c94:	00110003 	.word	0x00110003
     c98:	00120003 	.word	0x00120003
     c9c:	00130003 	.word	0x00130003
     ca0:	000d0003 	.word	0x000d0003
     ca4:	000e0003 	.word	0x000e0003
     ca8:	000f0003 	.word	0x000f0003
     cac:	00170003 	.word	0x00170003
     cb0:	00180003 	.word	0x00180003
     cb4:	00190003 	.word	0x00190003
     cb8:	00040003 	.word	0x00040003
     cbc:	00080003 	.word	0x00080003
     cc0:	00100003 	.word	0x00100003
     cc4:	000c0003 	.word	0x000c0003
     cc8:	00160003 	.word	0x00160003

00000ccc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     ccc:	b530      	push	{r4, r5, lr}
     cce:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     cd0:	4b0b      	ldr	r3, [pc, #44]	; (d00 <_sercom_get_sercom_inst_index+0x34>)
     cd2:	466a      	mov	r2, sp
     cd4:	cb32      	ldmia	r3!, {r1, r4, r5}
     cd6:	c232      	stmia	r2!, {r1, r4, r5}
     cd8:	cb32      	ldmia	r3!, {r1, r4, r5}
     cda:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     cdc:	9b00      	ldr	r3, [sp, #0]
     cde:	4283      	cmp	r3, r0
     ce0:	d00b      	beq.n	cfa <_sercom_get_sercom_inst_index+0x2e>
     ce2:	2301      	movs	r3, #1
     ce4:	009a      	lsls	r2, r3, #2
     ce6:	4669      	mov	r1, sp
     ce8:	5852      	ldr	r2, [r2, r1]
     cea:	4282      	cmp	r2, r0
     cec:	d006      	beq.n	cfc <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     cee:	3301      	adds	r3, #1
     cf0:	2b06      	cmp	r3, #6
     cf2:	d1f7      	bne.n	ce4 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     cf4:	2000      	movs	r0, #0
}
     cf6:	b007      	add	sp, #28
     cf8:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     cfa:	2300      	movs	r3, #0
			return i;
     cfc:	b2d8      	uxtb	r0, r3
     cfe:	e7fa      	b.n	cf6 <_sercom_get_sercom_inst_index+0x2a>
     d00:	000029cc 	.word	0x000029cc

00000d04 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     d04:	b5f0      	push	{r4, r5, r6, r7, lr}
     d06:	46de      	mov	lr, fp
     d08:	4657      	mov	r7, sl
     d0a:	464e      	mov	r6, r9
     d0c:	4645      	mov	r5, r8
     d0e:	b5e0      	push	{r5, r6, r7, lr}
     d10:	b08d      	sub	sp, #52	; 0x34
     d12:	0005      	movs	r5, r0
     d14:	000c      	movs	r4, r1
     d16:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     d18:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     d1a:	0008      	movs	r0, r1
     d1c:	4b80      	ldr	r3, [pc, #512]	; (f20 <usart_init+0x21c>)
     d1e:	4798      	blx	r3
     d20:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     d22:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     d24:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     d26:	07db      	lsls	r3, r3, #31
     d28:	d506      	bpl.n	d38 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     d2a:	b00d      	add	sp, #52	; 0x34
     d2c:	bc3c      	pop	{r2, r3, r4, r5}
     d2e:	4690      	mov	r8, r2
     d30:	4699      	mov	r9, r3
     d32:	46a2      	mov	sl, r4
     d34:	46ab      	mov	fp, r5
     d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     d38:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     d3a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     d3c:	079b      	lsls	r3, r3, #30
     d3e:	d4f4      	bmi.n	d2a <usart_init+0x26>
     d40:	4978      	ldr	r1, [pc, #480]	; (f24 <usart_init+0x220>)
     d42:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     d44:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     d46:	2301      	movs	r3, #1
     d48:	40bb      	lsls	r3, r7
     d4a:	4303      	orrs	r3, r0
     d4c:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     d4e:	a90b      	add	r1, sp, #44	; 0x2c
     d50:	7f73      	ldrb	r3, [r6, #29]
     d52:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     d54:	320d      	adds	r2, #13
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     d56:	b2d7      	uxtb	r7, r2
     d58:	0038      	movs	r0, r7
     d5a:	4b73      	ldr	r3, [pc, #460]	; (f28 <usart_init+0x224>)
     d5c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     d5e:	0038      	movs	r0, r7
     d60:	4b72      	ldr	r3, [pc, #456]	; (f2c <usart_init+0x228>)
     d62:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     d64:	7f70      	ldrb	r0, [r6, #29]
     d66:	2100      	movs	r1, #0
     d68:	4b71      	ldr	r3, [pc, #452]	; (f30 <usart_init+0x22c>)
     d6a:	4798      	blx	r3
	module->character_size = config->character_size;
     d6c:	7af3      	ldrb	r3, [r6, #11]
     d6e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     d70:	7d33      	ldrb	r3, [r6, #20]
     d72:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     d74:	7d73      	ldrb	r3, [r6, #21]
     d76:	71eb      	strb	r3, [r5, #7]
	SercomUsart *const usart_hw = &(module->hw->USART);
     d78:	682b      	ldr	r3, [r5, #0]
     d7a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     d7c:	0018      	movs	r0, r3
     d7e:	4b68      	ldr	r3, [pc, #416]	; (f20 <usart_init+0x21c>)
     d80:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     d82:	300d      	adds	r0, #13
	uint16_t baud  = 0;
     d84:	2200      	movs	r2, #0
     d86:	230e      	movs	r3, #14
     d88:	a902      	add	r1, sp, #8
     d8a:	468c      	mov	ip, r1
     d8c:	4463      	add	r3, ip
     d8e:	801a      	strh	r2, [r3, #0]
	ctrla = (uint32_t)config->data_order |
     d90:	6833      	ldr	r3, [r6, #0]
     d92:	9303      	str	r3, [sp, #12]
		(uint32_t)config->mux_setting |
     d94:	68f3      	ldr	r3, [r6, #12]
     d96:	469a      	mov	sl, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     d98:	7db3      	ldrb	r3, [r6, #22]
     d9a:	469b      	mov	fp, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     d9c:	6873      	ldr	r3, [r6, #4]
     d9e:	4699      	mov	r9, r3
	switch (transfer_mode)
     da0:	2b00      	cmp	r3, #0
     da2:	d014      	beq.n	dce <usart_init+0xca>
     da4:	2380      	movs	r3, #128	; 0x80
     da6:	055b      	lsls	r3, r3, #21
     da8:	4599      	cmp	r9, r3
     daa:	d130      	bne.n	e0e <usart_init+0x10a>
			if (!config->use_external_clock) {
     dac:	7df3      	ldrb	r3, [r6, #23]
     dae:	2b00      	cmp	r3, #0
     db0:	d131      	bne.n	e16 <usart_init+0x112>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     db2:	6933      	ldr	r3, [r6, #16]
     db4:	001f      	movs	r7, r3
     db6:	b2c0      	uxtb	r0, r0
     db8:	4b5e      	ldr	r3, [pc, #376]	; (f34 <usart_init+0x230>)
     dba:	4798      	blx	r3
     dbc:	0001      	movs	r1, r0
     dbe:	220e      	movs	r2, #14
     dc0:	ab02      	add	r3, sp, #8
     dc2:	469c      	mov	ip, r3
     dc4:	4462      	add	r2, ip
     dc6:	0038      	movs	r0, r7
     dc8:	4b5b      	ldr	r3, [pc, #364]	; (f38 <usart_init+0x234>)
     dca:	4798      	blx	r3
     dcc:	e020      	b.n	e10 <usart_init+0x10c>
			if (config->use_external_clock) {
     dce:	7df3      	ldrb	r3, [r6, #23]
     dd0:	2b00      	cmp	r3, #0
     dd2:	d00b      	beq.n	dec <usart_init+0xe8>
				status_code =
     dd4:	2310      	movs	r3, #16
     dd6:	9300      	str	r3, [sp, #0]
     dd8:	2300      	movs	r3, #0
     dda:	220e      	movs	r2, #14
     ddc:	a902      	add	r1, sp, #8
     dde:	468c      	mov	ip, r1
     de0:	4462      	add	r2, ip
     de2:	69b1      	ldr	r1, [r6, #24]
     de4:	6930      	ldr	r0, [r6, #16]
     de6:	4f55      	ldr	r7, [pc, #340]	; (f3c <usart_init+0x238>)
     de8:	47b8      	blx	r7
     dea:	e011      	b.n	e10 <usart_init+0x10c>
						_sercom_get_async_baud_val(config->baudrate,
     dec:	6933      	ldr	r3, [r6, #16]
     dee:	001f      	movs	r7, r3
     df0:	b2c0      	uxtb	r0, r0
     df2:	4b50      	ldr	r3, [pc, #320]	; (f34 <usart_init+0x230>)
     df4:	4798      	blx	r3
     df6:	0001      	movs	r1, r0
				status_code =
     df8:	2310      	movs	r3, #16
     dfa:	9300      	str	r3, [sp, #0]
     dfc:	2300      	movs	r3, #0
     dfe:	220e      	movs	r2, #14
     e00:	a802      	add	r0, sp, #8
     e02:	4684      	mov	ip, r0
     e04:	4462      	add	r2, ip
     e06:	0038      	movs	r0, r7
     e08:	4f4c      	ldr	r7, [pc, #304]	; (f3c <usart_init+0x238>)
     e0a:	47b8      	blx	r7
     e0c:	e000      	b.n	e10 <usart_init+0x10c>
	enum status_code status_code = STATUS_OK;
     e0e:	2000      	movs	r0, #0
	if (status_code != STATUS_OK) {
     e10:	2800      	cmp	r0, #0
     e12:	d000      	beq.n	e16 <usart_init+0x112>
     e14:	e789      	b.n	d2a <usart_init+0x26>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     e16:	682a      	ldr	r2, [r5, #0]
     e18:	9f03      	ldr	r7, [sp, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     e1a:	8a13      	ldrh	r3, [r2, #16]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     e1c:	b21b      	sxth	r3, r3
     e1e:	2b00      	cmp	r3, #0
     e20:	dbfb      	blt.n	e1a <usart_init+0x116>
	usart_hw->BAUD.reg = baud;
     e22:	230e      	movs	r3, #14
     e24:	aa02      	add	r2, sp, #8
     e26:	4694      	mov	ip, r2
     e28:	4463      	add	r3, ip
     e2a:	881b      	ldrh	r3, [r3, #0]
     e2c:	4642      	mov	r2, r8
     e2e:	8153      	strh	r3, [r2, #10]
	ctrla |= transfer_mode;
     e30:	4653      	mov	r3, sl
     e32:	431f      	orrs	r7, r3
     e34:	464b      	mov	r3, r9
     e36:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     e38:	465b      	mov	r3, fp
     e3a:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     e3c:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     e3e:	7df3      	ldrb	r3, [r6, #23]
     e40:	2b00      	cmp	r3, #0
     e42:	d101      	bne.n	e48 <usart_init+0x144>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     e44:	3304      	adds	r3, #4
     e46:	431f      	orrs	r7, r3
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     e48:	7d31      	ldrb	r1, [r6, #20]
     e4a:	0449      	lsls	r1, r1, #17
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     e4c:	7d73      	ldrb	r3, [r6, #21]
     e4e:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     e50:	430b      	orrs	r3, r1
	ctrlb |= (uint32_t)config->character_size;
     e52:	7ab1      	ldrb	r1, [r6, #10]
     e54:	7af2      	ldrb	r2, [r6, #11]
     e56:	4311      	orrs	r1, r2
     e58:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     e5a:	8933      	ldrh	r3, [r6, #8]
     e5c:	2bff      	cmp	r3, #255	; 0xff
     e5e:	d003      	beq.n	e68 <usart_init+0x164>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     e60:	2280      	movs	r2, #128	; 0x80
     e62:	0452      	lsls	r2, r2, #17
     e64:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     e66:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     e68:	7f33      	ldrb	r3, [r6, #28]
     e6a:	2b00      	cmp	r3, #0
     e6c:	d103      	bne.n	e76 <usart_init+0x172>
     e6e:	4b34      	ldr	r3, [pc, #208]	; (f40 <usart_init+0x23c>)
     e70:	789b      	ldrb	r3, [r3, #2]
     e72:	079b      	lsls	r3, r3, #30
     e74:	d501      	bpl.n	e7a <usart_init+0x176>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     e76:	2380      	movs	r3, #128	; 0x80
     e78:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     e7a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     e7c:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
     e7e:	b21b      	sxth	r3, r3
     e80:	2b00      	cmp	r3, #0
     e82:	dbfb      	blt.n	e7c <usart_init+0x178>
	usart_hw->CTRLB.reg = ctrlb;
     e84:	4643      	mov	r3, r8
     e86:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     e88:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     e8a:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
     e8c:	b21b      	sxth	r3, r3
     e8e:	2b00      	cmp	r3, #0
     e90:	dbfb      	blt.n	e8a <usart_init+0x186>
	usart_hw->CTRLA.reg = ctrla;
     e92:	4643      	mov	r3, r8
     e94:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     e96:	ab0a      	add	r3, sp, #40	; 0x28
     e98:	2280      	movs	r2, #128	; 0x80
     e9a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     e9c:	2200      	movs	r2, #0
     e9e:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
     ea0:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     ea2:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     ea4:	6a33      	ldr	r3, [r6, #32]
     ea6:	9306      	str	r3, [sp, #24]
     ea8:	6a73      	ldr	r3, [r6, #36]	; 0x24
     eaa:	9307      	str	r3, [sp, #28]
     eac:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     eae:	9308      	str	r3, [sp, #32]
     eb0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     eb2:	9303      	str	r3, [sp, #12]
     eb4:	9309      	str	r3, [sp, #36]	; 0x24
     eb6:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     eb8:	ae06      	add	r6, sp, #24
     eba:	e006      	b.n	eca <usart_init+0x1c6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     ebc:	0020      	movs	r0, r4
     ebe:	4b21      	ldr	r3, [pc, #132]	; (f44 <usart_init+0x240>)
     ec0:	4798      	blx	r3
     ec2:	e007      	b.n	ed4 <usart_init+0x1d0>
     ec4:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     ec6:	2f04      	cmp	r7, #4
     ec8:	d00d      	beq.n	ee6 <usart_init+0x1e2>
     eca:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     ecc:	00bb      	lsls	r3, r7, #2
     ece:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     ed0:	2800      	cmp	r0, #0
     ed2:	d0f3      	beq.n	ebc <usart_init+0x1b8>
		if (current_pinmux != PINMUX_UNUSED) {
     ed4:	1c43      	adds	r3, r0, #1
     ed6:	d0f5      	beq.n	ec4 <usart_init+0x1c0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     ed8:	a90a      	add	r1, sp, #40	; 0x28
     eda:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     edc:	0c00      	lsrs	r0, r0, #16
     ede:	b2c0      	uxtb	r0, r0
     ee0:	4b19      	ldr	r3, [pc, #100]	; (f48 <usart_init+0x244>)
     ee2:	4798      	blx	r3
     ee4:	e7ee      	b.n	ec4 <usart_init+0x1c0>
		module->callback[i]            = NULL;
     ee6:	2300      	movs	r3, #0
     ee8:	60ab      	str	r3, [r5, #8]
     eea:	60eb      	str	r3, [r5, #12]
     eec:	612b      	str	r3, [r5, #16]
	module->tx_buffer_ptr              = NULL;
     eee:	61ab      	str	r3, [r5, #24]
	module->rx_buffer_ptr              = NULL;
     ef0:	616b      	str	r3, [r5, #20]
	module->remaining_tx_buffer_length = 0x0000;
     ef2:	2200      	movs	r2, #0
     ef4:	83eb      	strh	r3, [r5, #30]
	module->remaining_rx_buffer_length = 0x0000;
     ef6:	83ab      	strh	r3, [r5, #28]
	module->callback_reg_mask          = 0x00;
     ef8:	3320      	adds	r3, #32
     efa:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     efc:	3301      	adds	r3, #1
     efe:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     f00:	3301      	adds	r3, #1
     f02:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     f04:	3301      	adds	r3, #1
     f06:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     f08:	6828      	ldr	r0, [r5, #0]
     f0a:	4b05      	ldr	r3, [pc, #20]	; (f20 <usart_init+0x21c>)
     f0c:	4798      	blx	r3
     f0e:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     f10:	490e      	ldr	r1, [pc, #56]	; (f4c <usart_init+0x248>)
     f12:	4b0f      	ldr	r3, [pc, #60]	; (f50 <usart_init+0x24c>)
     f14:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     f16:	00a4      	lsls	r4, r4, #2
     f18:	4b0e      	ldr	r3, [pc, #56]	; (f54 <usart_init+0x250>)
     f1a:	50e5      	str	r5, [r4, r3]
	return status_code;
     f1c:	2000      	movs	r0, #0
     f1e:	e704      	b.n	d2a <usart_init+0x26>
     f20:	00000ccd 	.word	0x00000ccd
     f24:	40000400 	.word	0x40000400
     f28:	00001c8d 	.word	0x00001c8d
     f2c:	00001c01 	.word	0x00001c01
     f30:	00000b09 	.word	0x00000b09
     f34:	00001ca9 	.word	0x00001ca9
     f38:	00000a4b 	.word	0x00000a4b
     f3c:	00000a75 	.word	0x00000a75
     f40:	41002000 	.word	0x41002000
     f44:	00000b55 	.word	0x00000b55
     f48:	00001d85 	.word	0x00001d85
     f4c:	000010c1 	.word	0x000010c1
     f50:	000011e9 	.word	0x000011e9
     f54:	2000011c 	.word	0x2000011c

00000f58 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     f58:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     f5a:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     f5c:	2a00      	cmp	r2, #0
     f5e:	d101      	bne.n	f64 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     f60:	0018      	movs	r0, r3
     f62:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     f64:	8bc2      	ldrh	r2, [r0, #30]
     f66:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     f68:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     f6a:	2a00      	cmp	r2, #0
     f6c:	d1f8      	bne.n	f60 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     f6e:	6802      	ldr	r2, [r0, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     f70:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
     f72:	b21b      	sxth	r3, r3
     f74:	2b00      	cmp	r3, #0
     f76:	dbfb      	blt.n	f70 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     f78:	8311      	strh	r1, [r2, #24]
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     f7a:	2102      	movs	r1, #2
     f7c:	7b93      	ldrb	r3, [r2, #14]
     f7e:	420b      	tst	r3, r1
     f80:	d0fc      	beq.n	f7c <usart_write_wait+0x24>
	return STATUS_OK;
     f82:	2300      	movs	r3, #0
     f84:	e7ec      	b.n	f60 <usart_write_wait+0x8>
	...

00000f88 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     f88:	b5f0      	push	{r4, r5, r6, r7, lr}
     f8a:	46ce      	mov	lr, r9
     f8c:	4647      	mov	r7, r8
     f8e:	b580      	push	{r7, lr}
     f90:	b083      	sub	sp, #12
     f92:	0005      	movs	r5, r0
     f94:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     f96:	2017      	movs	r0, #23
	if (length == 0) {
     f98:	2a00      	cmp	r2, #0
     f9a:	d104      	bne.n	fa6 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     f9c:	b003      	add	sp, #12
     f9e:	bc0c      	pop	{r2, r3}
     fa0:	4690      	mov	r8, r2
     fa2:	4699      	mov	r9, r3
     fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
     fa6:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
     fa8:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
     faa:	2b00      	cmp	r3, #0
     fac:	d0f6      	beq.n	f9c <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
     fae:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     fb0:	8a23      	ldrh	r3, [r4, #16]
	while (usart_is_syncing(module)) {
     fb2:	b21b      	sxth	r3, r3
     fb4:	2b00      	cmp	r3, #0
     fb6:	dbfb      	blt.n	fb0 <usart_write_buffer_wait+0x28>
	while (length--) {
     fb8:	3a01      	subs	r2, #1
     fba:	b293      	uxth	r3, r2
     fbc:	4699      	mov	r9, r3
     fbe:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     fc0:	2701      	movs	r7, #1
	while (length--) {
     fc2:	4b20      	ldr	r3, [pc, #128]	; (1044 <usart_write_buffer_wait+0xbc>)
     fc4:	4698      	mov	r8, r3
     fc6:	e011      	b.n	fec <usart_write_buffer_wait+0x64>
		uint16_t data_to_send = tx_data[tx_pos++];
     fc8:	1c73      	adds	r3, r6, #1
     fca:	b29b      	uxth	r3, r3
     fcc:	9a01      	ldr	r2, [sp, #4]
     fce:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     fd0:	796a      	ldrb	r2, [r5, #5]
     fd2:	2a01      	cmp	r2, #1
     fd4:	d017      	beq.n	1006 <usart_write_buffer_wait+0x7e>
		uint16_t data_to_send = tx_data[tx_pos++];
     fd6:	b289      	uxth	r1, r1
     fd8:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
     fda:	0028      	movs	r0, r5
     fdc:	4b1a      	ldr	r3, [pc, #104]	; (1048 <usart_write_buffer_wait+0xc0>)
     fde:	4798      	blx	r3
	while (length--) {
     fe0:	464b      	mov	r3, r9
     fe2:	3b01      	subs	r3, #1
     fe4:	b29b      	uxth	r3, r3
     fe6:	4699      	mov	r9, r3
     fe8:	4543      	cmp	r3, r8
     fea:	d013      	beq.n	1014 <usart_write_buffer_wait+0x8c>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     fec:	7ba3      	ldrb	r3, [r4, #14]
     fee:	423b      	tst	r3, r7
     ff0:	d1ea      	bne.n	fc8 <usart_write_buffer_wait+0x40>
     ff2:	4b14      	ldr	r3, [pc, #80]	; (1044 <usart_write_buffer_wait+0xbc>)
     ff4:	7ba2      	ldrb	r2, [r4, #14]
     ff6:	423a      	tst	r2, r7
     ff8:	d1e6      	bne.n	fc8 <usart_write_buffer_wait+0x40>
			} else if (i == USART_TIMEOUT) {
     ffa:	2b01      	cmp	r3, #1
     ffc:	d019      	beq.n	1032 <usart_write_buffer_wait+0xaa>
     ffe:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1000:	2b00      	cmp	r3, #0
    1002:	d1f7      	bne.n	ff4 <usart_write_buffer_wait+0x6c>
    1004:	e7e0      	b.n	fc8 <usart_write_buffer_wait+0x40>
			data_to_send |= (tx_data[tx_pos++] << 8);
    1006:	3602      	adds	r6, #2
    1008:	b2b6      	uxth	r6, r6
    100a:	9a01      	ldr	r2, [sp, #4]
    100c:	5cd3      	ldrb	r3, [r2, r3]
    100e:	021b      	lsls	r3, r3, #8
    1010:	4319      	orrs	r1, r3
    1012:	e7e2      	b.n	fda <usart_write_buffer_wait+0x52>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    1014:	7ba3      	ldrb	r3, [r4, #14]
    1016:	079b      	lsls	r3, r3, #30
    1018:	d40d      	bmi.n	1036 <usart_write_buffer_wait+0xae>
    101a:	4b0a      	ldr	r3, [pc, #40]	; (1044 <usart_write_buffer_wait+0xbc>)
    101c:	2102      	movs	r1, #2
    101e:	7ba2      	ldrb	r2, [r4, #14]
    1020:	420a      	tst	r2, r1
    1022:	d10a      	bne.n	103a <usart_write_buffer_wait+0xb2>
		} else if (i == USART_TIMEOUT) {
    1024:	2b01      	cmp	r3, #1
    1026:	d00a      	beq.n	103e <usart_write_buffer_wait+0xb6>
    1028:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    102a:	2b00      	cmp	r3, #0
    102c:	d1f7      	bne.n	101e <usart_write_buffer_wait+0x96>
	return STATUS_OK;
    102e:	2000      	movs	r0, #0
    1030:	e7b4      	b.n	f9c <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    1032:	2012      	movs	r0, #18
    1034:	e7b2      	b.n	f9c <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    1036:	2000      	movs	r0, #0
    1038:	e7b0      	b.n	f9c <usart_write_buffer_wait+0x14>
    103a:	2000      	movs	r0, #0
    103c:	e7ae      	b.n	f9c <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    103e:	2012      	movs	r0, #18
    1040:	e7ac      	b.n	f9c <usart_write_buffer_wait+0x14>
    1042:	46c0      	nop			; (mov r8, r8)
    1044:	0000ffff 	.word	0x0000ffff
    1048:	00000f59 	.word	0x00000f59

0000104c <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    104c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    104e:	0006      	movs	r6, r0
    1050:	000c      	movs	r4, r1
    1052:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1054:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    1056:	4b0a      	ldr	r3, [pc, #40]	; (1080 <_usart_write_buffer+0x34>)
    1058:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    105a:	8bf3      	ldrh	r3, [r6, #30]
    105c:	b29b      	uxth	r3, r3
    105e:	2b00      	cmp	r3, #0
    1060:	d003      	beq.n	106a <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    1062:	4b08      	ldr	r3, [pc, #32]	; (1084 <_usart_write_buffer+0x38>)
    1064:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    1066:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    1068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    106a:	83f5      	strh	r5, [r6, #30]
    106c:	4b05      	ldr	r3, [pc, #20]	; (1084 <_usart_write_buffer+0x38>)
    106e:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    1070:	61b4      	str	r4, [r6, #24]
	module->tx_status                  = STATUS_BUSY;
    1072:	2205      	movs	r2, #5
    1074:	2323      	movs	r3, #35	; 0x23
    1076:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    1078:	3b22      	subs	r3, #34	; 0x22
    107a:	737b      	strb	r3, [r7, #13]
	return STATUS_OK;
    107c:	2000      	movs	r0, #0
    107e:	e7f3      	b.n	1068 <_usart_write_buffer+0x1c>
    1080:	00001805 	.word	0x00001805
    1084:	00001845 	.word	0x00001845

00001088 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1088:	1c93      	adds	r3, r2, #2
    108a:	009b      	lsls	r3, r3, #2
    108c:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    108e:	2120      	movs	r1, #32
    1090:	2301      	movs	r3, #1
    1092:	4093      	lsls	r3, r2
    1094:	001a      	movs	r2, r3
    1096:	5c43      	ldrb	r3, [r0, r1]
    1098:	4313      	orrs	r3, r2
    109a:	5443      	strb	r3, [r0, r1]
}
    109c:	4770      	bx	lr
	...

000010a0 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    10a0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    10a2:	2317      	movs	r3, #23
	if (length == 0) {
    10a4:	2a00      	cmp	r2, #0
    10a6:	d101      	bne.n	10ac <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    10a8:	0018      	movs	r0, r3
    10aa:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    10ac:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    10ae:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    10b0:	2c00      	cmp	r4, #0
    10b2:	d0f9      	beq.n	10a8 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    10b4:	4b01      	ldr	r3, [pc, #4]	; (10bc <usart_write_buffer_job+0x1c>)
    10b6:	4798      	blx	r3
    10b8:	0003      	movs	r3, r0
    10ba:	e7f5      	b.n	10a8 <usart_write_buffer_job+0x8>
    10bc:	0000104d 	.word	0x0000104d

000010c0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    10c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    10c2:	0080      	lsls	r0, r0, #2
    10c4:	4b46      	ldr	r3, [pc, #280]	; (11e0 <_usart_interrupt_handler+0x120>)
    10c6:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    10c8:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    10ca:	8a23      	ldrh	r3, [r4, #16]
	while (usart_is_syncing(module)) {
    10cc:	b21b      	sxth	r3, r3
    10ce:	2b00      	cmp	r3, #0
    10d0:	dbfb      	blt.n	10ca <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    10d2:	7ba3      	ldrb	r3, [r4, #14]
	interrupt_status &= usart_hw->INTENSET.reg;
    10d4:	7b66      	ldrb	r6, [r4, #13]
    10d6:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    10d8:	2320      	movs	r3, #32
    10da:	5ceb      	ldrb	r3, [r5, r3]
    10dc:	2221      	movs	r2, #33	; 0x21
    10de:	5caf      	ldrb	r7, [r5, r2]
    10e0:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    10e2:	07f3      	lsls	r3, r6, #31
    10e4:	d522      	bpl.n	112c <_usart_interrupt_handler+0x6c>
		if (module->remaining_tx_buffer_length) {
    10e6:	8beb      	ldrh	r3, [r5, #30]
    10e8:	b29b      	uxth	r3, r3
    10ea:	2b00      	cmp	r3, #0
    10ec:	d01c      	beq.n	1128 <_usart_interrupt_handler+0x68>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    10ee:	69aa      	ldr	r2, [r5, #24]
    10f0:	7813      	ldrb	r3, [r2, #0]
    10f2:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    10f4:	1c51      	adds	r1, r2, #1
    10f6:	61a9      	str	r1, [r5, #24]

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    10f8:	7969      	ldrb	r1, [r5, #5]
    10fa:	2901      	cmp	r1, #1
    10fc:	d00e      	beq.n	111c <_usart_interrupt_handler+0x5c>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    10fe:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1100:	05db      	lsls	r3, r3, #23
    1102:	0ddb      	lsrs	r3, r3, #23
    1104:	8323      	strh	r3, [r4, #24]

			if (--(module->remaining_tx_buffer_length) == 0) {
    1106:	8beb      	ldrh	r3, [r5, #30]
    1108:	3b01      	subs	r3, #1
    110a:	b29b      	uxth	r3, r3
    110c:	83eb      	strh	r3, [r5, #30]
    110e:	2b00      	cmp	r3, #0
    1110:	d10c      	bne.n	112c <_usart_interrupt_handler+0x6c>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1112:	3301      	adds	r3, #1
    1114:	7323      	strb	r3, [r4, #12]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1116:	3301      	adds	r3, #1
    1118:	7363      	strb	r3, [r4, #13]
    111a:	e007      	b.n	112c <_usart_interrupt_handler+0x6c>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    111c:	7851      	ldrb	r1, [r2, #1]
    111e:	0209      	lsls	r1, r1, #8
    1120:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1122:	3202      	adds	r2, #2
    1124:	61aa      	str	r2, [r5, #24]
    1126:	e7eb      	b.n	1100 <_usart_interrupt_handler+0x40>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1128:	2301      	movs	r3, #1
    112a:	7323      	strb	r3, [r4, #12]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    112c:	07b3      	lsls	r3, r6, #30
    112e:	d506      	bpl.n	113e <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1130:	2302      	movs	r3, #2
    1132:	7323      	strb	r3, [r4, #12]
		module->tx_status = STATUS_OK;
    1134:	2200      	movs	r2, #0
    1136:	3321      	adds	r3, #33	; 0x21
    1138:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    113a:	07fb      	lsls	r3, r7, #31
    113c:	d416      	bmi.n	116c <_usart_interrupt_handler+0xac>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    113e:	0773      	lsls	r3, r6, #29
    1140:	d54d      	bpl.n	11de <_usart_interrupt_handler+0x11e>

		if (module->remaining_rx_buffer_length) {
    1142:	8bab      	ldrh	r3, [r5, #28]
    1144:	b29b      	uxth	r3, r3
    1146:	2b00      	cmp	r3, #0
    1148:	d047      	beq.n	11da <_usart_interrupt_handler+0x11a>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    114a:	8a23      	ldrh	r3, [r4, #16]
    114c:	b2db      	uxtb	r3, r3
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    114e:	075a      	lsls	r2, r3, #29
    1150:	d020      	beq.n	1194 <_usart_interrupt_handler+0xd4>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1152:	079a      	lsls	r2, r3, #30
    1154:	d50e      	bpl.n	1174 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1156:	221a      	movs	r2, #26
    1158:	2322      	movs	r3, #34	; 0x22
    115a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    115c:	3b20      	subs	r3, #32
    115e:	8223      	strh	r3, [r4, #16]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1160:	077b      	lsls	r3, r7, #29
    1162:	d53c      	bpl.n	11de <_usart_interrupt_handler+0x11e>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1164:	692b      	ldr	r3, [r5, #16]
    1166:	0028      	movs	r0, r5
    1168:	4798      	blx	r3
    116a:	e038      	b.n	11de <_usart_interrupt_handler+0x11e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    116c:	0028      	movs	r0, r5
    116e:	68ab      	ldr	r3, [r5, #8]
    1170:	4798      	blx	r3
    1172:	e7e4      	b.n	113e <_usart_interrupt_handler+0x7e>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1174:	075a      	lsls	r2, r3, #29
    1176:	d505      	bpl.n	1184 <_usart_interrupt_handler+0xc4>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1178:	221e      	movs	r2, #30
    117a:	2322      	movs	r3, #34	; 0x22
    117c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    117e:	3b1e      	subs	r3, #30
    1180:	8223      	strh	r3, [r4, #16]
    1182:	e7ed      	b.n	1160 <_usart_interrupt_handler+0xa0>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1184:	07db      	lsls	r3, r3, #31
    1186:	d5eb      	bpl.n	1160 <_usart_interrupt_handler+0xa0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1188:	2213      	movs	r2, #19
    118a:	2322      	movs	r3, #34	; 0x22
    118c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    118e:	3b21      	subs	r3, #33	; 0x21
    1190:	8223      	strh	r3, [r4, #16]
    1192:	e7e5      	b.n	1160 <_usart_interrupt_handler+0xa0>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1194:	8b23      	ldrh	r3, [r4, #24]
    1196:	05db      	lsls	r3, r3, #23
    1198:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    119a:	b2da      	uxtb	r2, r3
    119c:	6969      	ldr	r1, [r5, #20]
    119e:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    11a0:	696a      	ldr	r2, [r5, #20]
    11a2:	1c51      	adds	r1, r2, #1
    11a4:	6169      	str	r1, [r5, #20]

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    11a6:	7969      	ldrb	r1, [r5, #5]
    11a8:	2901      	cmp	r1, #1
    11aa:	d010      	beq.n	11ce <_usart_interrupt_handler+0x10e>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    11ac:	8bab      	ldrh	r3, [r5, #28]
    11ae:	3b01      	subs	r3, #1
    11b0:	b29b      	uxth	r3, r3
    11b2:	83ab      	strh	r3, [r5, #28]
    11b4:	2b00      	cmp	r3, #0
    11b6:	d112      	bne.n	11de <_usart_interrupt_handler+0x11e>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    11b8:	3304      	adds	r3, #4
    11ba:	7323      	strb	r3, [r4, #12]
					module->rx_status = STATUS_OK;
    11bc:	2200      	movs	r2, #0
    11be:	331e      	adds	r3, #30
    11c0:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    11c2:	07bb      	lsls	r3, r7, #30
    11c4:	d50b      	bpl.n	11de <_usart_interrupt_handler+0x11e>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    11c6:	68eb      	ldr	r3, [r5, #12]
    11c8:	0028      	movs	r0, r5
    11ca:	4798      	blx	r3
    11cc:	e007      	b.n	11de <_usart_interrupt_handler+0x11e>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    11ce:	0a1b      	lsrs	r3, r3, #8
    11d0:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    11d2:	696b      	ldr	r3, [r5, #20]
    11d4:	3301      	adds	r3, #1
    11d6:	616b      	str	r3, [r5, #20]
    11d8:	e7e8      	b.n	11ac <_usart_interrupt_handler+0xec>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    11da:	2304      	movs	r3, #4
    11dc:	7323      	strb	r3, [r4, #12]
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    11de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11e0:	2000011c 	.word	0x2000011c

000011e4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    11e4:	4770      	bx	lr
	...

000011e8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    11e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    11ea:	4b0a      	ldr	r3, [pc, #40]	; (1214 <_sercom_set_handler+0x2c>)
    11ec:	781b      	ldrb	r3, [r3, #0]
    11ee:	2b00      	cmp	r3, #0
    11f0:	d10c      	bne.n	120c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    11f2:	4f09      	ldr	r7, [pc, #36]	; (1218 <_sercom_set_handler+0x30>)
    11f4:	4e09      	ldr	r6, [pc, #36]	; (121c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    11f6:	4d0a      	ldr	r5, [pc, #40]	; (1220 <_sercom_set_handler+0x38>)
    11f8:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    11fa:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    11fc:	195a      	adds	r2, r3, r5
    11fe:	6014      	str	r4, [r2, #0]
    1200:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1202:	2b18      	cmp	r3, #24
    1204:	d1f9      	bne.n	11fa <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1206:	2201      	movs	r2, #1
    1208:	4b02      	ldr	r3, [pc, #8]	; (1214 <_sercom_set_handler+0x2c>)
    120a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    120c:	0080      	lsls	r0, r0, #2
    120e:	4b02      	ldr	r3, [pc, #8]	; (1218 <_sercom_set_handler+0x30>)
    1210:	50c1      	str	r1, [r0, r3]
}
    1212:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1214:	20000092 	.word	0x20000092
    1218:	20000094 	.word	0x20000094
    121c:	000011e5 	.word	0x000011e5
    1220:	2000011c 	.word	0x2000011c

00001224 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1224:	b500      	push	{lr}
    1226:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1228:	2307      	movs	r3, #7
    122a:	466a      	mov	r2, sp
    122c:	7013      	strb	r3, [r2, #0]
    122e:	3301      	adds	r3, #1
    1230:	7053      	strb	r3, [r2, #1]
    1232:	3301      	adds	r3, #1
    1234:	7093      	strb	r3, [r2, #2]
    1236:	3301      	adds	r3, #1
    1238:	70d3      	strb	r3, [r2, #3]
    123a:	3301      	adds	r3, #1
    123c:	7113      	strb	r3, [r2, #4]
    123e:	3301      	adds	r3, #1
    1240:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1242:	4b03      	ldr	r3, [pc, #12]	; (1250 <_sercom_get_interrupt_vector+0x2c>)
    1244:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1246:	466b      	mov	r3, sp
    1248:	5618      	ldrsb	r0, [r3, r0]
}
    124a:	b003      	add	sp, #12
    124c:	bd00      	pop	{pc}
    124e:	46c0      	nop			; (mov r8, r8)
    1250:	00000ccd 	.word	0x00000ccd

00001254 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1254:	b510      	push	{r4, lr}
    1256:	4b02      	ldr	r3, [pc, #8]	; (1260 <SERCOM0_Handler+0xc>)
    1258:	681b      	ldr	r3, [r3, #0]
    125a:	2000      	movs	r0, #0
    125c:	4798      	blx	r3
    125e:	bd10      	pop	{r4, pc}
    1260:	20000094 	.word	0x20000094

00001264 <SERCOM1_Handler>:
    1264:	b510      	push	{r4, lr}
    1266:	4b02      	ldr	r3, [pc, #8]	; (1270 <SERCOM1_Handler+0xc>)
    1268:	685b      	ldr	r3, [r3, #4]
    126a:	2001      	movs	r0, #1
    126c:	4798      	blx	r3
    126e:	bd10      	pop	{r4, pc}
    1270:	20000094 	.word	0x20000094

00001274 <SERCOM2_Handler>:
    1274:	b510      	push	{r4, lr}
    1276:	4b02      	ldr	r3, [pc, #8]	; (1280 <SERCOM2_Handler+0xc>)
    1278:	689b      	ldr	r3, [r3, #8]
    127a:	2002      	movs	r0, #2
    127c:	4798      	blx	r3
    127e:	bd10      	pop	{r4, pc}
    1280:	20000094 	.word	0x20000094

00001284 <SERCOM3_Handler>:
    1284:	b510      	push	{r4, lr}
    1286:	4b02      	ldr	r3, [pc, #8]	; (1290 <SERCOM3_Handler+0xc>)
    1288:	68db      	ldr	r3, [r3, #12]
    128a:	2003      	movs	r0, #3
    128c:	4798      	blx	r3
    128e:	bd10      	pop	{r4, pc}
    1290:	20000094 	.word	0x20000094

00001294 <SERCOM4_Handler>:
    1294:	b510      	push	{r4, lr}
    1296:	4b02      	ldr	r3, [pc, #8]	; (12a0 <SERCOM4_Handler+0xc>)
    1298:	691b      	ldr	r3, [r3, #16]
    129a:	2004      	movs	r0, #4
    129c:	4798      	blx	r3
    129e:	bd10      	pop	{r4, pc}
    12a0:	20000094 	.word	0x20000094

000012a4 <SERCOM5_Handler>:
    12a4:	b510      	push	{r4, lr}
    12a6:	4b02      	ldr	r3, [pc, #8]	; (12b0 <SERCOM5_Handler+0xc>)
    12a8:	695b      	ldr	r3, [r3, #20]
    12aa:	2005      	movs	r0, #5
    12ac:	4798      	blx	r3
    12ae:	bd10      	pop	{r4, pc}
    12b0:	20000094 	.word	0x20000094

000012b4 <usart_write_callback>:
 * @return				- void
 *
 * @note				- Interrupt Callback
 **********************************************************************/
 void usart_write_callback( struct usart_module *const usart_module )
 {
    12b4:	b510      	push	{r4, lr}
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    12b6:	2280      	movs	r2, #128	; 0x80
    12b8:	01d2      	lsls	r2, r2, #7
    12ba:	4b04      	ldr	r3, [pc, #16]	; (12cc <usart_write_callback+0x18>)
    12bc:	61da      	str	r2, [r3, #28]
	 port_pin_toggle_output_level( LED_0_PIN );
	 usart_write_buffer_wait(&usart_instance, newLine, sizeof(newLine));
    12be:	2203      	movs	r2, #3
    12c0:	4903      	ldr	r1, [pc, #12]	; (12d0 <usart_write_callback+0x1c>)
    12c2:	4804      	ldr	r0, [pc, #16]	; (12d4 <usart_write_callback+0x20>)
    12c4:	4b04      	ldr	r3, [pc, #16]	; (12d8 <usart_write_callback+0x24>)
    12c6:	4798      	blx	r3
 }//usart_write_callback
    12c8:	bd10      	pop	{r4, pc}
    12ca:	46c0      	nop			; (mov r8, r8)
    12cc:	41004400 	.word	0x41004400
    12d0:	20000000 	.word	0x20000000
    12d4:	20000140 	.word	0x20000140
    12d8:	00000f89 	.word	0x00000f89

000012dc <usart_read_callback>:
 {
    12dc:	b510      	push	{r4, lr}
    12de:	b084      	sub	sp, #16
	 UINT8 echoString[] = "\r\nEcho: ";
    12e0:	a901      	add	r1, sp, #4
    12e2:	4b09      	ldr	r3, [pc, #36]	; (1308 <usart_read_callback+0x2c>)
    12e4:	000a      	movs	r2, r1
    12e6:	cb11      	ldmia	r3!, {r0, r4}
    12e8:	c211      	stmia	r2!, {r0, r4}
    12ea:	781b      	ldrb	r3, [r3, #0]
    12ec:	7013      	strb	r3, [r2, #0]
	 usart_write_buffer_wait(&usart_instance, echoString, sizeof(echoString));
    12ee:	4c07      	ldr	r4, [pc, #28]	; (130c <usart_read_callback+0x30>)
    12f0:	2209      	movs	r2, #9
    12f2:	0020      	movs	r0, r4
    12f4:	4b06      	ldr	r3, [pc, #24]	; (1310 <usart_read_callback+0x34>)
    12f6:	4798      	blx	r3
	 usart_write_buffer_job( &usart_instance,(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH );
    12f8:	2205      	movs	r2, #5
    12fa:	4906      	ldr	r1, [pc, #24]	; (1314 <usart_read_callback+0x38>)
    12fc:	0020      	movs	r0, r4
    12fe:	4b06      	ldr	r3, [pc, #24]	; (1318 <usart_read_callback+0x3c>)
    1300:	4798      	blx	r3
 }//usart_read_callback
    1302:	b004      	add	sp, #16
    1304:	bd10      	pop	{r4, pc}
    1306:	46c0      	nop			; (mov r8, r8)
    1308:	000029f4 	.word	0x000029f4
    130c:	20000140 	.word	0x20000140
    1310:	00000f89 	.word	0x00000f89
    1314:	20000170 	.word	0x20000170
    1318:	000010a1 	.word	0x000010a1

0000131c <i2c_write_complete_callback>:
 * @return				- void
 *
 * @note				- called from main
 **********************************************************************/ 
 void i2c_write_complete_callback(struct i2c_master_module *const module)
{
    131c:	b510      	push	{r4, lr}
	/* Initiate new packet read */
	i2c_master_read_packet_job(&i2c_master_instance,&read_packet);
    131e:	4902      	ldr	r1, [pc, #8]	; (1328 <i2c_write_complete_callback+0xc>)
    1320:	4802      	ldr	r0, [pc, #8]	; (132c <i2c_write_complete_callback+0x10>)
    1322:	4b03      	ldr	r3, [pc, #12]	; (1330 <i2c_write_complete_callback+0x14>)
    1324:	4798      	blx	r3
}
    1326:	bd10      	pop	{r4, pc}
    1328:	20000164 	.word	0x20000164
    132c:	20000178 	.word	0x20000178
    1330:	00000783 	.word	0x00000783

00001334 <configure_usart>:
 {
    1334:	b530      	push	{r4, r5, lr}
    1336:	b08d      	sub	sp, #52	; 0x34
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1338:	2380      	movs	r3, #128	; 0x80
    133a:	05db      	lsls	r3, r3, #23
    133c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    133e:	2300      	movs	r3, #0
    1340:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1342:	22ff      	movs	r2, #255	; 0xff
    1344:	4669      	mov	r1, sp
    1346:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1348:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    134a:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    134c:	2296      	movs	r2, #150	; 0x96
    134e:	0192      	lsls	r2, r2, #6
    1350:	9204      	str	r2, [sp, #16]
	config->receiver_enable  = true;
    1352:	2201      	movs	r2, #1
    1354:	750a      	strb	r2, [r1, #20]
	config->transmitter_enable = true;
    1356:	754a      	strb	r2, [r1, #21]
	config->clock_polarity_inverted = false;
    1358:	758b      	strb	r3, [r1, #22]
	config->use_external_clock = false;
    135a:	75cb      	strb	r3, [r1, #23]
	config->ext_clock_freq   = 0;
    135c:	9306      	str	r3, [sp, #24]
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    135e:	770b      	strb	r3, [r1, #28]
	config->generator_source = GCLK_GENERATOR_0;
    1360:	774b      	strb	r3, [r1, #29]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    1362:	9308      	str	r3, [sp, #32]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    1364:	9309      	str	r3, [sp, #36]	; 0x24
	 config_usart.mux_setting	= USART_RX_3_TX_2_XCK_3;
    1366:	23c4      	movs	r3, #196	; 0xc4
    1368:	039b      	lsls	r3, r3, #14
    136a:	9303      	str	r3, [sp, #12]
	 config_usart.pinmux_pad2	= PINMUX_PA24C_SERCOM3_PAD2;
    136c:	4b10      	ldr	r3, [pc, #64]	; (13b0 <configure_usart+0x7c>)
    136e:	930a      	str	r3, [sp, #40]	; 0x28
	 config_usart.pinmux_pad3	= PINMUX_PA25C_SERCOM3_PAD3;
    1370:	4b10      	ldr	r3, [pc, #64]	; (13b4 <configure_usart+0x80>)
    1372:	930b      	str	r3, [sp, #44]	; 0x2c
	 while ( usart_init( &usart_instance, SERCOM3, &config_usart ) != STATUS_OK ) { }
    1374:	4d10      	ldr	r5, [pc, #64]	; (13b8 <configure_usart+0x84>)
    1376:	4c11      	ldr	r4, [pc, #68]	; (13bc <configure_usart+0x88>)
    1378:	466a      	mov	r2, sp
    137a:	4911      	ldr	r1, [pc, #68]	; (13c0 <configure_usart+0x8c>)
    137c:	0028      	movs	r0, r5
    137e:	47a0      	blx	r4
    1380:	2800      	cmp	r0, #0
    1382:	d1f9      	bne.n	1378 <configure_usart+0x44>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1384:	4d0c      	ldr	r5, [pc, #48]	; (13b8 <configure_usart+0x84>)
    1386:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1388:	0020      	movs	r0, r4
    138a:	4b0e      	ldr	r3, [pc, #56]	; (13c4 <configure_usart+0x90>)
    138c:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    138e:	231f      	movs	r3, #31
    1390:	4018      	ands	r0, r3
    1392:	3b1e      	subs	r3, #30
    1394:	4083      	lsls	r3, r0
    1396:	4a0c      	ldr	r2, [pc, #48]	; (13c8 <configure_usart+0x94>)
    1398:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    139a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    139c:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
    139e:	b21b      	sxth	r3, r3
    13a0:	2b00      	cmp	r3, #0
    13a2:	dbfb      	blt.n	139c <configure_usart+0x68>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    13a4:	6823      	ldr	r3, [r4, #0]
    13a6:	2202      	movs	r2, #2
    13a8:	4313      	orrs	r3, r2
    13aa:	6023      	str	r3, [r4, #0]
 }//configure_usart
    13ac:	b00d      	add	sp, #52	; 0x34
    13ae:	bd30      	pop	{r4, r5, pc}
    13b0:	00180002 	.word	0x00180002
    13b4:	00190002 	.word	0x00190002
    13b8:	20000140 	.word	0x20000140
    13bc:	00000d05 	.word	0x00000d05
    13c0:	42001400 	.word	0x42001400
    13c4:	00001225 	.word	0x00001225
    13c8:	e000e100 	.word	0xe000e100

000013cc <configure_usart_callbacks>:
 {
    13cc:	b570      	push	{r4, r5, r6, lr}
	 usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
    13ce:	4c08      	ldr	r4, [pc, #32]	; (13f0 <configure_usart_callbacks+0x24>)
    13d0:	2200      	movs	r2, #0
    13d2:	4908      	ldr	r1, [pc, #32]	; (13f4 <configure_usart_callbacks+0x28>)
    13d4:	0020      	movs	r0, r4
    13d6:	4d08      	ldr	r5, [pc, #32]	; (13f8 <configure_usart_callbacks+0x2c>)
    13d8:	47a8      	blx	r5
	 usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    13da:	2201      	movs	r2, #1
    13dc:	4907      	ldr	r1, [pc, #28]	; (13fc <configure_usart_callbacks+0x30>)
    13de:	0020      	movs	r0, r4
    13e0:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    13e2:	2221      	movs	r2, #33	; 0x21
    13e4:	5ca3      	ldrb	r3, [r4, r2]
    13e6:	2103      	movs	r1, #3
    13e8:	430b      	orrs	r3, r1
    13ea:	54a3      	strb	r3, [r4, r2]
 }//configure_usart_callbacks
    13ec:	bd70      	pop	{r4, r5, r6, pc}
    13ee:	46c0      	nop			; (mov r8, r8)
    13f0:	20000140 	.word	0x20000140
    13f4:	000012b5 	.word	0x000012b5
    13f8:	00001089 	.word	0x00001089
    13fc:	000012dd 	.word	0x000012dd

00001400 <usart_Hello>:
 {
    1400:	b530      	push	{r4, r5, lr}
    1402:	b085      	sub	sp, #20
 	uint8_t string[] = "Hello World!\r\n";
    1404:	4669      	mov	r1, sp
    1406:	4b07      	ldr	r3, [pc, #28]	; (1424 <usart_Hello+0x24>)
    1408:	466a      	mov	r2, sp
    140a:	cb31      	ldmia	r3!, {r0, r4, r5}
    140c:	c231      	stmia	r2!, {r0, r4, r5}
    140e:	8818      	ldrh	r0, [r3, #0]
    1410:	8010      	strh	r0, [r2, #0]
    1412:	789b      	ldrb	r3, [r3, #2]
    1414:	7093      	strb	r3, [r2, #2]
 	usart_write_buffer_wait(&usart_instance, string, len);
    1416:	220f      	movs	r2, #15
    1418:	4803      	ldr	r0, [pc, #12]	; (1428 <usart_Hello+0x28>)
    141a:	4b04      	ldr	r3, [pc, #16]	; (142c <usart_Hello+0x2c>)
    141c:	4798      	blx	r3
 }//usart_Hello
    141e:	b005      	add	sp, #20
    1420:	bd30      	pop	{r4, r5, pc}
    1422:	46c0      	nop			; (mov r8, r8)
    1424:	000029e4 	.word	0x000029e4
    1428:	20000140 	.word	0x20000140
    142c:	00000f89 	.word	0x00000f89

00001430 <configure_i2c_master>:
 {
    1430:	b570      	push	{r4, r5, r6, lr}
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    1432:	4a1d      	ldr	r2, [pc, #116]	; (14a8 <configure_i2c_master+0x78>)
    1434:	2364      	movs	r3, #100	; 0x64
    1436:	6013      	str	r3, [r2, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
#endif
	config->generator_source = GCLK_GENERATOR_0;
    1438:	2300      	movs	r3, #0
    143a:	7113      	strb	r3, [r2, #4]
	config->run_in_standby   = false;
    143c:	7413      	strb	r3, [r2, #16]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    143e:	2180      	movs	r1, #128	; 0x80
    1440:	0389      	lsls	r1, r1, #14
    1442:	6091      	str	r1, [r2, #8]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    1444:	2101      	movs	r1, #1
    1446:	4249      	negs	r1, r1
    1448:	8191      	strh	r1, [r2, #12]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    144a:	7713      	strb	r3, [r2, #28]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    144c:	6213      	str	r3, [r2, #32]
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
	config->master_scl_low_extend_timeout  = false;
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    144e:	33d7      	adds	r3, #215	; 0xd7
    1450:	8493      	strh	r3, [r2, #36]	; 0x24
	 config_i2c_master.buffer_timeout = 10000;
    1452:	4b16      	ldr	r3, [pc, #88]	; (14ac <configure_i2c_master+0x7c>)
    1454:	81d3      	strh	r3, [r2, #14]
	 config_i2c_master.pinmux_pad0    = PINMUX_PA08D_SERCOM2_PAD0;
    1456:	4b16      	ldr	r3, [pc, #88]	; (14b0 <configure_i2c_master+0x80>)
    1458:	6153      	str	r3, [r2, #20]
	 config_i2c_master.pinmux_pad1    = PINMUX_PA09D_SERCOM2_PAD1;
    145a:	4b16      	ldr	r3, [pc, #88]	; (14b4 <configure_i2c_master+0x84>)
    145c:	6193      	str	r3, [r2, #24]
	 i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);	 	
    145e:	4c16      	ldr	r4, [pc, #88]	; (14b8 <configure_i2c_master+0x88>)
    1460:	4916      	ldr	r1, [pc, #88]	; (14bc <configure_i2c_master+0x8c>)
    1462:	0020      	movs	r0, r4
    1464:	4b16      	ldr	r3, [pc, #88]	; (14c0 <configure_i2c_master+0x90>)
    1466:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1468:	6824      	ldr	r4, [r4, #0]
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
    146a:	8a23      	ldrh	r3, [r4, #16]
	while (i2c_master_is_syncing(module)) {
    146c:	b21b      	sxth	r3, r3
    146e:	2b00      	cmp	r3, #0
    1470:	dbfb      	blt.n	146a <configure_i2c_master+0x3a>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1472:	6823      	ldr	r3, [r4, #0]
    1474:	2202      	movs	r2, #2
    1476:	4313      	orrs	r3, r2
    1478:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    147a:	4d0f      	ldr	r5, [pc, #60]	; (14b8 <configure_i2c_master+0x88>)
    147c:	6828      	ldr	r0, [r5, #0]
    147e:	4b11      	ldr	r3, [pc, #68]	; (14c4 <configure_i2c_master+0x94>)
    1480:	4798      	blx	r3
    1482:	231f      	movs	r3, #31
    1484:	4018      	ands	r0, r3
    1486:	3b1e      	subs	r3, #30
    1488:	4083      	lsls	r3, r0
    148a:	4a0f      	ldr	r2, [pc, #60]	; (14c8 <configure_i2c_master+0x98>)
    148c:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    148e:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    1490:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1492:	2110      	movs	r1, #16
    1494:	8a22      	ldrh	r2, [r4, #16]
    1496:	420a      	tst	r2, r1
    1498:	d104      	bne.n	14a4 <configure_i2c_master+0x74>
		timeout_counter++;
    149a:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    149c:	4283      	cmp	r3, r0
    149e:	d3f9      	bcc.n	1494 <configure_i2c_master+0x64>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    14a0:	2310      	movs	r3, #16
    14a2:	8223      	strh	r3, [r4, #16]
 }// configure_i2c_master
    14a4:	bd70      	pop	{r4, r5, r6, pc}
    14a6:	46c0      	nop			; (mov r8, r8)
    14a8:	200001a0 	.word	0x200001a0
    14ac:	00002710 	.word	0x00002710
    14b0:	00080003 	.word	0x00080003
    14b4:	00090003 	.word	0x00090003
    14b8:	20000178 	.word	0x20000178
    14bc:	42001000 	.word	0x42001000
    14c0:	000004d1 	.word	0x000004d1
    14c4:	00001225 	.word	0x00001225
    14c8:	e000e100 	.word	0xe000e100

000014cc <configure_i2c_callbacks>:
{
    14cc:	b510      	push	{r4, lr}
	i2c_master_register_callback(&i2c_master_instance, i2c_write_complete_callback,
    14ce:	4c05      	ldr	r4, [pc, #20]	; (14e4 <configure_i2c_callbacks+0x18>)
    14d0:	2200      	movs	r2, #0
    14d2:	4905      	ldr	r1, [pc, #20]	; (14e8 <configure_i2c_callbacks+0x1c>)
    14d4:	0020      	movs	r0, r4
    14d6:	4b05      	ldr	r3, [pc, #20]	; (14ec <configure_i2c_callbacks+0x20>)
    14d8:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    14da:	7e63      	ldrb	r3, [r4, #25]
    14dc:	2201      	movs	r2, #1
    14de:	4313      	orrs	r3, r2
    14e0:	7663      	strb	r3, [r4, #25]
}
    14e2:	bd10      	pop	{r4, pc}
    14e4:	20000178 	.word	0x20000178
    14e8:	0000131d 	.word	0x0000131d
    14ec:	0000076d 	.word	0x0000076d

000014f0 <i2c_Write>:
 {
    14f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14f2:	af00      	add	r7, sp, #0
 	uint8_t merged_packet[len + 1];
    14f4:	001c      	movs	r4, r3
    14f6:	3408      	adds	r4, #8
    14f8:	08e4      	lsrs	r4, r4, #3
    14fa:	00e4      	lsls	r4, r4, #3
    14fc:	466d      	mov	r5, sp
    14fe:	1b2c      	subs	r4, r5, r4
    1500:	46a5      	mov	sp, r4
    1502:	466e      	mov	r6, sp
 	merged_packet[0] = reg_addr;
    1504:	7031      	strb	r1, [r6, #0]
 	for(uint16_t i = 0; i < len; i++)
    1506:	b29b      	uxth	r3, r3
    1508:	2b00      	cmp	r3, #0
    150a:	d007      	beq.n	151c <i2c_Write+0x2c>
    150c:	2100      	movs	r1, #0
 	merged_packet[i + 1] = write_buffer[i];
    150e:	1874      	adds	r4, r6, r1
    1510:	5c55      	ldrb	r5, [r2, r1]
    1512:	7065      	strb	r5, [r4, #1]
    1514:	3101      	adds	r1, #1
 	for(uint16_t i = 0; i < len; i++)
    1516:	b28c      	uxth	r4, r1
    1518:	429c      	cmp	r4, r3
    151a:	d3f8      	bcc.n	150e <i2c_Write+0x1e>
	write_packet.address = i2c_addr;
    151c:	4a0d      	ldr	r2, [pc, #52]	; (1554 <i2c_Write+0x64>)
    151e:	8010      	strh	r0, [r2, #0]
	write_packet.data = merged_packet;
    1520:	6056      	str	r6, [r2, #4]
	write_packet.data_length = len + 1;
    1522:	3301      	adds	r3, #1
    1524:	8053      	strh	r3, [r2, #2]
	read_packet.ten_bit_address = FALSE;
    1526:	4b0c      	ldr	r3, [pc, #48]	; (1558 <i2c_Write+0x68>)
    1528:	2200      	movs	r2, #0
    152a:	721a      	strb	r2, [r3, #8]
	read_packet.high_speed = FALSE;
    152c:	725a      	strb	r2, [r3, #9]
	while (i2c_master_write_packet_wait(&i2c_master_instance, &write_packet) != STATUS_OK) 
    152e:	4d09      	ldr	r5, [pc, #36]	; (1554 <i2c_Write+0x64>)
    1530:	4c0a      	ldr	r4, [pc, #40]	; (155c <i2c_Write+0x6c>)
    1532:	4e0b      	ldr	r6, [pc, #44]	; (1560 <i2c_Write+0x70>)
    1534:	0029      	movs	r1, r5
    1536:	0020      	movs	r0, r4
    1538:	47b0      	blx	r6
    153a:	2800      	cmp	r0, #0
    153c:	d007      	beq.n	154e <i2c_Write+0x5e>
		if (timeout++ == I2C_TIMEOUT) {
    153e:	4a09      	ldr	r2, [pc, #36]	; (1564 <i2c_Write+0x74>)
    1540:	8813      	ldrh	r3, [r2, #0]
    1542:	1c59      	adds	r1, r3, #1
    1544:	8011      	strh	r1, [r2, #0]
    1546:	2b0a      	cmp	r3, #10
    1548:	d1f4      	bne.n	1534 <i2c_Write+0x44>
		return -1;
    154a:	2001      	movs	r0, #1
    154c:	4240      	negs	r0, r0
 } //i2c_Write
    154e:	46bd      	mov	sp, r7
    1550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1552:	46c0      	nop			; (mov r8, r8)
    1554:	20000134 	.word	0x20000134
    1558:	20000164 	.word	0x20000164
    155c:	20000178 	.word	0x20000178
    1560:	00000689 	.word	0x00000689
    1564:	200000ac 	.word	0x200000ac

00001568 <i2c_Read>:
 {
    1568:	b5f0      	push	{r4, r5, r6, r7, lr}
    156a:	b083      	sub	sp, #12
    156c:	0017      	movs	r7, r2
    156e:	9300      	str	r3, [sp, #0]
    1570:	466b      	mov	r3, sp
    1572:	1dda      	adds	r2, r3, #7
    1574:	71d9      	strb	r1, [r3, #7]
	read_packet.address = i2c_addr;
    1576:	4b18      	ldr	r3, [pc, #96]	; (15d8 <i2c_Read+0x70>)
    1578:	8018      	strh	r0, [r3, #0]
	read_packet.data = &reg_addr;
    157a:	605a      	str	r2, [r3, #4]
	read_packet.data_length = 1;
    157c:	2201      	movs	r2, #1
    157e:	805a      	strh	r2, [r3, #2]
	read_packet.ten_bit_address = FALSE;
    1580:	2200      	movs	r2, #0
    1582:	721a      	strb	r2, [r3, #8]
	read_packet.high_speed = FALSE;
    1584:	725a      	strb	r2, [r3, #9]
	while (i2c_master_write_packet_wait(&i2c_master_instance, &read_packet) != STATUS_OK) 
    1586:	001d      	movs	r5, r3
    1588:	4c14      	ldr	r4, [pc, #80]	; (15dc <i2c_Read+0x74>)
    158a:	4e15      	ldr	r6, [pc, #84]	; (15e0 <i2c_Read+0x78>)
    158c:	0029      	movs	r1, r5
    158e:	0020      	movs	r0, r4
    1590:	47b0      	blx	r6
    1592:	2800      	cmp	r0, #0
    1594:	d009      	beq.n	15aa <i2c_Read+0x42>
		if (timeout++ == I2C_TIMEOUT) {
    1596:	4a13      	ldr	r2, [pc, #76]	; (15e4 <i2c_Read+0x7c>)
    1598:	8813      	ldrh	r3, [r2, #0]
    159a:	1c59      	adds	r1, r3, #1
    159c:	8011      	strh	r1, [r2, #0]
    159e:	2b0a      	cmp	r3, #10
    15a0:	d1f4      	bne.n	158c <i2c_Read+0x24>
			return -1;
    15a2:	2001      	movs	r0, #1
    15a4:	4240      	negs	r0, r0
 }// i2c_Read
    15a6:	b003      	add	sp, #12
    15a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	read_packet.data = read_buffer;
    15aa:	4b0b      	ldr	r3, [pc, #44]	; (15d8 <i2c_Read+0x70>)
    15ac:	605f      	str	r7, [r3, #4]
	read_packet.data_length = len;
    15ae:	466a      	mov	r2, sp
    15b0:	8812      	ldrh	r2, [r2, #0]
    15b2:	805a      	strh	r2, [r3, #2]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &read_packet) != STATUS_OK)
    15b4:	001d      	movs	r5, r3
    15b6:	4c09      	ldr	r4, [pc, #36]	; (15dc <i2c_Read+0x74>)
    15b8:	4e0b      	ldr	r6, [pc, #44]	; (15e8 <i2c_Read+0x80>)
    15ba:	0029      	movs	r1, r5
    15bc:	0020      	movs	r0, r4
    15be:	47b0      	blx	r6
    15c0:	2800      	cmp	r0, #0
    15c2:	d0f0      	beq.n	15a6 <i2c_Read+0x3e>
		if (timeout++ == I2C_TIMEOUT) {
    15c4:	4a07      	ldr	r2, [pc, #28]	; (15e4 <i2c_Read+0x7c>)
    15c6:	8813      	ldrh	r3, [r2, #0]
    15c8:	1c59      	adds	r1, r3, #1
    15ca:	8011      	strh	r1, [r2, #0]
    15cc:	2b0a      	cmp	r3, #10
    15ce:	d1f4      	bne.n	15ba <i2c_Read+0x52>
			return -1;
    15d0:	2001      	movs	r0, #1
    15d2:	4240      	negs	r0, r0
    15d4:	e7e7      	b.n	15a6 <i2c_Read+0x3e>
    15d6:	46c0      	nop			; (mov r8, r8)
    15d8:	20000164 	.word	0x20000164
    15dc:	20000178 	.word	0x20000178
    15e0:	00000689 	.word	0x00000689
    15e4:	200000ac 	.word	0x200000ac
    15e8:	00000665 	.word	0x00000665

000015ec <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    15ec:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    15ee:	2000      	movs	r0, #0
    15f0:	4b08      	ldr	r3, [pc, #32]	; (1614 <delay_init+0x28>)
    15f2:	4798      	blx	r3
    15f4:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    15f6:	4c08      	ldr	r4, [pc, #32]	; (1618 <delay_init+0x2c>)
    15f8:	21fa      	movs	r1, #250	; 0xfa
    15fa:	0089      	lsls	r1, r1, #2
    15fc:	47a0      	blx	r4
    15fe:	4b07      	ldr	r3, [pc, #28]	; (161c <delay_init+0x30>)
    1600:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    1602:	4907      	ldr	r1, [pc, #28]	; (1620 <delay_init+0x34>)
    1604:	0028      	movs	r0, r5
    1606:	47a0      	blx	r4
    1608:	4b06      	ldr	r3, [pc, #24]	; (1624 <delay_init+0x38>)
    160a:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    160c:	2205      	movs	r2, #5
    160e:	4b06      	ldr	r3, [pc, #24]	; (1628 <delay_init+0x3c>)
    1610:	601a      	str	r2, [r3, #0]
}
    1612:	bd70      	pop	{r4, r5, r6, pc}
    1614:	00001b75 	.word	0x00001b75
    1618:	00001fc9 	.word	0x00001fc9
    161c:	20000004 	.word	0x20000004
    1620:	000f4240 	.word	0x000f4240
    1624:	20000008 	.word	0x20000008
    1628:	e000e010 	.word	0xe000e010

0000162c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    162c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    162e:	4b08      	ldr	r3, [pc, #32]	; (1650 <delay_cycles_ms+0x24>)
    1630:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    1632:	4a08      	ldr	r2, [pc, #32]	; (1654 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    1634:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1636:	2180      	movs	r1, #128	; 0x80
    1638:	0249      	lsls	r1, r1, #9
	while (n--) {
    163a:	3801      	subs	r0, #1
    163c:	d307      	bcc.n	164e <delay_cycles_ms+0x22>
	if (n > 0) {
    163e:	2c00      	cmp	r4, #0
    1640:	d0fb      	beq.n	163a <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    1642:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1644:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1646:	6813      	ldr	r3, [r2, #0]
    1648:	420b      	tst	r3, r1
    164a:	d0fc      	beq.n	1646 <delay_cycles_ms+0x1a>
    164c:	e7f5      	b.n	163a <delay_cycles_ms+0xe>
	}
}
    164e:	bd30      	pop	{r4, r5, pc}
    1650:	20000004 	.word	0x20000004
    1654:	e000e010 	.word	0xe000e010

00001658 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1658:	b500      	push	{lr}
    165a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    165c:	ab01      	add	r3, sp, #4
    165e:	2280      	movs	r2, #128	; 0x80
    1660:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1662:	780a      	ldrb	r2, [r1, #0]
    1664:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1666:	784a      	ldrb	r2, [r1, #1]
    1668:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    166a:	788a      	ldrb	r2, [r1, #2]
    166c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    166e:	0019      	movs	r1, r3
    1670:	4b01      	ldr	r3, [pc, #4]	; (1678 <port_pin_set_config+0x20>)
    1672:	4798      	blx	r3
}
    1674:	b003      	add	sp, #12
    1676:	bd00      	pop	{pc}
    1678:	00001d85 	.word	0x00001d85

0000167c <extint_detection_callback>:
	return (port_base->IN.reg & pin_mask);
    167c:	4b05      	ldr	r3, [pc, #20]	; (1694 <extint_detection_callback+0x18>)
    167e:	6a1b      	ldr	r3, [r3, #32]
	if (level) {
    1680:	041b      	lsls	r3, r3, #16
    1682:	d503      	bpl.n	168c <extint_detection_callback+0x10>
		port_base->OUTCLR.reg = pin_mask;
    1684:	2220      	movs	r2, #32
    1686:	4b03      	ldr	r3, [pc, #12]	; (1694 <extint_detection_callback+0x18>)
    1688:	615a      	str	r2, [r3, #20]
void extint_detection_callback(void)
{
	bool button_pin_state = port_pin_get_input_level(BUTTON_0_PIN);
	button_pin_state = !button_pin_state;
	port_pin_set_output_level(LED_PWR_RED_PIN, button_pin_state);
    168a:	4770      	bx	lr
		port_base->OUTSET.reg = pin_mask;
    168c:	2220      	movs	r2, #32
    168e:	4b01      	ldr	r3, [pc, #4]	; (1694 <extint_detection_callback+0x18>)
    1690:	619a      	str	r2, [r3, #24]
    1692:	e7fa      	b.n	168a <extint_detection_callback+0xe>
    1694:	41004400 	.word	0x41004400

00001698 <config_led>:
 {
    1698:	b500      	push	{lr}
    169a:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    169c:	a901      	add	r1, sp, #4
    169e:	2301      	movs	r3, #1
    16a0:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    16a2:	2200      	movs	r2, #0
    16a4:	708a      	strb	r2, [r1, #2]
	 pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    16a6:	700b      	strb	r3, [r1, #0]
	 port_pin_set_config(LED_0_PIN, &pin_conf);
    16a8:	200e      	movs	r0, #14
    16aa:	4b04      	ldr	r3, [pc, #16]	; (16bc <config_led+0x24>)
    16ac:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    16ae:	2280      	movs	r2, #128	; 0x80
    16b0:	01d2      	lsls	r2, r2, #7
    16b2:	4b03      	ldr	r3, [pc, #12]	; (16c0 <config_led+0x28>)
    16b4:	619a      	str	r2, [r3, #24]
}
    16b6:	b003      	add	sp, #12
    16b8:	bd00      	pop	{pc}
    16ba:	46c0      	nop			; (mov r8, r8)
    16bc:	00001659 	.word	0x00001659
    16c0:	41004400 	.word	0x41004400

000016c4 <config_IO_LEDS>:
 {
    16c4:	b570      	push	{r4, r5, r6, lr}
    16c6:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
    16c8:	ac01      	add	r4, sp, #4
    16ca:	2301      	movs	r3, #1
    16cc:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    16ce:	2200      	movs	r2, #0
    16d0:	70a2      	strb	r2, [r4, #2]
	 pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    16d2:	7023      	strb	r3, [r4, #0]
	 port_pin_set_config(LED_PWR_GREEN_PIN, &pin_conf);
    16d4:	0021      	movs	r1, r4
    16d6:	2006      	movs	r0, #6
    16d8:	4d0b      	ldr	r5, [pc, #44]	; (1708 <config_IO_LEDS+0x44>)
    16da:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    16dc:	4e0b      	ldr	r6, [pc, #44]	; (170c <config_IO_LEDS+0x48>)
    16de:	2340      	movs	r3, #64	; 0x40
    16e0:	61b3      	str	r3, [r6, #24]
	 port_pin_set_config(LED_PWR_RED_PIN, &pin_conf);
    16e2:	0021      	movs	r1, r4
    16e4:	2005      	movs	r0, #5
    16e6:	47a8      	blx	r5
    16e8:	2320      	movs	r3, #32
    16ea:	61b3      	str	r3, [r6, #24]
	 port_pin_set_config(LED_MEAS_WHITE_PIN, &pin_conf);
    16ec:	0021      	movs	r1, r4
    16ee:	202e      	movs	r0, #46	; 0x2e
    16f0:	47a8      	blx	r5
    16f2:	4e07      	ldr	r6, [pc, #28]	; (1710 <config_IO_LEDS+0x4c>)
    16f4:	2380      	movs	r3, #128	; 0x80
    16f6:	01db      	lsls	r3, r3, #7
    16f8:	61b3      	str	r3, [r6, #24]
	 port_pin_set_config(LED_STOP_RED_PIN, &pin_conf);
    16fa:	0021      	movs	r1, r4
    16fc:	2022      	movs	r0, #34	; 0x22
    16fe:	47a8      	blx	r5
    1700:	2304      	movs	r3, #4
    1702:	61b3      	str	r3, [r6, #24]
 }
    1704:	b002      	add	sp, #8
    1706:	bd70      	pop	{r4, r5, r6, pc}
    1708:	00001659 	.word	0x00001659
    170c:	41004400 	.word	0x41004400
    1710:	41004480 	.word	0x41004480

00001714 <configure_extint_channel>:
{
    1714:	b510      	push	{r4, lr}
    1716:	b084      	sub	sp, #16
	extint_chan_get_config_defaults(&config_extint_chan);
    1718:	ac01      	add	r4, sp, #4
    171a:	0020      	movs	r0, r4
    171c:	4b07      	ldr	r3, [pc, #28]	; (173c <configure_extint_channel+0x28>)
    171e:	4798      	blx	r3
	config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
    1720:	230f      	movs	r3, #15
    1722:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
    1724:	2300      	movs	r3, #0
    1726:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    1728:	3301      	adds	r3, #1
    172a:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    172c:	3302      	adds	r3, #2
    172e:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
    1730:	0021      	movs	r1, r4
    1732:	200f      	movs	r0, #15
    1734:	4b02      	ldr	r3, [pc, #8]	; (1740 <configure_extint_channel+0x2c>)
    1736:	4798      	blx	r3
}
    1738:	b004      	add	sp, #16
    173a:	bd10      	pop	{r4, pc}
    173c:	00000229 	.word	0x00000229
    1740:	0000023d 	.word	0x0000023d

00001744 <configure_extint_callbacks>:
{
    1744:	b510      	push	{r4, lr}
	extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    1746:	2200      	movs	r2, #0
    1748:	210f      	movs	r1, #15
    174a:	4804      	ldr	r0, [pc, #16]	; (175c <configure_extint_callbacks+0x18>)
    174c:	4b04      	ldr	r3, [pc, #16]	; (1760 <configure_extint_callbacks+0x1c>)
    174e:	4798      	blx	r3
	extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    1750:	2100      	movs	r1, #0
    1752:	200f      	movs	r0, #15
    1754:	4b03      	ldr	r3, [pc, #12]	; (1764 <configure_extint_callbacks+0x20>)
    1756:	4798      	blx	r3
}
    1758:	bd10      	pop	{r4, pc}
    175a:	46c0      	nop			; (mov r8, r8)
    175c:	0000167d 	.word	0x0000167d
    1760:	00000105 	.word	0x00000105
    1764:	00000131 	.word	0x00000131

00001768 <config_board>:
{
    1768:	b510      	push	{r4, lr}
 	SysTick_Config(system_gclk_gen_get_hz(GCLK_GENERATOR_0));
    176a:	2000      	movs	r0, #0
    176c:	4b16      	ldr	r3, [pc, #88]	; (17c8 <config_board+0x60>)
    176e:	4798      	blx	r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
    1770:	3801      	subs	r0, #1
    1772:	4b16      	ldr	r3, [pc, #88]	; (17cc <config_board+0x64>)
    1774:	4298      	cmp	r0, r3
    1776:	d80d      	bhi.n	1794 <config_board+0x2c>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
    1778:	4a15      	ldr	r2, [pc, #84]	; (17d0 <config_board+0x68>)
    177a:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    177c:	4815      	ldr	r0, [pc, #84]	; (17d4 <config_board+0x6c>)
    177e:	6a03      	ldr	r3, [r0, #32]
    1780:	021b      	lsls	r3, r3, #8
    1782:	0a1b      	lsrs	r3, r3, #8
    1784:	21c0      	movs	r1, #192	; 0xc0
    1786:	0609      	lsls	r1, r1, #24
    1788:	430b      	orrs	r3, r1
    178a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    178c:	2300      	movs	r3, #0
    178e:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    1790:	3307      	adds	r3, #7
    1792:	6013      	str	r3, [r2, #0]
	config_led();
    1794:	4b10      	ldr	r3, [pc, #64]	; (17d8 <config_board+0x70>)
    1796:	4798      	blx	r3
	config_IO_LEDS();
    1798:	4b10      	ldr	r3, [pc, #64]	; (17dc <config_board+0x74>)
    179a:	4798      	blx	r3
	delay_init();
    179c:	4b10      	ldr	r3, [pc, #64]	; (17e0 <config_board+0x78>)
    179e:	4798      	blx	r3
	configure_usart();
    17a0:	4b10      	ldr	r3, [pc, #64]	; (17e4 <config_board+0x7c>)
    17a2:	4798      	blx	r3
	configure_usart_callbacks();
    17a4:	4b10      	ldr	r3, [pc, #64]	; (17e8 <config_board+0x80>)
    17a6:	4798      	blx	r3
	configure_i2c_master();
    17a8:	4b10      	ldr	r3, [pc, #64]	; (17ec <config_board+0x84>)
    17aa:	4798      	blx	r3
	configure_i2c_callbacks();
    17ac:	4b10      	ldr	r3, [pc, #64]	; (17f0 <config_board+0x88>)
    17ae:	4798      	blx	r3
	configure_extint_channel();
    17b0:	4b10      	ldr	r3, [pc, #64]	; (17f4 <config_board+0x8c>)
    17b2:	4798      	blx	r3
	configure_extint_callbacks();
    17b4:	4b10      	ldr	r3, [pc, #64]	; (17f8 <config_board+0x90>)
    17b6:	4798      	blx	r3
	cpu_irq_enable();
    17b8:	2201      	movs	r2, #1
    17ba:	4b10      	ldr	r3, [pc, #64]	; (17fc <config_board+0x94>)
    17bc:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    17be:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    17c2:	b662      	cpsie	i
}
    17c4:	bd10      	pop	{r4, pc}
    17c6:	46c0      	nop			; (mov r8, r8)
    17c8:	00001b75 	.word	0x00001b75
    17cc:	00ffffff 	.word	0x00ffffff
    17d0:	e000e010 	.word	0xe000e010
    17d4:	e000ed00 	.word	0xe000ed00
    17d8:	00001699 	.word	0x00001699
    17dc:	000016c5 	.word	0x000016c5
    17e0:	000015ed 	.word	0x000015ed
    17e4:	00001335 	.word	0x00001335
    17e8:	000013cd 	.word	0x000013cd
    17ec:	00001431 	.word	0x00001431
    17f0:	000014cd 	.word	0x000014cd
    17f4:	00001715 	.word	0x00001715
    17f8:	00001745 	.word	0x00001745
    17fc:	2000000c 	.word	0x2000000c

00001800 <system_board_init>:
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	 
}
    1800:	4770      	bx	lr
	...

00001804 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1804:	4b0c      	ldr	r3, [pc, #48]	; (1838 <cpu_irq_enter_critical+0x34>)
    1806:	681b      	ldr	r3, [r3, #0]
    1808:	2b00      	cmp	r3, #0
    180a:	d106      	bne.n	181a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    180c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1810:	2b00      	cmp	r3, #0
    1812:	d007      	beq.n	1824 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1814:	2200      	movs	r2, #0
    1816:	4b09      	ldr	r3, [pc, #36]	; (183c <cpu_irq_enter_critical+0x38>)
    1818:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    181a:	4a07      	ldr	r2, [pc, #28]	; (1838 <cpu_irq_enter_critical+0x34>)
    181c:	6813      	ldr	r3, [r2, #0]
    181e:	3301      	adds	r3, #1
    1820:	6013      	str	r3, [r2, #0]
}
    1822:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1824:	b672      	cpsid	i
    1826:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    182a:	2200      	movs	r2, #0
    182c:	4b04      	ldr	r3, [pc, #16]	; (1840 <cpu_irq_enter_critical+0x3c>)
    182e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1830:	3201      	adds	r2, #1
    1832:	4b02      	ldr	r3, [pc, #8]	; (183c <cpu_irq_enter_critical+0x38>)
    1834:	701a      	strb	r2, [r3, #0]
    1836:	e7f0      	b.n	181a <cpu_irq_enter_critical+0x16>
    1838:	200000b0 	.word	0x200000b0
    183c:	200000b4 	.word	0x200000b4
    1840:	2000000c 	.word	0x2000000c

00001844 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1844:	4b08      	ldr	r3, [pc, #32]	; (1868 <cpu_irq_leave_critical+0x24>)
    1846:	681a      	ldr	r2, [r3, #0]
    1848:	3a01      	subs	r2, #1
    184a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    184c:	681b      	ldr	r3, [r3, #0]
    184e:	2b00      	cmp	r3, #0
    1850:	d109      	bne.n	1866 <cpu_irq_leave_critical+0x22>
    1852:	4b06      	ldr	r3, [pc, #24]	; (186c <cpu_irq_leave_critical+0x28>)
    1854:	781b      	ldrb	r3, [r3, #0]
    1856:	2b00      	cmp	r3, #0
    1858:	d005      	beq.n	1866 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    185a:	2201      	movs	r2, #1
    185c:	4b04      	ldr	r3, [pc, #16]	; (1870 <cpu_irq_leave_critical+0x2c>)
    185e:	701a      	strb	r2, [r3, #0]
    1860:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1864:	b662      	cpsie	i
	}
}
    1866:	4770      	bx	lr
    1868:	200000b0 	.word	0x200000b0
    186c:	200000b4 	.word	0x200000b4
    1870:	2000000c 	.word	0x2000000c

00001874 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1874:	b510      	push	{r4, lr}
	switch (clock_source) {
    1876:	2807      	cmp	r0, #7
    1878:	d803      	bhi.n	1882 <system_clock_source_get_hz+0xe>
    187a:	0080      	lsls	r0, r0, #2
    187c:	4b16      	ldr	r3, [pc, #88]	; (18d8 <system_clock_source_get_hz+0x64>)
    187e:	581b      	ldr	r3, [r3, r0]
    1880:	469f      	mov	pc, r3
		}

		return 48000000UL;

	default:
		return 0;
    1882:	2000      	movs	r0, #0
    1884:	e027      	b.n	18d6 <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc.frequency;
    1886:	4b15      	ldr	r3, [pc, #84]	; (18dc <system_clock_source_get_hz+0x68>)
    1888:	68d8      	ldr	r0, [r3, #12]
    188a:	e024      	b.n	18d6 <system_clock_source_get_hz+0x62>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    188c:	4b14      	ldr	r3, [pc, #80]	; (18e0 <system_clock_source_get_hz+0x6c>)
    188e:	6a1b      	ldr	r3, [r3, #32]
    1890:	059b      	lsls	r3, r3, #22
    1892:	0f9b      	lsrs	r3, r3, #30
    1894:	4813      	ldr	r0, [pc, #76]	; (18e4 <system_clock_source_get_hz+0x70>)
    1896:	40d8      	lsrs	r0, r3
    1898:	e01d      	b.n	18d6 <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc32k.frequency;
    189a:	4b10      	ldr	r3, [pc, #64]	; (18dc <system_clock_source_get_hz+0x68>)
    189c:	6918      	ldr	r0, [r3, #16]
    189e:	e01a      	b.n	18d6 <system_clock_source_get_hz+0x62>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    18a0:	4b0e      	ldr	r3, [pc, #56]	; (18dc <system_clock_source_get_hz+0x68>)
    18a2:	681b      	ldr	r3, [r3, #0]
			return 0;
    18a4:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    18a6:	079b      	lsls	r3, r3, #30
    18a8:	d515      	bpl.n	18d6 <system_clock_source_get_hz+0x62>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    18aa:	490d      	ldr	r1, [pc, #52]	; (18e0 <system_clock_source_get_hz+0x6c>)
    18ac:	2210      	movs	r2, #16
    18ae:	68cb      	ldr	r3, [r1, #12]
    18b0:	421a      	tst	r2, r3
    18b2:	d0fc      	beq.n	18ae <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    18b4:	4b09      	ldr	r3, [pc, #36]	; (18dc <system_clock_source_get_hz+0x68>)
    18b6:	681b      	ldr	r3, [r3, #0]
    18b8:	075b      	lsls	r3, r3, #29
    18ba:	d401      	bmi.n	18c0 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    18bc:	480a      	ldr	r0, [pc, #40]	; (18e8 <system_clock_source_get_hz+0x74>)
    18be:	e00a      	b.n	18d6 <system_clock_source_get_hz+0x62>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    18c0:	2000      	movs	r0, #0
    18c2:	4b0a      	ldr	r3, [pc, #40]	; (18ec <system_clock_source_get_hz+0x78>)
    18c4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    18c6:	4b05      	ldr	r3, [pc, #20]	; (18dc <system_clock_source_get_hz+0x68>)
    18c8:	689b      	ldr	r3, [r3, #8]
    18ca:	041b      	lsls	r3, r3, #16
    18cc:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    18ce:	4358      	muls	r0, r3
    18d0:	e001      	b.n	18d6 <system_clock_source_get_hz+0x62>
		return 32768UL;
    18d2:	2080      	movs	r0, #128	; 0x80
    18d4:	0200      	lsls	r0, r0, #8
	}
}
    18d6:	bd10      	pop	{r4, pc}
    18d8:	00002a00 	.word	0x00002a00
    18dc:	200000b8 	.word	0x200000b8
    18e0:	40000800 	.word	0x40000800
    18e4:	007a1200 	.word	0x007a1200
    18e8:	02dc6c00 	.word	0x02dc6c00
    18ec:	00001ca9 	.word	0x00001ca9

000018f0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    18f0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    18f2:	490c      	ldr	r1, [pc, #48]	; (1924 <system_clock_source_osc8m_set_config+0x34>)
    18f4:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    18f6:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    18f8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    18fa:	7840      	ldrb	r0, [r0, #1]
    18fc:	2201      	movs	r2, #1
    18fe:	4010      	ands	r0, r2
    1900:	0180      	lsls	r0, r0, #6
    1902:	2640      	movs	r6, #64	; 0x40
    1904:	43b3      	bics	r3, r6
    1906:	4303      	orrs	r3, r0
    1908:	402a      	ands	r2, r5
    190a:	01d2      	lsls	r2, r2, #7
    190c:	2080      	movs	r0, #128	; 0x80
    190e:	4383      	bics	r3, r0
    1910:	4313      	orrs	r3, r2
    1912:	2203      	movs	r2, #3
    1914:	4022      	ands	r2, r4
    1916:	0212      	lsls	r2, r2, #8
    1918:	4803      	ldr	r0, [pc, #12]	; (1928 <system_clock_source_osc8m_set_config+0x38>)
    191a:	4003      	ands	r3, r0
    191c:	4313      	orrs	r3, r2
    191e:	620b      	str	r3, [r1, #32]
}
    1920:	bd70      	pop	{r4, r5, r6, pc}
    1922:	46c0      	nop			; (mov r8, r8)
    1924:	40000800 	.word	0x40000800
    1928:	fffffcff 	.word	0xfffffcff

0000192c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    192c:	2807      	cmp	r0, #7
    192e:	d803      	bhi.n	1938 <system_clock_source_enable+0xc>
    1930:	0080      	lsls	r0, r0, #2
    1932:	4b1e      	ldr	r3, [pc, #120]	; (19ac <system_clock_source_enable+0x80>)
    1934:	581b      	ldr	r3, [r3, r0]
    1936:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1938:	2017      	movs	r0, #23
    193a:	e036      	b.n	19aa <system_clock_source_enable+0x7e>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    193c:	4a1c      	ldr	r2, [pc, #112]	; (19b0 <system_clock_source_enable+0x84>)
    193e:	6a13      	ldr	r3, [r2, #32]
    1940:	2102      	movs	r1, #2
    1942:	430b      	orrs	r3, r1
    1944:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1946:	2000      	movs	r0, #0
    1948:	e02f      	b.n	19aa <system_clock_source_enable+0x7e>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    194a:	4a19      	ldr	r2, [pc, #100]	; (19b0 <system_clock_source_enable+0x84>)
    194c:	6993      	ldr	r3, [r2, #24]
    194e:	2102      	movs	r1, #2
    1950:	430b      	orrs	r3, r1
    1952:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1954:	2000      	movs	r0, #0
		break;
    1956:	e028      	b.n	19aa <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1958:	4a15      	ldr	r2, [pc, #84]	; (19b0 <system_clock_source_enable+0x84>)
    195a:	8a13      	ldrh	r3, [r2, #16]
    195c:	2102      	movs	r1, #2
    195e:	430b      	orrs	r3, r1
    1960:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1962:	2000      	movs	r0, #0
		break;
    1964:	e021      	b.n	19aa <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1966:	4a12      	ldr	r2, [pc, #72]	; (19b0 <system_clock_source_enable+0x84>)
    1968:	8a93      	ldrh	r3, [r2, #20]
    196a:	2102      	movs	r1, #2
    196c:	430b      	orrs	r3, r1
    196e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1970:	2000      	movs	r0, #0
		break;
    1972:	e01a      	b.n	19aa <system_clock_source_enable+0x7e>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1974:	4b0f      	ldr	r3, [pc, #60]	; (19b4 <system_clock_source_enable+0x88>)
    1976:	681a      	ldr	r2, [r3, #0]
    1978:	2102      	movs	r1, #2
    197a:	430a      	orrs	r2, r1
    197c:	601a      	str	r2, [r3, #0]
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    197e:	681b      	ldr	r3, [r3, #0]
    1980:	4a0d      	ldr	r2, [pc, #52]	; (19b8 <system_clock_source_enable+0x8c>)
    1982:	4013      	ands	r3, r2
    1984:	4a0a      	ldr	r2, [pc, #40]	; (19b0 <system_clock_source_enable+0x84>)
    1986:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1988:	0011      	movs	r1, r2
    198a:	2210      	movs	r2, #16
    198c:	68cb      	ldr	r3, [r1, #12]
    198e:	421a      	tst	r2, r3
    1990:	d0fc      	beq.n	198c <system_clock_source_enable+0x60>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1992:	4a08      	ldr	r2, [pc, #32]	; (19b4 <system_clock_source_enable+0x88>)
    1994:	6891      	ldr	r1, [r2, #8]
    1996:	4b06      	ldr	r3, [pc, #24]	; (19b0 <system_clock_source_enable+0x84>)
    1998:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    199a:	6851      	ldr	r1, [r2, #4]
    199c:	6299      	str	r1, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    199e:	6812      	ldr	r2, [r2, #0]
    19a0:	b292      	uxth	r2, r2
    19a2:	849a      	strh	r2, [r3, #36]	; 0x24
	return STATUS_OK;
    19a4:	2000      	movs	r0, #0
    19a6:	e000      	b.n	19aa <system_clock_source_enable+0x7e>
		return STATUS_OK;
    19a8:	2000      	movs	r0, #0
}
    19aa:	4770      	bx	lr
    19ac:	00002a20 	.word	0x00002a20
    19b0:	40000800 	.word	0x40000800
    19b4:	200000b8 	.word	0x200000b8
    19b8:	0000ff7f 	.word	0x0000ff7f

000019bc <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    19bc:	b530      	push	{r4, r5, lr}
    19be:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    19c0:	22c2      	movs	r2, #194	; 0xc2
    19c2:	00d2      	lsls	r2, r2, #3
    19c4:	4b1a      	ldr	r3, [pc, #104]	; (1a30 <system_clock_init+0x74>)
    19c6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    19c8:	4a1a      	ldr	r2, [pc, #104]	; (1a34 <system_clock_init+0x78>)
    19ca:	6853      	ldr	r3, [r2, #4]
    19cc:	211e      	movs	r1, #30
    19ce:	438b      	bics	r3, r1
    19d0:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    19d2:	2301      	movs	r3, #1
    19d4:	466a      	mov	r2, sp
    19d6:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    19d8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    19da:	4d17      	ldr	r5, [pc, #92]	; (1a38 <system_clock_init+0x7c>)
    19dc:	b2e0      	uxtb	r0, r4
    19de:	4669      	mov	r1, sp
    19e0:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    19e2:	3401      	adds	r4, #1
    19e4:	2c1c      	cmp	r4, #28
    19e6:	d1f9      	bne.n	19dc <system_clock_init+0x20>
	config->run_in_standby  = false;
    19e8:	a803      	add	r0, sp, #12
    19ea:	2400      	movs	r4, #0
    19ec:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    19ee:	2501      	movs	r5, #1
    19f0:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    19f2:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    19f4:	4b11      	ldr	r3, [pc, #68]	; (1a3c <system_clock_init+0x80>)
    19f6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    19f8:	2006      	movs	r0, #6
    19fa:	4b11      	ldr	r3, [pc, #68]	; (1a40 <system_clock_init+0x84>)
    19fc:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    19fe:	4b11      	ldr	r3, [pc, #68]	; (1a44 <system_clock_init+0x88>)
    1a00:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    1a02:	4b11      	ldr	r3, [pc, #68]	; (1a48 <system_clock_init+0x8c>)
    1a04:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1a06:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1a08:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1a0a:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    1a0c:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1a0e:	466b      	mov	r3, sp
    1a10:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1a12:	2306      	movs	r3, #6
    1a14:	466a      	mov	r2, sp
    1a16:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    1a18:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1a1a:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1a1c:	4669      	mov	r1, sp
    1a1e:	2000      	movs	r0, #0
    1a20:	4b0a      	ldr	r3, [pc, #40]	; (1a4c <system_clock_init+0x90>)
    1a22:	4798      	blx	r3
    1a24:	2000      	movs	r0, #0
    1a26:	4b0a      	ldr	r3, [pc, #40]	; (1a50 <system_clock_init+0x94>)
    1a28:	4798      	blx	r3
#endif
}
    1a2a:	b005      	add	sp, #20
    1a2c:	bd30      	pop	{r4, r5, pc}
    1a2e:	46c0      	nop			; (mov r8, r8)
    1a30:	40000800 	.word	0x40000800
    1a34:	41004000 	.word	0x41004000
    1a38:	00001c8d 	.word	0x00001c8d
    1a3c:	000018f1 	.word	0x000018f1
    1a40:	0000192d 	.word	0x0000192d
    1a44:	00001a55 	.word	0x00001a55
    1a48:	40000400 	.word	0x40000400
    1a4c:	00001a79 	.word	0x00001a79
    1a50:	00001b31 	.word	0x00001b31

00001a54 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1a54:	4a06      	ldr	r2, [pc, #24]	; (1a70 <system_gclk_init+0x1c>)
    1a56:	6993      	ldr	r3, [r2, #24]
    1a58:	2108      	movs	r1, #8
    1a5a:	430b      	orrs	r3, r1
    1a5c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1a5e:	2201      	movs	r2, #1
    1a60:	4b04      	ldr	r3, [pc, #16]	; (1a74 <system_gclk_init+0x20>)
    1a62:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1a64:	0019      	movs	r1, r3
    1a66:	780b      	ldrb	r3, [r1, #0]
    1a68:	4213      	tst	r3, r2
    1a6a:	d1fc      	bne.n	1a66 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1a6c:	4770      	bx	lr
    1a6e:	46c0      	nop			; (mov r8, r8)
    1a70:	40000400 	.word	0x40000400
    1a74:	40000c00 	.word	0x40000c00

00001a78 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1a78:	b570      	push	{r4, r5, r6, lr}
    1a7a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1a7c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1a7e:	780d      	ldrb	r5, [r1, #0]
    1a80:	022d      	lsls	r5, r5, #8
    1a82:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1a84:	784b      	ldrb	r3, [r1, #1]
    1a86:	2b00      	cmp	r3, #0
    1a88:	d002      	beq.n	1a90 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1a8a:	2380      	movs	r3, #128	; 0x80
    1a8c:	02db      	lsls	r3, r3, #11
    1a8e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1a90:	7a4b      	ldrb	r3, [r1, #9]
    1a92:	2b00      	cmp	r3, #0
    1a94:	d002      	beq.n	1a9c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1a96:	2380      	movs	r3, #128	; 0x80
    1a98:	031b      	lsls	r3, r3, #12
    1a9a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1a9c:	6848      	ldr	r0, [r1, #4]
    1a9e:	2801      	cmp	r0, #1
    1aa0:	d910      	bls.n	1ac4 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1aa2:	1e43      	subs	r3, r0, #1
    1aa4:	4218      	tst	r0, r3
    1aa6:	d134      	bne.n	1b12 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1aa8:	2802      	cmp	r0, #2
    1aaa:	d930      	bls.n	1b0e <system_gclk_gen_set_config+0x96>
    1aac:	2302      	movs	r3, #2
    1aae:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1ab0:	3201      	adds	r2, #1
						mask <<= 1) {
    1ab2:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1ab4:	4298      	cmp	r0, r3
    1ab6:	d8fb      	bhi.n	1ab0 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1ab8:	0212      	lsls	r2, r2, #8
    1aba:	4332      	orrs	r2, r6
    1abc:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1abe:	2380      	movs	r3, #128	; 0x80
    1ac0:	035b      	lsls	r3, r3, #13
    1ac2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1ac4:	7a0b      	ldrb	r3, [r1, #8]
    1ac6:	2b00      	cmp	r3, #0
    1ac8:	d002      	beq.n	1ad0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1aca:	2380      	movs	r3, #128	; 0x80
    1acc:	039b      	lsls	r3, r3, #14
    1ace:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ad0:	4a13      	ldr	r2, [pc, #76]	; (1b20 <system_gclk_gen_set_config+0xa8>)
    1ad2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1ad4:	b25b      	sxtb	r3, r3
    1ad6:	2b00      	cmp	r3, #0
    1ad8:	dbfb      	blt.n	1ad2 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1ada:	4b12      	ldr	r3, [pc, #72]	; (1b24 <system_gclk_gen_set_config+0xac>)
    1adc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1ade:	4b12      	ldr	r3, [pc, #72]	; (1b28 <system_gclk_gen_set_config+0xb0>)
    1ae0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ae2:	4a0f      	ldr	r2, [pc, #60]	; (1b20 <system_gclk_gen_set_config+0xa8>)
    1ae4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1ae6:	b25b      	sxtb	r3, r3
    1ae8:	2b00      	cmp	r3, #0
    1aea:	dbfb      	blt.n	1ae4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1aec:	4b0c      	ldr	r3, [pc, #48]	; (1b20 <system_gclk_gen_set_config+0xa8>)
    1aee:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1af0:	001a      	movs	r2, r3
    1af2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1af4:	b25b      	sxtb	r3, r3
    1af6:	2b00      	cmp	r3, #0
    1af8:	dbfb      	blt.n	1af2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1afa:	4a09      	ldr	r2, [pc, #36]	; (1b20 <system_gclk_gen_set_config+0xa8>)
    1afc:	6853      	ldr	r3, [r2, #4]
    1afe:	2180      	movs	r1, #128	; 0x80
    1b00:	0249      	lsls	r1, r1, #9
    1b02:	400b      	ands	r3, r1
    1b04:	431d      	orrs	r5, r3
    1b06:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1b08:	4b08      	ldr	r3, [pc, #32]	; (1b2c <system_gclk_gen_set_config+0xb4>)
    1b0a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1b0c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1b0e:	2200      	movs	r2, #0
    1b10:	e7d2      	b.n	1ab8 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1b12:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1b14:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1b16:	2380      	movs	r3, #128	; 0x80
    1b18:	029b      	lsls	r3, r3, #10
    1b1a:	431d      	orrs	r5, r3
    1b1c:	e7d2      	b.n	1ac4 <system_gclk_gen_set_config+0x4c>
    1b1e:	46c0      	nop			; (mov r8, r8)
    1b20:	40000c00 	.word	0x40000c00
    1b24:	00001805 	.word	0x00001805
    1b28:	40000c08 	.word	0x40000c08
    1b2c:	00001845 	.word	0x00001845

00001b30 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1b30:	b510      	push	{r4, lr}
    1b32:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b34:	4a0b      	ldr	r2, [pc, #44]	; (1b64 <system_gclk_gen_enable+0x34>)
    1b36:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b38:	b25b      	sxtb	r3, r3
    1b3a:	2b00      	cmp	r3, #0
    1b3c:	dbfb      	blt.n	1b36 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1b3e:	4b0a      	ldr	r3, [pc, #40]	; (1b68 <system_gclk_gen_enable+0x38>)
    1b40:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b42:	4b0a      	ldr	r3, [pc, #40]	; (1b6c <system_gclk_gen_enable+0x3c>)
    1b44:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b46:	4a07      	ldr	r2, [pc, #28]	; (1b64 <system_gclk_gen_enable+0x34>)
    1b48:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b4a:	b25b      	sxtb	r3, r3
    1b4c:	2b00      	cmp	r3, #0
    1b4e:	dbfb      	blt.n	1b48 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1b50:	4a04      	ldr	r2, [pc, #16]	; (1b64 <system_gclk_gen_enable+0x34>)
    1b52:	6851      	ldr	r1, [r2, #4]
    1b54:	2380      	movs	r3, #128	; 0x80
    1b56:	025b      	lsls	r3, r3, #9
    1b58:	430b      	orrs	r3, r1
    1b5a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1b5c:	4b04      	ldr	r3, [pc, #16]	; (1b70 <system_gclk_gen_enable+0x40>)
    1b5e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1b60:	bd10      	pop	{r4, pc}
    1b62:	46c0      	nop			; (mov r8, r8)
    1b64:	40000c00 	.word	0x40000c00
    1b68:	00001805 	.word	0x00001805
    1b6c:	40000c04 	.word	0x40000c04
    1b70:	00001845 	.word	0x00001845

00001b74 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1b74:	b570      	push	{r4, r5, r6, lr}
    1b76:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b78:	4a1a      	ldr	r2, [pc, #104]	; (1be4 <system_gclk_gen_get_hz+0x70>)
    1b7a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b7c:	b25b      	sxtb	r3, r3
    1b7e:	2b00      	cmp	r3, #0
    1b80:	dbfb      	blt.n	1b7a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1b82:	4b19      	ldr	r3, [pc, #100]	; (1be8 <system_gclk_gen_get_hz+0x74>)
    1b84:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b86:	4b19      	ldr	r3, [pc, #100]	; (1bec <system_gclk_gen_get_hz+0x78>)
    1b88:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b8a:	4a16      	ldr	r2, [pc, #88]	; (1be4 <system_gclk_gen_get_hz+0x70>)
    1b8c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b8e:	b25b      	sxtb	r3, r3
    1b90:	2b00      	cmp	r3, #0
    1b92:	dbfb      	blt.n	1b8c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1b94:	4e13      	ldr	r6, [pc, #76]	; (1be4 <system_gclk_gen_get_hz+0x70>)
    1b96:	6870      	ldr	r0, [r6, #4]
    1b98:	04c0      	lsls	r0, r0, #19
    1b9a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1b9c:	4b14      	ldr	r3, [pc, #80]	; (1bf0 <system_gclk_gen_get_hz+0x7c>)
    1b9e:	4798      	blx	r3
    1ba0:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1ba2:	4b12      	ldr	r3, [pc, #72]	; (1bec <system_gclk_gen_get_hz+0x78>)
    1ba4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1ba6:	6876      	ldr	r6, [r6, #4]
    1ba8:	02f6      	lsls	r6, r6, #11
    1baa:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1bac:	4b11      	ldr	r3, [pc, #68]	; (1bf4 <system_gclk_gen_get_hz+0x80>)
    1bae:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1bb0:	4a0c      	ldr	r2, [pc, #48]	; (1be4 <system_gclk_gen_get_hz+0x70>)
    1bb2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1bb4:	b25b      	sxtb	r3, r3
    1bb6:	2b00      	cmp	r3, #0
    1bb8:	dbfb      	blt.n	1bb2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1bba:	4b0a      	ldr	r3, [pc, #40]	; (1be4 <system_gclk_gen_get_hz+0x70>)
    1bbc:	689c      	ldr	r4, [r3, #8]
    1bbe:	0224      	lsls	r4, r4, #8
    1bc0:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1bc2:	4b0d      	ldr	r3, [pc, #52]	; (1bf8 <system_gclk_gen_get_hz+0x84>)
    1bc4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1bc6:	2e00      	cmp	r6, #0
    1bc8:	d107      	bne.n	1bda <system_gclk_gen_get_hz+0x66>
    1bca:	2c01      	cmp	r4, #1
    1bcc:	d907      	bls.n	1bde <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1bce:	0021      	movs	r1, r4
    1bd0:	0028      	movs	r0, r5
    1bd2:	4b0a      	ldr	r3, [pc, #40]	; (1bfc <system_gclk_gen_get_hz+0x88>)
    1bd4:	4798      	blx	r3
    1bd6:	0005      	movs	r5, r0
    1bd8:	e001      	b.n	1bde <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1bda:	3401      	adds	r4, #1
    1bdc:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1bde:	0028      	movs	r0, r5
    1be0:	bd70      	pop	{r4, r5, r6, pc}
    1be2:	46c0      	nop			; (mov r8, r8)
    1be4:	40000c00 	.word	0x40000c00
    1be8:	00001805 	.word	0x00001805
    1bec:	40000c04 	.word	0x40000c04
    1bf0:	00001875 	.word	0x00001875
    1bf4:	40000c08 	.word	0x40000c08
    1bf8:	00001845 	.word	0x00001845
    1bfc:	00001fc9 	.word	0x00001fc9

00001c00 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1c00:	b510      	push	{r4, lr}
    1c02:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1c04:	4b06      	ldr	r3, [pc, #24]	; (1c20 <system_gclk_chan_enable+0x20>)
    1c06:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c08:	4b06      	ldr	r3, [pc, #24]	; (1c24 <system_gclk_chan_enable+0x24>)
    1c0a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1c0c:	4a06      	ldr	r2, [pc, #24]	; (1c28 <system_gclk_chan_enable+0x28>)
    1c0e:	8853      	ldrh	r3, [r2, #2]
    1c10:	2180      	movs	r1, #128	; 0x80
    1c12:	01c9      	lsls	r1, r1, #7
    1c14:	430b      	orrs	r3, r1
    1c16:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1c18:	4b04      	ldr	r3, [pc, #16]	; (1c2c <system_gclk_chan_enable+0x2c>)
    1c1a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1c1c:	bd10      	pop	{r4, pc}
    1c1e:	46c0      	nop			; (mov r8, r8)
    1c20:	00001805 	.word	0x00001805
    1c24:	40000c02 	.word	0x40000c02
    1c28:	40000c00 	.word	0x40000c00
    1c2c:	00001845 	.word	0x00001845

00001c30 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1c30:	b510      	push	{r4, lr}
    1c32:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1c34:	4b0f      	ldr	r3, [pc, #60]	; (1c74 <system_gclk_chan_disable+0x44>)
    1c36:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c38:	4b0f      	ldr	r3, [pc, #60]	; (1c78 <system_gclk_chan_disable+0x48>)
    1c3a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1c3c:	4a0f      	ldr	r2, [pc, #60]	; (1c7c <system_gclk_chan_disable+0x4c>)
    1c3e:	8853      	ldrh	r3, [r2, #2]
    1c40:	051b      	lsls	r3, r3, #20
    1c42:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1c44:	8853      	ldrh	r3, [r2, #2]
    1c46:	490e      	ldr	r1, [pc, #56]	; (1c80 <system_gclk_chan_disable+0x50>)
    1c48:	400b      	ands	r3, r1
    1c4a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1c4c:	8853      	ldrh	r3, [r2, #2]
    1c4e:	490d      	ldr	r1, [pc, #52]	; (1c84 <system_gclk_chan_disable+0x54>)
    1c50:	400b      	ands	r3, r1
    1c52:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1c54:	0011      	movs	r1, r2
    1c56:	2280      	movs	r2, #128	; 0x80
    1c58:	01d2      	lsls	r2, r2, #7
    1c5a:	884b      	ldrh	r3, [r1, #2]
    1c5c:	4213      	tst	r3, r2
    1c5e:	d1fc      	bne.n	1c5a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1c60:	4906      	ldr	r1, [pc, #24]	; (1c7c <system_gclk_chan_disable+0x4c>)
    1c62:	884a      	ldrh	r2, [r1, #2]
    1c64:	0203      	lsls	r3, r0, #8
    1c66:	4806      	ldr	r0, [pc, #24]	; (1c80 <system_gclk_chan_disable+0x50>)
    1c68:	4002      	ands	r2, r0
    1c6a:	4313      	orrs	r3, r2
    1c6c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1c6e:	4b06      	ldr	r3, [pc, #24]	; (1c88 <system_gclk_chan_disable+0x58>)
    1c70:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1c72:	bd10      	pop	{r4, pc}
    1c74:	00001805 	.word	0x00001805
    1c78:	40000c02 	.word	0x40000c02
    1c7c:	40000c00 	.word	0x40000c00
    1c80:	fffff0ff 	.word	0xfffff0ff
    1c84:	ffffbfff 	.word	0xffffbfff
    1c88:	00001845 	.word	0x00001845

00001c8c <system_gclk_chan_set_config>:
{
    1c8c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1c8e:	780c      	ldrb	r4, [r1, #0]
    1c90:	0224      	lsls	r4, r4, #8
    1c92:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1c94:	4b02      	ldr	r3, [pc, #8]	; (1ca0 <system_gclk_chan_set_config+0x14>)
    1c96:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1c98:	b2a4      	uxth	r4, r4
    1c9a:	4b02      	ldr	r3, [pc, #8]	; (1ca4 <system_gclk_chan_set_config+0x18>)
    1c9c:	805c      	strh	r4, [r3, #2]
}
    1c9e:	bd10      	pop	{r4, pc}
    1ca0:	00001c31 	.word	0x00001c31
    1ca4:	40000c00 	.word	0x40000c00

00001ca8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1ca8:	b510      	push	{r4, lr}
    1caa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1cac:	4b06      	ldr	r3, [pc, #24]	; (1cc8 <system_gclk_chan_get_hz+0x20>)
    1cae:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1cb0:	4b06      	ldr	r3, [pc, #24]	; (1ccc <system_gclk_chan_get_hz+0x24>)
    1cb2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1cb4:	4b06      	ldr	r3, [pc, #24]	; (1cd0 <system_gclk_chan_get_hz+0x28>)
    1cb6:	885c      	ldrh	r4, [r3, #2]
    1cb8:	0524      	lsls	r4, r4, #20
    1cba:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1cbc:	4b05      	ldr	r3, [pc, #20]	; (1cd4 <system_gclk_chan_get_hz+0x2c>)
    1cbe:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1cc0:	0020      	movs	r0, r4
    1cc2:	4b05      	ldr	r3, [pc, #20]	; (1cd8 <system_gclk_chan_get_hz+0x30>)
    1cc4:	4798      	blx	r3
}
    1cc6:	bd10      	pop	{r4, pc}
    1cc8:	00001805 	.word	0x00001805
    1ccc:	40000c02 	.word	0x40000c02
    1cd0:	40000c00 	.word	0x40000c00
    1cd4:	00001845 	.word	0x00001845
    1cd8:	00001b75 	.word	0x00001b75

00001cdc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1cdc:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1cde:	78d3      	ldrb	r3, [r2, #3]
    1ce0:	2b00      	cmp	r3, #0
    1ce2:	d135      	bne.n	1d50 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1ce4:	7813      	ldrb	r3, [r2, #0]
    1ce6:	2b80      	cmp	r3, #128	; 0x80
    1ce8:	d029      	beq.n	1d3e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1cea:	061b      	lsls	r3, r3, #24
    1cec:	2480      	movs	r4, #128	; 0x80
    1cee:	0264      	lsls	r4, r4, #9
    1cf0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1cf2:	7854      	ldrb	r4, [r2, #1]
    1cf4:	2502      	movs	r5, #2
    1cf6:	43ac      	bics	r4, r5
    1cf8:	d106      	bne.n	1d08 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1cfa:	7894      	ldrb	r4, [r2, #2]
    1cfc:	2c00      	cmp	r4, #0
    1cfe:	d120      	bne.n	1d42 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1d00:	2480      	movs	r4, #128	; 0x80
    1d02:	02a4      	lsls	r4, r4, #10
    1d04:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1d06:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1d08:	7854      	ldrb	r4, [r2, #1]
    1d0a:	3c01      	subs	r4, #1
    1d0c:	2c01      	cmp	r4, #1
    1d0e:	d91c      	bls.n	1d4a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1d10:	040d      	lsls	r5, r1, #16
    1d12:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1d14:	24a0      	movs	r4, #160	; 0xa0
    1d16:	05e4      	lsls	r4, r4, #23
    1d18:	432c      	orrs	r4, r5
    1d1a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d1c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1d1e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1d20:	24d0      	movs	r4, #208	; 0xd0
    1d22:	0624      	lsls	r4, r4, #24
    1d24:	432c      	orrs	r4, r5
    1d26:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d28:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1d2a:	78d4      	ldrb	r4, [r2, #3]
    1d2c:	2c00      	cmp	r4, #0
    1d2e:	d122      	bne.n	1d76 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1d30:	035b      	lsls	r3, r3, #13
    1d32:	d51c      	bpl.n	1d6e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1d34:	7893      	ldrb	r3, [r2, #2]
    1d36:	2b01      	cmp	r3, #1
    1d38:	d01e      	beq.n	1d78 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1d3a:	6141      	str	r1, [r0, #20]
    1d3c:	e017      	b.n	1d6e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1d3e:	2300      	movs	r3, #0
    1d40:	e7d7      	b.n	1cf2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1d42:	24c0      	movs	r4, #192	; 0xc0
    1d44:	02e4      	lsls	r4, r4, #11
    1d46:	4323      	orrs	r3, r4
    1d48:	e7dd      	b.n	1d06 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1d4a:	4c0d      	ldr	r4, [pc, #52]	; (1d80 <_system_pinmux_config+0xa4>)
    1d4c:	4023      	ands	r3, r4
    1d4e:	e7df      	b.n	1d10 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1d50:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1d52:	040c      	lsls	r4, r1, #16
    1d54:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1d56:	23a0      	movs	r3, #160	; 0xa0
    1d58:	05db      	lsls	r3, r3, #23
    1d5a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d5c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1d5e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1d60:	23d0      	movs	r3, #208	; 0xd0
    1d62:	061b      	lsls	r3, r3, #24
    1d64:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d66:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1d68:	78d3      	ldrb	r3, [r2, #3]
    1d6a:	2b00      	cmp	r3, #0
    1d6c:	d103      	bne.n	1d76 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1d6e:	7853      	ldrb	r3, [r2, #1]
    1d70:	3b01      	subs	r3, #1
    1d72:	2b01      	cmp	r3, #1
    1d74:	d902      	bls.n	1d7c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1d76:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1d78:	6181      	str	r1, [r0, #24]
    1d7a:	e7f8      	b.n	1d6e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1d7c:	6081      	str	r1, [r0, #8]
}
    1d7e:	e7fa      	b.n	1d76 <_system_pinmux_config+0x9a>
    1d80:	fffbffff 	.word	0xfffbffff

00001d84 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1d84:	b510      	push	{r4, lr}
    1d86:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1d88:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1d8a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1d8c:	2900      	cmp	r1, #0
    1d8e:	d104      	bne.n	1d9a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1d90:	0943      	lsrs	r3, r0, #5
    1d92:	01db      	lsls	r3, r3, #7
    1d94:	4905      	ldr	r1, [pc, #20]	; (1dac <system_pinmux_pin_set_config+0x28>)
    1d96:	468c      	mov	ip, r1
    1d98:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1d9a:	241f      	movs	r4, #31
    1d9c:	4020      	ands	r0, r4
    1d9e:	2101      	movs	r1, #1
    1da0:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1da2:	0018      	movs	r0, r3
    1da4:	4b02      	ldr	r3, [pc, #8]	; (1db0 <system_pinmux_pin_set_config+0x2c>)
    1da6:	4798      	blx	r3
}
    1da8:	bd10      	pop	{r4, pc}
    1daa:	46c0      	nop			; (mov r8, r8)
    1dac:	41004400 	.word	0x41004400
    1db0:	00001cdd 	.word	0x00001cdd

00001db4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1db4:	4770      	bx	lr
	...

00001db8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1db8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1dba:	4b05      	ldr	r3, [pc, #20]	; (1dd0 <system_init+0x18>)
    1dbc:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1dbe:	4b05      	ldr	r3, [pc, #20]	; (1dd4 <system_init+0x1c>)
    1dc0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1dc2:	4b05      	ldr	r3, [pc, #20]	; (1dd8 <system_init+0x20>)
    1dc4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1dc6:	4b05      	ldr	r3, [pc, #20]	; (1ddc <system_init+0x24>)
    1dc8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1dca:	4b05      	ldr	r3, [pc, #20]	; (1de0 <system_init+0x28>)
    1dcc:	4798      	blx	r3
}
    1dce:	bd10      	pop	{r4, pc}
    1dd0:	000019bd 	.word	0x000019bd
    1dd4:	00001801 	.word	0x00001801
    1dd8:	00001db5 	.word	0x00001db5
    1ddc:	000001bd 	.word	0x000001bd
    1de0:	00001db5 	.word	0x00001db5

00001de4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1de4:	e7fe      	b.n	1de4 <Dummy_Handler>
	...

00001de8 <Reset_Handler>:
{
    1de8:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    1dea:	4a1a      	ldr	r2, [pc, #104]	; (1e54 <Reset_Handler+0x6c>)
    1dec:	4b1a      	ldr	r3, [pc, #104]	; (1e58 <Reset_Handler+0x70>)
    1dee:	429a      	cmp	r2, r3
    1df0:	d011      	beq.n	1e16 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1df2:	001a      	movs	r2, r3
    1df4:	4b19      	ldr	r3, [pc, #100]	; (1e5c <Reset_Handler+0x74>)
    1df6:	429a      	cmp	r2, r3
    1df8:	d20d      	bcs.n	1e16 <Reset_Handler+0x2e>
    1dfa:	4a19      	ldr	r2, [pc, #100]	; (1e60 <Reset_Handler+0x78>)
    1dfc:	3303      	adds	r3, #3
    1dfe:	1a9b      	subs	r3, r3, r2
    1e00:	089b      	lsrs	r3, r3, #2
    1e02:	3301      	adds	r3, #1
    1e04:	009b      	lsls	r3, r3, #2
    1e06:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1e08:	4813      	ldr	r0, [pc, #76]	; (1e58 <Reset_Handler+0x70>)
    1e0a:	4912      	ldr	r1, [pc, #72]	; (1e54 <Reset_Handler+0x6c>)
    1e0c:	588c      	ldr	r4, [r1, r2]
    1e0e:	5084      	str	r4, [r0, r2]
    1e10:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1e12:	429a      	cmp	r2, r3
    1e14:	d1fa      	bne.n	1e0c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1e16:	4a13      	ldr	r2, [pc, #76]	; (1e64 <Reset_Handler+0x7c>)
    1e18:	4b13      	ldr	r3, [pc, #76]	; (1e68 <Reset_Handler+0x80>)
    1e1a:	429a      	cmp	r2, r3
    1e1c:	d20a      	bcs.n	1e34 <Reset_Handler+0x4c>
    1e1e:	43d3      	mvns	r3, r2
    1e20:	4911      	ldr	r1, [pc, #68]	; (1e68 <Reset_Handler+0x80>)
    1e22:	185b      	adds	r3, r3, r1
    1e24:	2103      	movs	r1, #3
    1e26:	438b      	bics	r3, r1
    1e28:	3304      	adds	r3, #4
    1e2a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1e2c:	2100      	movs	r1, #0
    1e2e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1e30:	4293      	cmp	r3, r2
    1e32:	d1fc      	bne.n	1e2e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1e34:	4a0d      	ldr	r2, [pc, #52]	; (1e6c <Reset_Handler+0x84>)
    1e36:	21ff      	movs	r1, #255	; 0xff
    1e38:	4b0d      	ldr	r3, [pc, #52]	; (1e70 <Reset_Handler+0x88>)
    1e3a:	438b      	bics	r3, r1
    1e3c:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1e3e:	4a0d      	ldr	r2, [pc, #52]	; (1e74 <Reset_Handler+0x8c>)
    1e40:	6853      	ldr	r3, [r2, #4]
    1e42:	397f      	subs	r1, #127	; 0x7f
    1e44:	430b      	orrs	r3, r1
    1e46:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1e48:	4b0b      	ldr	r3, [pc, #44]	; (1e78 <Reset_Handler+0x90>)
    1e4a:	4798      	blx	r3
        main();
    1e4c:	4b0b      	ldr	r3, [pc, #44]	; (1e7c <Reset_Handler+0x94>)
    1e4e:	4798      	blx	r3
    1e50:	e7fe      	b.n	1e50 <Reset_Handler+0x68>
    1e52:	46c0      	nop			; (mov r8, r8)
    1e54:	00002aa4 	.word	0x00002aa4
    1e58:	20000000 	.word	0x20000000
    1e5c:	20000074 	.word	0x20000074
    1e60:	20000004 	.word	0x20000004
    1e64:	20000074 	.word	0x20000074
    1e68:	200001cc 	.word	0x200001cc
    1e6c:	e000ed00 	.word	0xe000ed00
    1e70:	00000000 	.word	0x00000000
    1e74:	41004000 	.word	0x41004000
    1e78:	00002135 	.word	0x00002135
    1e7c:	00001f5d 	.word	0x00001f5d

00001e80 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1e80:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1e82:	4a06      	ldr	r2, [pc, #24]	; (1e9c <_sbrk+0x1c>)
    1e84:	6812      	ldr	r2, [r2, #0]
    1e86:	2a00      	cmp	r2, #0
    1e88:	d004      	beq.n	1e94 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1e8a:	4a04      	ldr	r2, [pc, #16]	; (1e9c <_sbrk+0x1c>)
    1e8c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1e8e:	18c3      	adds	r3, r0, r3
    1e90:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1e92:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1e94:	4902      	ldr	r1, [pc, #8]	; (1ea0 <_sbrk+0x20>)
    1e96:	4a01      	ldr	r2, [pc, #4]	; (1e9c <_sbrk+0x1c>)
    1e98:	6011      	str	r1, [r2, #0]
    1e9a:	e7f6      	b.n	1e8a <_sbrk+0xa>
    1e9c:	200000cc 	.word	0x200000cc
    1ea0:	200021d0 	.word	0x200021d0

00001ea4 <SysTick_Handler>:
#include "main.h"

void SysTick_Handler(void)
{
	// Your code goes here
}
    1ea4:	4770      	bx	lr
	...

00001ea8 <sensorRead>:


void sensorRead(uint8_t* rd_buf)
{
    1ea8:	b510      	push	{r4, lr}
    1eaa:	0002      	movs	r2, r0
	uint8_t sensorADDR = 0x18;
	uint8_t mfgIDReg = 0x06;		
	//static uint8_t rd_buf[2] = {0};	//expected 0x0054

	i2c_Read(sensorADDR, mfgIDReg, rd_buf, 2);	
    1eac:	2302      	movs	r3, #2
    1eae:	2106      	movs	r1, #6
    1eb0:	2018      	movs	r0, #24
    1eb2:	4c03      	ldr	r4, [pc, #12]	; (1ec0 <sensorRead+0x18>)
    1eb4:	47a0      	blx	r4
	port_base->OUTTGL.reg = pin_mask;
    1eb6:	2280      	movs	r2, #128	; 0x80
    1eb8:	01d2      	lsls	r2, r2, #7
    1eba:	4b02      	ldr	r3, [pc, #8]	; (1ec4 <sensorRead+0x1c>)
    1ebc:	61da      	str	r2, [r3, #28]
	port_pin_toggle_output_level( LED_0_PIN );

}
    1ebe:	bd10      	pop	{r4, pc}
    1ec0:	00001569 	.word	0x00001569
    1ec4:	41004400 	.word	0x41004400

00001ec8 <writeBufferOut>:

void writeBufferOut(uint8_t* data)
{
    1ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1eca:	46d6      	mov	lr, sl
    1ecc:	464f      	mov	r7, r9
    1ece:	b580      	push	{r7, lr}
    1ed0:	b087      	sub	sp, #28
    1ed2:	4681      	mov	r9, r0
	uint8_t strMfgID[] = "MfgID: ";
    1ed4:	af04      	add	r7, sp, #16
    1ed6:	4b1a      	ldr	r3, [pc, #104]	; (1f40 <writeBufferOut+0x78>)
    1ed8:	003a      	movs	r2, r7
    1eda:	cb03      	ldmia	r3!, {r0, r1}
    1edc:	c203      	stmia	r2!, {r0, r1}
	uint8_t tst_buffer[8] = {0x0E};
    1ede:	ac02      	add	r4, sp, #8
    1ee0:	2208      	movs	r2, #8
    1ee2:	2100      	movs	r1, #0
    1ee4:	0020      	movs	r0, r4
    1ee6:	4b17      	ldr	r3, [pc, #92]	; (1f44 <writeBufferOut+0x7c>)
    1ee8:	4798      	blx	r3
    1eea:	230e      	movs	r3, #14
    1eec:	7023      	strb	r3, [r4, #0]
	uint8_t strNewLine[] = "\r\n";
    1eee:	ae01      	add	r6, sp, #4
    1ef0:	4b15      	ldr	r3, [pc, #84]	; (1f48 <writeBufferOut+0x80>)
    1ef2:	881a      	ldrh	r2, [r3, #0]
    1ef4:	8032      	strh	r2, [r6, #0]
    1ef6:	789b      	ldrb	r3, [r3, #2]
    1ef8:	70b3      	strb	r3, [r6, #2]
	
	usart_write_buffer_wait(&usart_instance, strMfgID, sizeof(strMfgID));
    1efa:	4d14      	ldr	r5, [pc, #80]	; (1f4c <writeBufferOut+0x84>)
    1efc:	2208      	movs	r2, #8
    1efe:	0039      	movs	r1, r7
    1f00:	0028      	movs	r0, r5
    1f02:	4f13      	ldr	r7, [pc, #76]	; (1f50 <writeBufferOut+0x88>)
    1f04:	47b8      	blx	r7

	sprintf(tst_buffer, "%02X", *data);
    1f06:	464b      	mov	r3, r9
    1f08:	781a      	ldrb	r2, [r3, #0]
    1f0a:	4912      	ldr	r1, [pc, #72]	; (1f54 <writeBufferOut+0x8c>)
    1f0c:	0020      	movs	r0, r4
    1f0e:	4b12      	ldr	r3, [pc, #72]	; (1f58 <writeBufferOut+0x90>)
    1f10:	469a      	mov	sl, r3
    1f12:	4798      	blx	r3
	usart_write_buffer_wait(&usart_instance, &tst_buffer, 2);
    1f14:	2202      	movs	r2, #2
    1f16:	0021      	movs	r1, r4
    1f18:	0028      	movs	r0, r5
    1f1a:	47b8      	blx	r7
	sprintf(tst_buffer, "%02X", *(data+1));
    1f1c:	464b      	mov	r3, r9
    1f1e:	785a      	ldrb	r2, [r3, #1]
    1f20:	490c      	ldr	r1, [pc, #48]	; (1f54 <writeBufferOut+0x8c>)
    1f22:	0020      	movs	r0, r4
    1f24:	47d0      	blx	sl
	usart_write_buffer_wait(&usart_instance, &tst_buffer, 2);
    1f26:	2202      	movs	r2, #2
    1f28:	0021      	movs	r1, r4
    1f2a:	0028      	movs	r0, r5
    1f2c:	47b8      	blx	r7
	usart_write_buffer_wait(&usart_instance, strNewLine, sizeof(strNewLine));
    1f2e:	2203      	movs	r2, #3
    1f30:	0031      	movs	r1, r6
    1f32:	0028      	movs	r0, r5
    1f34:	47b8      	blx	r7
}
    1f36:	b007      	add	sp, #28
    1f38:	bc0c      	pop	{r2, r3}
    1f3a:	4691      	mov	r9, r2
    1f3c:	469a      	mov	sl, r3
    1f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f40:	00002a48 	.word	0x00002a48
    1f44:	0000217d 	.word	0x0000217d
    1f48:	000029f0 	.word	0x000029f0
    1f4c:	20000140 	.word	0x20000140
    1f50:	00000f89 	.word	0x00000f89
    1f54:	00002a40 	.word	0x00002a40
    1f58:	0000218d 	.word	0x0000218d

00001f5c <main>:
port_pin_toggle_output_level( LED_STOP_RED_PIN );

}

int main(void)
{
    1f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f5e:	b083      	sub	sp, #12
	system_init();
    1f60:	4b11      	ldr	r3, [pc, #68]	; (1fa8 <main+0x4c>)
    1f62:	4798      	blx	r3
	config_board();
    1f64:	4b11      	ldr	r3, [pc, #68]	; (1fac <main+0x50>)
    1f66:	4798      	blx	r3

	usart_Hello();
    1f68:	4b11      	ldr	r3, [pc, #68]	; (1fb0 <main+0x54>)
    1f6a:	4798      	blx	r3
	//uint8_t wr_buffer[I2C_DATA_LENGTH] = {0xAA};
	//uint8_t rd_buffer[I2C_DATA_LENGTH] = {0};
	
	uint8_t sensorADDR = 0x18;
	uint8_t cfgReg = 0x01;	
	uint8_t	wr_buffer[1] = {0xE0};		
    1f6c:	22e0      	movs	r2, #224	; 0xe0
    1f6e:	ab01      	add	r3, sp, #4
    1f70:	701a      	strb	r2, [r3, #0]
	uint8_t rd_buffer[2] = {0xAA};
    1f72:	2300      	movs	r3, #0
    1f74:	466a      	mov	r2, sp
    1f76:	8013      	strh	r3, [r2, #0]
    1f78:	33aa      	adds	r3, #170	; 0xaa
    1f7a:	7013      	strb	r3, [r2, #0]
		//delay_ms(100);

		//In Terminal, echo every 5 characters typed forever and toggle LED0
		//usart_Echo();

		sensorRead(rd_buffer);
    1f7c:	4f0d      	ldr	r7, [pc, #52]	; (1fb4 <main+0x58>)
		writeBufferOut(rd_buffer);
    1f7e:	4e0e      	ldr	r6, [pc, #56]	; (1fb8 <main+0x5c>)

		//writeBufferOut();
		delay_ms(100);
    1f80:	4c0e      	ldr	r4, [pc, #56]	; (1fbc <main+0x60>)
		sensorRead(rd_buffer);
    1f82:	4668      	mov	r0, sp
    1f84:	47b8      	blx	r7
		writeBufferOut(rd_buffer);
    1f86:	4668      	mov	r0, sp
    1f88:	47b0      	blx	r6
		delay_ms(100);
    1f8a:	2064      	movs	r0, #100	; 0x64
    1f8c:	47a0      	blx	r4

		i2c_Write(sensorADDR, cfgReg, wr_buffer, 1);
    1f8e:	2301      	movs	r3, #1
    1f90:	aa01      	add	r2, sp, #4
    1f92:	2101      	movs	r1, #1
    1f94:	2018      	movs	r0, #24
    1f96:	4d0a      	ldr	r5, [pc, #40]	; (1fc0 <main+0x64>)
    1f98:	47a8      	blx	r5
    1f9a:	2280      	movs	r2, #128	; 0x80
    1f9c:	01d2      	lsls	r2, r2, #7
    1f9e:	4b09      	ldr	r3, [pc, #36]	; (1fc4 <main+0x68>)
    1fa0:	61da      	str	r2, [r3, #28]
		port_pin_toggle_output_level( LED_0_PIN );
		delay_ms(100);
    1fa2:	2064      	movs	r0, #100	; 0x64
    1fa4:	47a0      	blx	r4
    1fa6:	e7ec      	b.n	1f82 <main+0x26>
    1fa8:	00001db9 	.word	0x00001db9
    1fac:	00001769 	.word	0x00001769
    1fb0:	00001401 	.word	0x00001401
    1fb4:	00001ea9 	.word	0x00001ea9
    1fb8:	00001ec9 	.word	0x00001ec9
    1fbc:	0000162d 	.word	0x0000162d
    1fc0:	000014f1 	.word	0x000014f1
    1fc4:	41004400 	.word	0x41004400

00001fc8 <__udivsi3>:
    1fc8:	2200      	movs	r2, #0
    1fca:	0843      	lsrs	r3, r0, #1
    1fcc:	428b      	cmp	r3, r1
    1fce:	d374      	bcc.n	20ba <STACK_SIZE+0xba>
    1fd0:	0903      	lsrs	r3, r0, #4
    1fd2:	428b      	cmp	r3, r1
    1fd4:	d35f      	bcc.n	2096 <STACK_SIZE+0x96>
    1fd6:	0a03      	lsrs	r3, r0, #8
    1fd8:	428b      	cmp	r3, r1
    1fda:	d344      	bcc.n	2066 <STACK_SIZE+0x66>
    1fdc:	0b03      	lsrs	r3, r0, #12
    1fde:	428b      	cmp	r3, r1
    1fe0:	d328      	bcc.n	2034 <STACK_SIZE+0x34>
    1fe2:	0c03      	lsrs	r3, r0, #16
    1fe4:	428b      	cmp	r3, r1
    1fe6:	d30d      	bcc.n	2004 <STACK_SIZE+0x4>
    1fe8:	22ff      	movs	r2, #255	; 0xff
    1fea:	0209      	lsls	r1, r1, #8
    1fec:	ba12      	rev	r2, r2
    1fee:	0c03      	lsrs	r3, r0, #16
    1ff0:	428b      	cmp	r3, r1
    1ff2:	d302      	bcc.n	1ffa <__udivsi3+0x32>
    1ff4:	1212      	asrs	r2, r2, #8
    1ff6:	0209      	lsls	r1, r1, #8
    1ff8:	d065      	beq.n	20c6 <STACK_SIZE+0xc6>
    1ffa:	0b03      	lsrs	r3, r0, #12
    1ffc:	428b      	cmp	r3, r1
    1ffe:	d319      	bcc.n	2034 <STACK_SIZE+0x34>
    2000:	e000      	b.n	2004 <STACK_SIZE+0x4>
    2002:	0a09      	lsrs	r1, r1, #8
    2004:	0bc3      	lsrs	r3, r0, #15
    2006:	428b      	cmp	r3, r1
    2008:	d301      	bcc.n	200e <STACK_SIZE+0xe>
    200a:	03cb      	lsls	r3, r1, #15
    200c:	1ac0      	subs	r0, r0, r3
    200e:	4152      	adcs	r2, r2
    2010:	0b83      	lsrs	r3, r0, #14
    2012:	428b      	cmp	r3, r1
    2014:	d301      	bcc.n	201a <STACK_SIZE+0x1a>
    2016:	038b      	lsls	r3, r1, #14
    2018:	1ac0      	subs	r0, r0, r3
    201a:	4152      	adcs	r2, r2
    201c:	0b43      	lsrs	r3, r0, #13
    201e:	428b      	cmp	r3, r1
    2020:	d301      	bcc.n	2026 <STACK_SIZE+0x26>
    2022:	034b      	lsls	r3, r1, #13
    2024:	1ac0      	subs	r0, r0, r3
    2026:	4152      	adcs	r2, r2
    2028:	0b03      	lsrs	r3, r0, #12
    202a:	428b      	cmp	r3, r1
    202c:	d301      	bcc.n	2032 <STACK_SIZE+0x32>
    202e:	030b      	lsls	r3, r1, #12
    2030:	1ac0      	subs	r0, r0, r3
    2032:	4152      	adcs	r2, r2
    2034:	0ac3      	lsrs	r3, r0, #11
    2036:	428b      	cmp	r3, r1
    2038:	d301      	bcc.n	203e <STACK_SIZE+0x3e>
    203a:	02cb      	lsls	r3, r1, #11
    203c:	1ac0      	subs	r0, r0, r3
    203e:	4152      	adcs	r2, r2
    2040:	0a83      	lsrs	r3, r0, #10
    2042:	428b      	cmp	r3, r1
    2044:	d301      	bcc.n	204a <STACK_SIZE+0x4a>
    2046:	028b      	lsls	r3, r1, #10
    2048:	1ac0      	subs	r0, r0, r3
    204a:	4152      	adcs	r2, r2
    204c:	0a43      	lsrs	r3, r0, #9
    204e:	428b      	cmp	r3, r1
    2050:	d301      	bcc.n	2056 <STACK_SIZE+0x56>
    2052:	024b      	lsls	r3, r1, #9
    2054:	1ac0      	subs	r0, r0, r3
    2056:	4152      	adcs	r2, r2
    2058:	0a03      	lsrs	r3, r0, #8
    205a:	428b      	cmp	r3, r1
    205c:	d301      	bcc.n	2062 <STACK_SIZE+0x62>
    205e:	020b      	lsls	r3, r1, #8
    2060:	1ac0      	subs	r0, r0, r3
    2062:	4152      	adcs	r2, r2
    2064:	d2cd      	bcs.n	2002 <STACK_SIZE+0x2>
    2066:	09c3      	lsrs	r3, r0, #7
    2068:	428b      	cmp	r3, r1
    206a:	d301      	bcc.n	2070 <STACK_SIZE+0x70>
    206c:	01cb      	lsls	r3, r1, #7
    206e:	1ac0      	subs	r0, r0, r3
    2070:	4152      	adcs	r2, r2
    2072:	0983      	lsrs	r3, r0, #6
    2074:	428b      	cmp	r3, r1
    2076:	d301      	bcc.n	207c <STACK_SIZE+0x7c>
    2078:	018b      	lsls	r3, r1, #6
    207a:	1ac0      	subs	r0, r0, r3
    207c:	4152      	adcs	r2, r2
    207e:	0943      	lsrs	r3, r0, #5
    2080:	428b      	cmp	r3, r1
    2082:	d301      	bcc.n	2088 <STACK_SIZE+0x88>
    2084:	014b      	lsls	r3, r1, #5
    2086:	1ac0      	subs	r0, r0, r3
    2088:	4152      	adcs	r2, r2
    208a:	0903      	lsrs	r3, r0, #4
    208c:	428b      	cmp	r3, r1
    208e:	d301      	bcc.n	2094 <STACK_SIZE+0x94>
    2090:	010b      	lsls	r3, r1, #4
    2092:	1ac0      	subs	r0, r0, r3
    2094:	4152      	adcs	r2, r2
    2096:	08c3      	lsrs	r3, r0, #3
    2098:	428b      	cmp	r3, r1
    209a:	d301      	bcc.n	20a0 <STACK_SIZE+0xa0>
    209c:	00cb      	lsls	r3, r1, #3
    209e:	1ac0      	subs	r0, r0, r3
    20a0:	4152      	adcs	r2, r2
    20a2:	0883      	lsrs	r3, r0, #2
    20a4:	428b      	cmp	r3, r1
    20a6:	d301      	bcc.n	20ac <STACK_SIZE+0xac>
    20a8:	008b      	lsls	r3, r1, #2
    20aa:	1ac0      	subs	r0, r0, r3
    20ac:	4152      	adcs	r2, r2
    20ae:	0843      	lsrs	r3, r0, #1
    20b0:	428b      	cmp	r3, r1
    20b2:	d301      	bcc.n	20b8 <STACK_SIZE+0xb8>
    20b4:	004b      	lsls	r3, r1, #1
    20b6:	1ac0      	subs	r0, r0, r3
    20b8:	4152      	adcs	r2, r2
    20ba:	1a41      	subs	r1, r0, r1
    20bc:	d200      	bcs.n	20c0 <STACK_SIZE+0xc0>
    20be:	4601      	mov	r1, r0
    20c0:	4152      	adcs	r2, r2
    20c2:	4610      	mov	r0, r2
    20c4:	4770      	bx	lr
    20c6:	e7ff      	b.n	20c8 <STACK_SIZE+0xc8>
    20c8:	b501      	push	{r0, lr}
    20ca:	2000      	movs	r0, #0
    20cc:	f000 f806 	bl	20dc <__aeabi_idiv0>
    20d0:	bd02      	pop	{r1, pc}
    20d2:	46c0      	nop			; (mov r8, r8)

000020d4 <__aeabi_uidivmod>:
    20d4:	2900      	cmp	r1, #0
    20d6:	d0f7      	beq.n	20c8 <STACK_SIZE+0xc8>
    20d8:	e776      	b.n	1fc8 <__udivsi3>
    20da:	4770      	bx	lr

000020dc <__aeabi_idiv0>:
    20dc:	4770      	bx	lr
    20de:	46c0      	nop			; (mov r8, r8)

000020e0 <__aeabi_lmul>:
    20e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    20e2:	46ce      	mov	lr, r9
    20e4:	4647      	mov	r7, r8
    20e6:	0415      	lsls	r5, r2, #16
    20e8:	0c2d      	lsrs	r5, r5, #16
    20ea:	002e      	movs	r6, r5
    20ec:	b580      	push	{r7, lr}
    20ee:	0407      	lsls	r7, r0, #16
    20f0:	0c14      	lsrs	r4, r2, #16
    20f2:	0c3f      	lsrs	r7, r7, #16
    20f4:	4699      	mov	r9, r3
    20f6:	0c03      	lsrs	r3, r0, #16
    20f8:	437e      	muls	r6, r7
    20fa:	435d      	muls	r5, r3
    20fc:	4367      	muls	r7, r4
    20fe:	4363      	muls	r3, r4
    2100:	197f      	adds	r7, r7, r5
    2102:	0c34      	lsrs	r4, r6, #16
    2104:	19e4      	adds	r4, r4, r7
    2106:	469c      	mov	ip, r3
    2108:	42a5      	cmp	r5, r4
    210a:	d903      	bls.n	2114 <__aeabi_lmul+0x34>
    210c:	2380      	movs	r3, #128	; 0x80
    210e:	025b      	lsls	r3, r3, #9
    2110:	4698      	mov	r8, r3
    2112:	44c4      	add	ip, r8
    2114:	464b      	mov	r3, r9
    2116:	4351      	muls	r1, r2
    2118:	4343      	muls	r3, r0
    211a:	0436      	lsls	r6, r6, #16
    211c:	0c36      	lsrs	r6, r6, #16
    211e:	0c25      	lsrs	r5, r4, #16
    2120:	0424      	lsls	r4, r4, #16
    2122:	4465      	add	r5, ip
    2124:	19a4      	adds	r4, r4, r6
    2126:	1859      	adds	r1, r3, r1
    2128:	1949      	adds	r1, r1, r5
    212a:	0020      	movs	r0, r4
    212c:	bc0c      	pop	{r2, r3}
    212e:	4690      	mov	r8, r2
    2130:	4699      	mov	r9, r3
    2132:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002134 <__libc_init_array>:
    2134:	b570      	push	{r4, r5, r6, lr}
    2136:	2600      	movs	r6, #0
    2138:	4d0c      	ldr	r5, [pc, #48]	; (216c <__libc_init_array+0x38>)
    213a:	4c0d      	ldr	r4, [pc, #52]	; (2170 <__libc_init_array+0x3c>)
    213c:	1b64      	subs	r4, r4, r5
    213e:	10a4      	asrs	r4, r4, #2
    2140:	42a6      	cmp	r6, r4
    2142:	d109      	bne.n	2158 <__libc_init_array+0x24>
    2144:	2600      	movs	r6, #0
    2146:	f000 fc9d 	bl	2a84 <_init>
    214a:	4d0a      	ldr	r5, [pc, #40]	; (2174 <__libc_init_array+0x40>)
    214c:	4c0a      	ldr	r4, [pc, #40]	; (2178 <__libc_init_array+0x44>)
    214e:	1b64      	subs	r4, r4, r5
    2150:	10a4      	asrs	r4, r4, #2
    2152:	42a6      	cmp	r6, r4
    2154:	d105      	bne.n	2162 <__libc_init_array+0x2e>
    2156:	bd70      	pop	{r4, r5, r6, pc}
    2158:	00b3      	lsls	r3, r6, #2
    215a:	58eb      	ldr	r3, [r5, r3]
    215c:	4798      	blx	r3
    215e:	3601      	adds	r6, #1
    2160:	e7ee      	b.n	2140 <__libc_init_array+0xc>
    2162:	00b3      	lsls	r3, r6, #2
    2164:	58eb      	ldr	r3, [r5, r3]
    2166:	4798      	blx	r3
    2168:	3601      	adds	r6, #1
    216a:	e7f2      	b.n	2152 <__libc_init_array+0x1e>
    216c:	00002a90 	.word	0x00002a90
    2170:	00002a90 	.word	0x00002a90
    2174:	00002a90 	.word	0x00002a90
    2178:	00002a94 	.word	0x00002a94

0000217c <memset>:
    217c:	0003      	movs	r3, r0
    217e:	1882      	adds	r2, r0, r2
    2180:	4293      	cmp	r3, r2
    2182:	d100      	bne.n	2186 <memset+0xa>
    2184:	4770      	bx	lr
    2186:	7019      	strb	r1, [r3, #0]
    2188:	3301      	adds	r3, #1
    218a:	e7f9      	b.n	2180 <memset+0x4>

0000218c <siprintf>:
    218c:	b40e      	push	{r1, r2, r3}
    218e:	b510      	push	{r4, lr}
    2190:	b09d      	sub	sp, #116	; 0x74
    2192:	a902      	add	r1, sp, #8
    2194:	9002      	str	r0, [sp, #8]
    2196:	6108      	str	r0, [r1, #16]
    2198:	480b      	ldr	r0, [pc, #44]	; (21c8 <siprintf+0x3c>)
    219a:	2482      	movs	r4, #130	; 0x82
    219c:	6088      	str	r0, [r1, #8]
    219e:	6148      	str	r0, [r1, #20]
    21a0:	2001      	movs	r0, #1
    21a2:	4240      	negs	r0, r0
    21a4:	ab1f      	add	r3, sp, #124	; 0x7c
    21a6:	81c8      	strh	r0, [r1, #14]
    21a8:	4808      	ldr	r0, [pc, #32]	; (21cc <siprintf+0x40>)
    21aa:	cb04      	ldmia	r3!, {r2}
    21ac:	00a4      	lsls	r4, r4, #2
    21ae:	6800      	ldr	r0, [r0, #0]
    21b0:	9301      	str	r3, [sp, #4]
    21b2:	818c      	strh	r4, [r1, #12]
    21b4:	f000 f86e 	bl	2294 <_svfiprintf_r>
    21b8:	2300      	movs	r3, #0
    21ba:	9a02      	ldr	r2, [sp, #8]
    21bc:	7013      	strb	r3, [r2, #0]
    21be:	b01d      	add	sp, #116	; 0x74
    21c0:	bc10      	pop	{r4}
    21c2:	bc08      	pop	{r3}
    21c4:	b003      	add	sp, #12
    21c6:	4718      	bx	r3
    21c8:	7fffffff 	.word	0x7fffffff
    21cc:	20000010 	.word	0x20000010

000021d0 <__ssputs_r>:
    21d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    21d2:	688e      	ldr	r6, [r1, #8]
    21d4:	b085      	sub	sp, #20
    21d6:	0007      	movs	r7, r0
    21d8:	000c      	movs	r4, r1
    21da:	9203      	str	r2, [sp, #12]
    21dc:	9301      	str	r3, [sp, #4]
    21de:	429e      	cmp	r6, r3
    21e0:	d839      	bhi.n	2256 <__ssputs_r+0x86>
    21e2:	2390      	movs	r3, #144	; 0x90
    21e4:	898a      	ldrh	r2, [r1, #12]
    21e6:	00db      	lsls	r3, r3, #3
    21e8:	421a      	tst	r2, r3
    21ea:	d034      	beq.n	2256 <__ssputs_r+0x86>
    21ec:	2503      	movs	r5, #3
    21ee:	6909      	ldr	r1, [r1, #16]
    21f0:	6823      	ldr	r3, [r4, #0]
    21f2:	1a5b      	subs	r3, r3, r1
    21f4:	9302      	str	r3, [sp, #8]
    21f6:	6963      	ldr	r3, [r4, #20]
    21f8:	9802      	ldr	r0, [sp, #8]
    21fa:	435d      	muls	r5, r3
    21fc:	0feb      	lsrs	r3, r5, #31
    21fe:	195d      	adds	r5, r3, r5
    2200:	9b01      	ldr	r3, [sp, #4]
    2202:	106d      	asrs	r5, r5, #1
    2204:	3301      	adds	r3, #1
    2206:	181b      	adds	r3, r3, r0
    2208:	42ab      	cmp	r3, r5
    220a:	d900      	bls.n	220e <__ssputs_r+0x3e>
    220c:	001d      	movs	r5, r3
    220e:	0553      	lsls	r3, r2, #21
    2210:	d532      	bpl.n	2278 <__ssputs_r+0xa8>
    2212:	0029      	movs	r1, r5
    2214:	0038      	movs	r0, r7
    2216:	f000 fb39 	bl	288c <_malloc_r>
    221a:	1e06      	subs	r6, r0, #0
    221c:	d109      	bne.n	2232 <__ssputs_r+0x62>
    221e:	230c      	movs	r3, #12
    2220:	603b      	str	r3, [r7, #0]
    2222:	2340      	movs	r3, #64	; 0x40
    2224:	2001      	movs	r0, #1
    2226:	89a2      	ldrh	r2, [r4, #12]
    2228:	4240      	negs	r0, r0
    222a:	4313      	orrs	r3, r2
    222c:	81a3      	strh	r3, [r4, #12]
    222e:	b005      	add	sp, #20
    2230:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2232:	9a02      	ldr	r2, [sp, #8]
    2234:	6921      	ldr	r1, [r4, #16]
    2236:	f000 fac4 	bl	27c2 <memcpy>
    223a:	89a3      	ldrh	r3, [r4, #12]
    223c:	4a14      	ldr	r2, [pc, #80]	; (2290 <__ssputs_r+0xc0>)
    223e:	401a      	ands	r2, r3
    2240:	2380      	movs	r3, #128	; 0x80
    2242:	4313      	orrs	r3, r2
    2244:	81a3      	strh	r3, [r4, #12]
    2246:	9b02      	ldr	r3, [sp, #8]
    2248:	6126      	str	r6, [r4, #16]
    224a:	18f6      	adds	r6, r6, r3
    224c:	6026      	str	r6, [r4, #0]
    224e:	6165      	str	r5, [r4, #20]
    2250:	9e01      	ldr	r6, [sp, #4]
    2252:	1aed      	subs	r5, r5, r3
    2254:	60a5      	str	r5, [r4, #8]
    2256:	9b01      	ldr	r3, [sp, #4]
    2258:	42b3      	cmp	r3, r6
    225a:	d200      	bcs.n	225e <__ssputs_r+0x8e>
    225c:	001e      	movs	r6, r3
    225e:	0032      	movs	r2, r6
    2260:	9903      	ldr	r1, [sp, #12]
    2262:	6820      	ldr	r0, [r4, #0]
    2264:	f000 fab6 	bl	27d4 <memmove>
    2268:	68a3      	ldr	r3, [r4, #8]
    226a:	2000      	movs	r0, #0
    226c:	1b9b      	subs	r3, r3, r6
    226e:	60a3      	str	r3, [r4, #8]
    2270:	6823      	ldr	r3, [r4, #0]
    2272:	199e      	adds	r6, r3, r6
    2274:	6026      	str	r6, [r4, #0]
    2276:	e7da      	b.n	222e <__ssputs_r+0x5e>
    2278:	002a      	movs	r2, r5
    227a:	0038      	movs	r0, r7
    227c:	f000 fb64 	bl	2948 <_realloc_r>
    2280:	1e06      	subs	r6, r0, #0
    2282:	d1e0      	bne.n	2246 <__ssputs_r+0x76>
    2284:	6921      	ldr	r1, [r4, #16]
    2286:	0038      	movs	r0, r7
    2288:	f000 fab6 	bl	27f8 <_free_r>
    228c:	e7c7      	b.n	221e <__ssputs_r+0x4e>
    228e:	46c0      	nop			; (mov r8, r8)
    2290:	fffffb7f 	.word	0xfffffb7f

00002294 <_svfiprintf_r>:
    2294:	b5f0      	push	{r4, r5, r6, r7, lr}
    2296:	b09f      	sub	sp, #124	; 0x7c
    2298:	9002      	str	r0, [sp, #8]
    229a:	9305      	str	r3, [sp, #20]
    229c:	898b      	ldrh	r3, [r1, #12]
    229e:	000f      	movs	r7, r1
    22a0:	0016      	movs	r6, r2
    22a2:	061b      	lsls	r3, r3, #24
    22a4:	d511      	bpl.n	22ca <_svfiprintf_r+0x36>
    22a6:	690b      	ldr	r3, [r1, #16]
    22a8:	2b00      	cmp	r3, #0
    22aa:	d10e      	bne.n	22ca <_svfiprintf_r+0x36>
    22ac:	2140      	movs	r1, #64	; 0x40
    22ae:	f000 faed 	bl	288c <_malloc_r>
    22b2:	6038      	str	r0, [r7, #0]
    22b4:	6138      	str	r0, [r7, #16]
    22b6:	2800      	cmp	r0, #0
    22b8:	d105      	bne.n	22c6 <_svfiprintf_r+0x32>
    22ba:	230c      	movs	r3, #12
    22bc:	9a02      	ldr	r2, [sp, #8]
    22be:	3801      	subs	r0, #1
    22c0:	6013      	str	r3, [r2, #0]
    22c2:	b01f      	add	sp, #124	; 0x7c
    22c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22c6:	2340      	movs	r3, #64	; 0x40
    22c8:	617b      	str	r3, [r7, #20]
    22ca:	2300      	movs	r3, #0
    22cc:	ad06      	add	r5, sp, #24
    22ce:	616b      	str	r3, [r5, #20]
    22d0:	3320      	adds	r3, #32
    22d2:	766b      	strb	r3, [r5, #25]
    22d4:	3310      	adds	r3, #16
    22d6:	76ab      	strb	r3, [r5, #26]
    22d8:	0034      	movs	r4, r6
    22da:	7823      	ldrb	r3, [r4, #0]
    22dc:	2b00      	cmp	r3, #0
    22de:	d147      	bne.n	2370 <_svfiprintf_r+0xdc>
    22e0:	1ba3      	subs	r3, r4, r6
    22e2:	9304      	str	r3, [sp, #16]
    22e4:	d00d      	beq.n	2302 <_svfiprintf_r+0x6e>
    22e6:	1ba3      	subs	r3, r4, r6
    22e8:	0032      	movs	r2, r6
    22ea:	0039      	movs	r1, r7
    22ec:	9802      	ldr	r0, [sp, #8]
    22ee:	f7ff ff6f 	bl	21d0 <__ssputs_r>
    22f2:	1c43      	adds	r3, r0, #1
    22f4:	d100      	bne.n	22f8 <_svfiprintf_r+0x64>
    22f6:	e0b5      	b.n	2464 <_svfiprintf_r+0x1d0>
    22f8:	696a      	ldr	r2, [r5, #20]
    22fa:	9b04      	ldr	r3, [sp, #16]
    22fc:	4694      	mov	ip, r2
    22fe:	4463      	add	r3, ip
    2300:	616b      	str	r3, [r5, #20]
    2302:	7823      	ldrb	r3, [r4, #0]
    2304:	2b00      	cmp	r3, #0
    2306:	d100      	bne.n	230a <_svfiprintf_r+0x76>
    2308:	e0ac      	b.n	2464 <_svfiprintf_r+0x1d0>
    230a:	2201      	movs	r2, #1
    230c:	2300      	movs	r3, #0
    230e:	4252      	negs	r2, r2
    2310:	606a      	str	r2, [r5, #4]
    2312:	a902      	add	r1, sp, #8
    2314:	3254      	adds	r2, #84	; 0x54
    2316:	1852      	adds	r2, r2, r1
    2318:	3401      	adds	r4, #1
    231a:	602b      	str	r3, [r5, #0]
    231c:	60eb      	str	r3, [r5, #12]
    231e:	60ab      	str	r3, [r5, #8]
    2320:	7013      	strb	r3, [r2, #0]
    2322:	65ab      	str	r3, [r5, #88]	; 0x58
    2324:	4e58      	ldr	r6, [pc, #352]	; (2488 <_svfiprintf_r+0x1f4>)
    2326:	2205      	movs	r2, #5
    2328:	7821      	ldrb	r1, [r4, #0]
    232a:	0030      	movs	r0, r6
    232c:	f000 fa3e 	bl	27ac <memchr>
    2330:	1c62      	adds	r2, r4, #1
    2332:	2800      	cmp	r0, #0
    2334:	d120      	bne.n	2378 <_svfiprintf_r+0xe4>
    2336:	6829      	ldr	r1, [r5, #0]
    2338:	06cb      	lsls	r3, r1, #27
    233a:	d504      	bpl.n	2346 <_svfiprintf_r+0xb2>
    233c:	2353      	movs	r3, #83	; 0x53
    233e:	ae02      	add	r6, sp, #8
    2340:	3020      	adds	r0, #32
    2342:	199b      	adds	r3, r3, r6
    2344:	7018      	strb	r0, [r3, #0]
    2346:	070b      	lsls	r3, r1, #28
    2348:	d504      	bpl.n	2354 <_svfiprintf_r+0xc0>
    234a:	2353      	movs	r3, #83	; 0x53
    234c:	202b      	movs	r0, #43	; 0x2b
    234e:	ae02      	add	r6, sp, #8
    2350:	199b      	adds	r3, r3, r6
    2352:	7018      	strb	r0, [r3, #0]
    2354:	7823      	ldrb	r3, [r4, #0]
    2356:	2b2a      	cmp	r3, #42	; 0x2a
    2358:	d016      	beq.n	2388 <_svfiprintf_r+0xf4>
    235a:	2000      	movs	r0, #0
    235c:	210a      	movs	r1, #10
    235e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2360:	7822      	ldrb	r2, [r4, #0]
    2362:	3a30      	subs	r2, #48	; 0x30
    2364:	2a09      	cmp	r2, #9
    2366:	d955      	bls.n	2414 <_svfiprintf_r+0x180>
    2368:	2800      	cmp	r0, #0
    236a:	d015      	beq.n	2398 <_svfiprintf_r+0x104>
    236c:	9309      	str	r3, [sp, #36]	; 0x24
    236e:	e013      	b.n	2398 <_svfiprintf_r+0x104>
    2370:	2b25      	cmp	r3, #37	; 0x25
    2372:	d0b5      	beq.n	22e0 <_svfiprintf_r+0x4c>
    2374:	3401      	adds	r4, #1
    2376:	e7b0      	b.n	22da <_svfiprintf_r+0x46>
    2378:	2301      	movs	r3, #1
    237a:	1b80      	subs	r0, r0, r6
    237c:	4083      	lsls	r3, r0
    237e:	6829      	ldr	r1, [r5, #0]
    2380:	0014      	movs	r4, r2
    2382:	430b      	orrs	r3, r1
    2384:	602b      	str	r3, [r5, #0]
    2386:	e7cd      	b.n	2324 <_svfiprintf_r+0x90>
    2388:	9b05      	ldr	r3, [sp, #20]
    238a:	1d18      	adds	r0, r3, #4
    238c:	681b      	ldr	r3, [r3, #0]
    238e:	9005      	str	r0, [sp, #20]
    2390:	2b00      	cmp	r3, #0
    2392:	db39      	blt.n	2408 <_svfiprintf_r+0x174>
    2394:	9309      	str	r3, [sp, #36]	; 0x24
    2396:	0014      	movs	r4, r2
    2398:	7823      	ldrb	r3, [r4, #0]
    239a:	2b2e      	cmp	r3, #46	; 0x2e
    239c:	d10b      	bne.n	23b6 <_svfiprintf_r+0x122>
    239e:	7863      	ldrb	r3, [r4, #1]
    23a0:	1c62      	adds	r2, r4, #1
    23a2:	2b2a      	cmp	r3, #42	; 0x2a
    23a4:	d13e      	bne.n	2424 <_svfiprintf_r+0x190>
    23a6:	9b05      	ldr	r3, [sp, #20]
    23a8:	3402      	adds	r4, #2
    23aa:	1d1a      	adds	r2, r3, #4
    23ac:	681b      	ldr	r3, [r3, #0]
    23ae:	9205      	str	r2, [sp, #20]
    23b0:	2b00      	cmp	r3, #0
    23b2:	db34      	blt.n	241e <_svfiprintf_r+0x18a>
    23b4:	9307      	str	r3, [sp, #28]
    23b6:	4e35      	ldr	r6, [pc, #212]	; (248c <_svfiprintf_r+0x1f8>)
    23b8:	7821      	ldrb	r1, [r4, #0]
    23ba:	2203      	movs	r2, #3
    23bc:	0030      	movs	r0, r6
    23be:	f000 f9f5 	bl	27ac <memchr>
    23c2:	2800      	cmp	r0, #0
    23c4:	d006      	beq.n	23d4 <_svfiprintf_r+0x140>
    23c6:	2340      	movs	r3, #64	; 0x40
    23c8:	1b80      	subs	r0, r0, r6
    23ca:	4083      	lsls	r3, r0
    23cc:	682a      	ldr	r2, [r5, #0]
    23ce:	3401      	adds	r4, #1
    23d0:	4313      	orrs	r3, r2
    23d2:	602b      	str	r3, [r5, #0]
    23d4:	7821      	ldrb	r1, [r4, #0]
    23d6:	2206      	movs	r2, #6
    23d8:	482d      	ldr	r0, [pc, #180]	; (2490 <_svfiprintf_r+0x1fc>)
    23da:	1c66      	adds	r6, r4, #1
    23dc:	7629      	strb	r1, [r5, #24]
    23de:	f000 f9e5 	bl	27ac <memchr>
    23e2:	2800      	cmp	r0, #0
    23e4:	d046      	beq.n	2474 <_svfiprintf_r+0x1e0>
    23e6:	4b2b      	ldr	r3, [pc, #172]	; (2494 <_svfiprintf_r+0x200>)
    23e8:	2b00      	cmp	r3, #0
    23ea:	d12f      	bne.n	244c <_svfiprintf_r+0x1b8>
    23ec:	6829      	ldr	r1, [r5, #0]
    23ee:	9b05      	ldr	r3, [sp, #20]
    23f0:	2207      	movs	r2, #7
    23f2:	05c9      	lsls	r1, r1, #23
    23f4:	d528      	bpl.n	2448 <_svfiprintf_r+0x1b4>
    23f6:	189b      	adds	r3, r3, r2
    23f8:	4393      	bics	r3, r2
    23fa:	3308      	adds	r3, #8
    23fc:	9305      	str	r3, [sp, #20]
    23fe:	696b      	ldr	r3, [r5, #20]
    2400:	9a03      	ldr	r2, [sp, #12]
    2402:	189b      	adds	r3, r3, r2
    2404:	616b      	str	r3, [r5, #20]
    2406:	e767      	b.n	22d8 <_svfiprintf_r+0x44>
    2408:	425b      	negs	r3, r3
    240a:	60eb      	str	r3, [r5, #12]
    240c:	2302      	movs	r3, #2
    240e:	430b      	orrs	r3, r1
    2410:	602b      	str	r3, [r5, #0]
    2412:	e7c0      	b.n	2396 <_svfiprintf_r+0x102>
    2414:	434b      	muls	r3, r1
    2416:	3401      	adds	r4, #1
    2418:	189b      	adds	r3, r3, r2
    241a:	2001      	movs	r0, #1
    241c:	e7a0      	b.n	2360 <_svfiprintf_r+0xcc>
    241e:	2301      	movs	r3, #1
    2420:	425b      	negs	r3, r3
    2422:	e7c7      	b.n	23b4 <_svfiprintf_r+0x120>
    2424:	2300      	movs	r3, #0
    2426:	0014      	movs	r4, r2
    2428:	200a      	movs	r0, #10
    242a:	001a      	movs	r2, r3
    242c:	606b      	str	r3, [r5, #4]
    242e:	7821      	ldrb	r1, [r4, #0]
    2430:	3930      	subs	r1, #48	; 0x30
    2432:	2909      	cmp	r1, #9
    2434:	d903      	bls.n	243e <_svfiprintf_r+0x1aa>
    2436:	2b00      	cmp	r3, #0
    2438:	d0bd      	beq.n	23b6 <_svfiprintf_r+0x122>
    243a:	9207      	str	r2, [sp, #28]
    243c:	e7bb      	b.n	23b6 <_svfiprintf_r+0x122>
    243e:	4342      	muls	r2, r0
    2440:	3401      	adds	r4, #1
    2442:	1852      	adds	r2, r2, r1
    2444:	2301      	movs	r3, #1
    2446:	e7f2      	b.n	242e <_svfiprintf_r+0x19a>
    2448:	3307      	adds	r3, #7
    244a:	e7d5      	b.n	23f8 <_svfiprintf_r+0x164>
    244c:	ab05      	add	r3, sp, #20
    244e:	9300      	str	r3, [sp, #0]
    2450:	003a      	movs	r2, r7
    2452:	4b11      	ldr	r3, [pc, #68]	; (2498 <_svfiprintf_r+0x204>)
    2454:	0029      	movs	r1, r5
    2456:	9802      	ldr	r0, [sp, #8]
    2458:	e000      	b.n	245c <_svfiprintf_r+0x1c8>
    245a:	bf00      	nop
    245c:	9003      	str	r0, [sp, #12]
    245e:	9b03      	ldr	r3, [sp, #12]
    2460:	3301      	adds	r3, #1
    2462:	d1cc      	bne.n	23fe <_svfiprintf_r+0x16a>
    2464:	89bb      	ldrh	r3, [r7, #12]
    2466:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2468:	065b      	lsls	r3, r3, #25
    246a:	d400      	bmi.n	246e <_svfiprintf_r+0x1da>
    246c:	e729      	b.n	22c2 <_svfiprintf_r+0x2e>
    246e:	2001      	movs	r0, #1
    2470:	4240      	negs	r0, r0
    2472:	e726      	b.n	22c2 <_svfiprintf_r+0x2e>
    2474:	ab05      	add	r3, sp, #20
    2476:	9300      	str	r3, [sp, #0]
    2478:	003a      	movs	r2, r7
    247a:	4b07      	ldr	r3, [pc, #28]	; (2498 <_svfiprintf_r+0x204>)
    247c:	0029      	movs	r1, r5
    247e:	9802      	ldr	r0, [sp, #8]
    2480:	f000 f87a 	bl	2578 <_printf_i>
    2484:	e7ea      	b.n	245c <_svfiprintf_r+0x1c8>
    2486:	46c0      	nop			; (mov r8, r8)
    2488:	00002a50 	.word	0x00002a50
    248c:	00002a56 	.word	0x00002a56
    2490:	00002a5a 	.word	0x00002a5a
    2494:	00000000 	.word	0x00000000
    2498:	000021d1 	.word	0x000021d1

0000249c <_printf_common>:
    249c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    249e:	0015      	movs	r5, r2
    24a0:	9301      	str	r3, [sp, #4]
    24a2:	688a      	ldr	r2, [r1, #8]
    24a4:	690b      	ldr	r3, [r1, #16]
    24a6:	9000      	str	r0, [sp, #0]
    24a8:	000c      	movs	r4, r1
    24aa:	4293      	cmp	r3, r2
    24ac:	da00      	bge.n	24b0 <_printf_common+0x14>
    24ae:	0013      	movs	r3, r2
    24b0:	0022      	movs	r2, r4
    24b2:	602b      	str	r3, [r5, #0]
    24b4:	3243      	adds	r2, #67	; 0x43
    24b6:	7812      	ldrb	r2, [r2, #0]
    24b8:	2a00      	cmp	r2, #0
    24ba:	d001      	beq.n	24c0 <_printf_common+0x24>
    24bc:	3301      	adds	r3, #1
    24be:	602b      	str	r3, [r5, #0]
    24c0:	6823      	ldr	r3, [r4, #0]
    24c2:	069b      	lsls	r3, r3, #26
    24c4:	d502      	bpl.n	24cc <_printf_common+0x30>
    24c6:	682b      	ldr	r3, [r5, #0]
    24c8:	3302      	adds	r3, #2
    24ca:	602b      	str	r3, [r5, #0]
    24cc:	2706      	movs	r7, #6
    24ce:	6823      	ldr	r3, [r4, #0]
    24d0:	401f      	ands	r7, r3
    24d2:	d027      	beq.n	2524 <_printf_common+0x88>
    24d4:	0023      	movs	r3, r4
    24d6:	3343      	adds	r3, #67	; 0x43
    24d8:	781b      	ldrb	r3, [r3, #0]
    24da:	1e5a      	subs	r2, r3, #1
    24dc:	4193      	sbcs	r3, r2
    24de:	6822      	ldr	r2, [r4, #0]
    24e0:	0692      	lsls	r2, r2, #26
    24e2:	d430      	bmi.n	2546 <_printf_common+0xaa>
    24e4:	0022      	movs	r2, r4
    24e6:	9901      	ldr	r1, [sp, #4]
    24e8:	3243      	adds	r2, #67	; 0x43
    24ea:	9800      	ldr	r0, [sp, #0]
    24ec:	9e08      	ldr	r6, [sp, #32]
    24ee:	47b0      	blx	r6
    24f0:	1c43      	adds	r3, r0, #1
    24f2:	d025      	beq.n	2540 <_printf_common+0xa4>
    24f4:	2306      	movs	r3, #6
    24f6:	6820      	ldr	r0, [r4, #0]
    24f8:	682a      	ldr	r2, [r5, #0]
    24fa:	68e1      	ldr	r1, [r4, #12]
    24fc:	4003      	ands	r3, r0
    24fe:	2500      	movs	r5, #0
    2500:	2b04      	cmp	r3, #4
    2502:	d103      	bne.n	250c <_printf_common+0x70>
    2504:	1a8d      	subs	r5, r1, r2
    2506:	43eb      	mvns	r3, r5
    2508:	17db      	asrs	r3, r3, #31
    250a:	401d      	ands	r5, r3
    250c:	68a3      	ldr	r3, [r4, #8]
    250e:	6922      	ldr	r2, [r4, #16]
    2510:	4293      	cmp	r3, r2
    2512:	dd01      	ble.n	2518 <_printf_common+0x7c>
    2514:	1a9b      	subs	r3, r3, r2
    2516:	18ed      	adds	r5, r5, r3
    2518:	2700      	movs	r7, #0
    251a:	42bd      	cmp	r5, r7
    251c:	d120      	bne.n	2560 <_printf_common+0xc4>
    251e:	2000      	movs	r0, #0
    2520:	e010      	b.n	2544 <_printf_common+0xa8>
    2522:	3701      	adds	r7, #1
    2524:	68e3      	ldr	r3, [r4, #12]
    2526:	682a      	ldr	r2, [r5, #0]
    2528:	1a9b      	subs	r3, r3, r2
    252a:	429f      	cmp	r7, r3
    252c:	dad2      	bge.n	24d4 <_printf_common+0x38>
    252e:	0022      	movs	r2, r4
    2530:	2301      	movs	r3, #1
    2532:	3219      	adds	r2, #25
    2534:	9901      	ldr	r1, [sp, #4]
    2536:	9800      	ldr	r0, [sp, #0]
    2538:	9e08      	ldr	r6, [sp, #32]
    253a:	47b0      	blx	r6
    253c:	1c43      	adds	r3, r0, #1
    253e:	d1f0      	bne.n	2522 <_printf_common+0x86>
    2540:	2001      	movs	r0, #1
    2542:	4240      	negs	r0, r0
    2544:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2546:	2030      	movs	r0, #48	; 0x30
    2548:	18e1      	adds	r1, r4, r3
    254a:	3143      	adds	r1, #67	; 0x43
    254c:	7008      	strb	r0, [r1, #0]
    254e:	0021      	movs	r1, r4
    2550:	1c5a      	adds	r2, r3, #1
    2552:	3145      	adds	r1, #69	; 0x45
    2554:	7809      	ldrb	r1, [r1, #0]
    2556:	18a2      	adds	r2, r4, r2
    2558:	3243      	adds	r2, #67	; 0x43
    255a:	3302      	adds	r3, #2
    255c:	7011      	strb	r1, [r2, #0]
    255e:	e7c1      	b.n	24e4 <_printf_common+0x48>
    2560:	0022      	movs	r2, r4
    2562:	2301      	movs	r3, #1
    2564:	321a      	adds	r2, #26
    2566:	9901      	ldr	r1, [sp, #4]
    2568:	9800      	ldr	r0, [sp, #0]
    256a:	9e08      	ldr	r6, [sp, #32]
    256c:	47b0      	blx	r6
    256e:	1c43      	adds	r3, r0, #1
    2570:	d0e6      	beq.n	2540 <_printf_common+0xa4>
    2572:	3701      	adds	r7, #1
    2574:	e7d1      	b.n	251a <_printf_common+0x7e>
	...

00002578 <_printf_i>:
    2578:	b5f0      	push	{r4, r5, r6, r7, lr}
    257a:	b08b      	sub	sp, #44	; 0x2c
    257c:	9206      	str	r2, [sp, #24]
    257e:	000a      	movs	r2, r1
    2580:	3243      	adds	r2, #67	; 0x43
    2582:	9307      	str	r3, [sp, #28]
    2584:	9005      	str	r0, [sp, #20]
    2586:	9204      	str	r2, [sp, #16]
    2588:	7e0a      	ldrb	r2, [r1, #24]
    258a:	000c      	movs	r4, r1
    258c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    258e:	2a6e      	cmp	r2, #110	; 0x6e
    2590:	d100      	bne.n	2594 <_printf_i+0x1c>
    2592:	e08f      	b.n	26b4 <_printf_i+0x13c>
    2594:	d817      	bhi.n	25c6 <_printf_i+0x4e>
    2596:	2a63      	cmp	r2, #99	; 0x63
    2598:	d02c      	beq.n	25f4 <_printf_i+0x7c>
    259a:	d808      	bhi.n	25ae <_printf_i+0x36>
    259c:	2a00      	cmp	r2, #0
    259e:	d100      	bne.n	25a2 <_printf_i+0x2a>
    25a0:	e099      	b.n	26d6 <_printf_i+0x15e>
    25a2:	2a58      	cmp	r2, #88	; 0x58
    25a4:	d054      	beq.n	2650 <_printf_i+0xd8>
    25a6:	0026      	movs	r6, r4
    25a8:	3642      	adds	r6, #66	; 0x42
    25aa:	7032      	strb	r2, [r6, #0]
    25ac:	e029      	b.n	2602 <_printf_i+0x8a>
    25ae:	2a64      	cmp	r2, #100	; 0x64
    25b0:	d001      	beq.n	25b6 <_printf_i+0x3e>
    25b2:	2a69      	cmp	r2, #105	; 0x69
    25b4:	d1f7      	bne.n	25a6 <_printf_i+0x2e>
    25b6:	6821      	ldr	r1, [r4, #0]
    25b8:	681a      	ldr	r2, [r3, #0]
    25ba:	0608      	lsls	r0, r1, #24
    25bc:	d523      	bpl.n	2606 <_printf_i+0x8e>
    25be:	1d11      	adds	r1, r2, #4
    25c0:	6019      	str	r1, [r3, #0]
    25c2:	6815      	ldr	r5, [r2, #0]
    25c4:	e025      	b.n	2612 <_printf_i+0x9a>
    25c6:	2a73      	cmp	r2, #115	; 0x73
    25c8:	d100      	bne.n	25cc <_printf_i+0x54>
    25ca:	e088      	b.n	26de <_printf_i+0x166>
    25cc:	d808      	bhi.n	25e0 <_printf_i+0x68>
    25ce:	2a6f      	cmp	r2, #111	; 0x6f
    25d0:	d029      	beq.n	2626 <_printf_i+0xae>
    25d2:	2a70      	cmp	r2, #112	; 0x70
    25d4:	d1e7      	bne.n	25a6 <_printf_i+0x2e>
    25d6:	2220      	movs	r2, #32
    25d8:	6809      	ldr	r1, [r1, #0]
    25da:	430a      	orrs	r2, r1
    25dc:	6022      	str	r2, [r4, #0]
    25de:	e003      	b.n	25e8 <_printf_i+0x70>
    25e0:	2a75      	cmp	r2, #117	; 0x75
    25e2:	d020      	beq.n	2626 <_printf_i+0xae>
    25e4:	2a78      	cmp	r2, #120	; 0x78
    25e6:	d1de      	bne.n	25a6 <_printf_i+0x2e>
    25e8:	0022      	movs	r2, r4
    25ea:	2178      	movs	r1, #120	; 0x78
    25ec:	3245      	adds	r2, #69	; 0x45
    25ee:	7011      	strb	r1, [r2, #0]
    25f0:	4a6c      	ldr	r2, [pc, #432]	; (27a4 <_printf_i+0x22c>)
    25f2:	e030      	b.n	2656 <_printf_i+0xde>
    25f4:	000e      	movs	r6, r1
    25f6:	681a      	ldr	r2, [r3, #0]
    25f8:	3642      	adds	r6, #66	; 0x42
    25fa:	1d11      	adds	r1, r2, #4
    25fc:	6019      	str	r1, [r3, #0]
    25fe:	6813      	ldr	r3, [r2, #0]
    2600:	7033      	strb	r3, [r6, #0]
    2602:	2301      	movs	r3, #1
    2604:	e079      	b.n	26fa <_printf_i+0x182>
    2606:	0649      	lsls	r1, r1, #25
    2608:	d5d9      	bpl.n	25be <_printf_i+0x46>
    260a:	1d11      	adds	r1, r2, #4
    260c:	6019      	str	r1, [r3, #0]
    260e:	2300      	movs	r3, #0
    2610:	5ed5      	ldrsh	r5, [r2, r3]
    2612:	2d00      	cmp	r5, #0
    2614:	da03      	bge.n	261e <_printf_i+0xa6>
    2616:	232d      	movs	r3, #45	; 0x2d
    2618:	9a04      	ldr	r2, [sp, #16]
    261a:	426d      	negs	r5, r5
    261c:	7013      	strb	r3, [r2, #0]
    261e:	4b62      	ldr	r3, [pc, #392]	; (27a8 <_printf_i+0x230>)
    2620:	270a      	movs	r7, #10
    2622:	9303      	str	r3, [sp, #12]
    2624:	e02f      	b.n	2686 <_printf_i+0x10e>
    2626:	6820      	ldr	r0, [r4, #0]
    2628:	6819      	ldr	r1, [r3, #0]
    262a:	0605      	lsls	r5, r0, #24
    262c:	d503      	bpl.n	2636 <_printf_i+0xbe>
    262e:	1d08      	adds	r0, r1, #4
    2630:	6018      	str	r0, [r3, #0]
    2632:	680d      	ldr	r5, [r1, #0]
    2634:	e005      	b.n	2642 <_printf_i+0xca>
    2636:	0640      	lsls	r0, r0, #25
    2638:	d5f9      	bpl.n	262e <_printf_i+0xb6>
    263a:	680d      	ldr	r5, [r1, #0]
    263c:	1d08      	adds	r0, r1, #4
    263e:	6018      	str	r0, [r3, #0]
    2640:	b2ad      	uxth	r5, r5
    2642:	4b59      	ldr	r3, [pc, #356]	; (27a8 <_printf_i+0x230>)
    2644:	2708      	movs	r7, #8
    2646:	9303      	str	r3, [sp, #12]
    2648:	2a6f      	cmp	r2, #111	; 0x6f
    264a:	d018      	beq.n	267e <_printf_i+0x106>
    264c:	270a      	movs	r7, #10
    264e:	e016      	b.n	267e <_printf_i+0x106>
    2650:	3145      	adds	r1, #69	; 0x45
    2652:	700a      	strb	r2, [r1, #0]
    2654:	4a54      	ldr	r2, [pc, #336]	; (27a8 <_printf_i+0x230>)
    2656:	9203      	str	r2, [sp, #12]
    2658:	681a      	ldr	r2, [r3, #0]
    265a:	6821      	ldr	r1, [r4, #0]
    265c:	1d10      	adds	r0, r2, #4
    265e:	6018      	str	r0, [r3, #0]
    2660:	6815      	ldr	r5, [r2, #0]
    2662:	0608      	lsls	r0, r1, #24
    2664:	d522      	bpl.n	26ac <_printf_i+0x134>
    2666:	07cb      	lsls	r3, r1, #31
    2668:	d502      	bpl.n	2670 <_printf_i+0xf8>
    266a:	2320      	movs	r3, #32
    266c:	4319      	orrs	r1, r3
    266e:	6021      	str	r1, [r4, #0]
    2670:	2710      	movs	r7, #16
    2672:	2d00      	cmp	r5, #0
    2674:	d103      	bne.n	267e <_printf_i+0x106>
    2676:	2320      	movs	r3, #32
    2678:	6822      	ldr	r2, [r4, #0]
    267a:	439a      	bics	r2, r3
    267c:	6022      	str	r2, [r4, #0]
    267e:	0023      	movs	r3, r4
    2680:	2200      	movs	r2, #0
    2682:	3343      	adds	r3, #67	; 0x43
    2684:	701a      	strb	r2, [r3, #0]
    2686:	6863      	ldr	r3, [r4, #4]
    2688:	60a3      	str	r3, [r4, #8]
    268a:	2b00      	cmp	r3, #0
    268c:	db5c      	blt.n	2748 <_printf_i+0x1d0>
    268e:	2204      	movs	r2, #4
    2690:	6821      	ldr	r1, [r4, #0]
    2692:	4391      	bics	r1, r2
    2694:	6021      	str	r1, [r4, #0]
    2696:	2d00      	cmp	r5, #0
    2698:	d158      	bne.n	274c <_printf_i+0x1d4>
    269a:	9e04      	ldr	r6, [sp, #16]
    269c:	2b00      	cmp	r3, #0
    269e:	d064      	beq.n	276a <_printf_i+0x1f2>
    26a0:	0026      	movs	r6, r4
    26a2:	9b03      	ldr	r3, [sp, #12]
    26a4:	3642      	adds	r6, #66	; 0x42
    26a6:	781b      	ldrb	r3, [r3, #0]
    26a8:	7033      	strb	r3, [r6, #0]
    26aa:	e05e      	b.n	276a <_printf_i+0x1f2>
    26ac:	0648      	lsls	r0, r1, #25
    26ae:	d5da      	bpl.n	2666 <_printf_i+0xee>
    26b0:	b2ad      	uxth	r5, r5
    26b2:	e7d8      	b.n	2666 <_printf_i+0xee>
    26b4:	6809      	ldr	r1, [r1, #0]
    26b6:	681a      	ldr	r2, [r3, #0]
    26b8:	0608      	lsls	r0, r1, #24
    26ba:	d505      	bpl.n	26c8 <_printf_i+0x150>
    26bc:	1d11      	adds	r1, r2, #4
    26be:	6019      	str	r1, [r3, #0]
    26c0:	6813      	ldr	r3, [r2, #0]
    26c2:	6962      	ldr	r2, [r4, #20]
    26c4:	601a      	str	r2, [r3, #0]
    26c6:	e006      	b.n	26d6 <_printf_i+0x15e>
    26c8:	0649      	lsls	r1, r1, #25
    26ca:	d5f7      	bpl.n	26bc <_printf_i+0x144>
    26cc:	1d11      	adds	r1, r2, #4
    26ce:	6019      	str	r1, [r3, #0]
    26d0:	6813      	ldr	r3, [r2, #0]
    26d2:	8aa2      	ldrh	r2, [r4, #20]
    26d4:	801a      	strh	r2, [r3, #0]
    26d6:	2300      	movs	r3, #0
    26d8:	9e04      	ldr	r6, [sp, #16]
    26da:	6123      	str	r3, [r4, #16]
    26dc:	e054      	b.n	2788 <_printf_i+0x210>
    26de:	681a      	ldr	r2, [r3, #0]
    26e0:	1d11      	adds	r1, r2, #4
    26e2:	6019      	str	r1, [r3, #0]
    26e4:	6816      	ldr	r6, [r2, #0]
    26e6:	2100      	movs	r1, #0
    26e8:	6862      	ldr	r2, [r4, #4]
    26ea:	0030      	movs	r0, r6
    26ec:	f000 f85e 	bl	27ac <memchr>
    26f0:	2800      	cmp	r0, #0
    26f2:	d001      	beq.n	26f8 <_printf_i+0x180>
    26f4:	1b80      	subs	r0, r0, r6
    26f6:	6060      	str	r0, [r4, #4]
    26f8:	6863      	ldr	r3, [r4, #4]
    26fa:	6123      	str	r3, [r4, #16]
    26fc:	2300      	movs	r3, #0
    26fe:	9a04      	ldr	r2, [sp, #16]
    2700:	7013      	strb	r3, [r2, #0]
    2702:	e041      	b.n	2788 <_printf_i+0x210>
    2704:	6923      	ldr	r3, [r4, #16]
    2706:	0032      	movs	r2, r6
    2708:	9906      	ldr	r1, [sp, #24]
    270a:	9805      	ldr	r0, [sp, #20]
    270c:	9d07      	ldr	r5, [sp, #28]
    270e:	47a8      	blx	r5
    2710:	1c43      	adds	r3, r0, #1
    2712:	d043      	beq.n	279c <_printf_i+0x224>
    2714:	6823      	ldr	r3, [r4, #0]
    2716:	2500      	movs	r5, #0
    2718:	079b      	lsls	r3, r3, #30
    271a:	d40f      	bmi.n	273c <_printf_i+0x1c4>
    271c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    271e:	68e0      	ldr	r0, [r4, #12]
    2720:	4298      	cmp	r0, r3
    2722:	da3d      	bge.n	27a0 <_printf_i+0x228>
    2724:	0018      	movs	r0, r3
    2726:	e03b      	b.n	27a0 <_printf_i+0x228>
    2728:	0022      	movs	r2, r4
    272a:	2301      	movs	r3, #1
    272c:	3219      	adds	r2, #25
    272e:	9906      	ldr	r1, [sp, #24]
    2730:	9805      	ldr	r0, [sp, #20]
    2732:	9e07      	ldr	r6, [sp, #28]
    2734:	47b0      	blx	r6
    2736:	1c43      	adds	r3, r0, #1
    2738:	d030      	beq.n	279c <_printf_i+0x224>
    273a:	3501      	adds	r5, #1
    273c:	68e3      	ldr	r3, [r4, #12]
    273e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2740:	1a9b      	subs	r3, r3, r2
    2742:	429d      	cmp	r5, r3
    2744:	dbf0      	blt.n	2728 <_printf_i+0x1b0>
    2746:	e7e9      	b.n	271c <_printf_i+0x1a4>
    2748:	2d00      	cmp	r5, #0
    274a:	d0a9      	beq.n	26a0 <_printf_i+0x128>
    274c:	9e04      	ldr	r6, [sp, #16]
    274e:	0028      	movs	r0, r5
    2750:	0039      	movs	r1, r7
    2752:	f7ff fcbf 	bl	20d4 <__aeabi_uidivmod>
    2756:	9b03      	ldr	r3, [sp, #12]
    2758:	3e01      	subs	r6, #1
    275a:	5c5b      	ldrb	r3, [r3, r1]
    275c:	0028      	movs	r0, r5
    275e:	7033      	strb	r3, [r6, #0]
    2760:	0039      	movs	r1, r7
    2762:	f7ff fc31 	bl	1fc8 <__udivsi3>
    2766:	1e05      	subs	r5, r0, #0
    2768:	d1f1      	bne.n	274e <_printf_i+0x1d6>
    276a:	2f08      	cmp	r7, #8
    276c:	d109      	bne.n	2782 <_printf_i+0x20a>
    276e:	6823      	ldr	r3, [r4, #0]
    2770:	07db      	lsls	r3, r3, #31
    2772:	d506      	bpl.n	2782 <_printf_i+0x20a>
    2774:	6863      	ldr	r3, [r4, #4]
    2776:	6922      	ldr	r2, [r4, #16]
    2778:	4293      	cmp	r3, r2
    277a:	dc02      	bgt.n	2782 <_printf_i+0x20a>
    277c:	2330      	movs	r3, #48	; 0x30
    277e:	3e01      	subs	r6, #1
    2780:	7033      	strb	r3, [r6, #0]
    2782:	9b04      	ldr	r3, [sp, #16]
    2784:	1b9b      	subs	r3, r3, r6
    2786:	6123      	str	r3, [r4, #16]
    2788:	9b07      	ldr	r3, [sp, #28]
    278a:	aa09      	add	r2, sp, #36	; 0x24
    278c:	9300      	str	r3, [sp, #0]
    278e:	0021      	movs	r1, r4
    2790:	9b06      	ldr	r3, [sp, #24]
    2792:	9805      	ldr	r0, [sp, #20]
    2794:	f7ff fe82 	bl	249c <_printf_common>
    2798:	1c43      	adds	r3, r0, #1
    279a:	d1b3      	bne.n	2704 <_printf_i+0x18c>
    279c:	2001      	movs	r0, #1
    279e:	4240      	negs	r0, r0
    27a0:	b00b      	add	sp, #44	; 0x2c
    27a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27a4:	00002a72 	.word	0x00002a72
    27a8:	00002a61 	.word	0x00002a61

000027ac <memchr>:
    27ac:	b2c9      	uxtb	r1, r1
    27ae:	1882      	adds	r2, r0, r2
    27b0:	4290      	cmp	r0, r2
    27b2:	d101      	bne.n	27b8 <memchr+0xc>
    27b4:	2000      	movs	r0, #0
    27b6:	4770      	bx	lr
    27b8:	7803      	ldrb	r3, [r0, #0]
    27ba:	428b      	cmp	r3, r1
    27bc:	d0fb      	beq.n	27b6 <memchr+0xa>
    27be:	3001      	adds	r0, #1
    27c0:	e7f6      	b.n	27b0 <memchr+0x4>

000027c2 <memcpy>:
    27c2:	2300      	movs	r3, #0
    27c4:	b510      	push	{r4, lr}
    27c6:	429a      	cmp	r2, r3
    27c8:	d100      	bne.n	27cc <memcpy+0xa>
    27ca:	bd10      	pop	{r4, pc}
    27cc:	5ccc      	ldrb	r4, [r1, r3]
    27ce:	54c4      	strb	r4, [r0, r3]
    27d0:	3301      	adds	r3, #1
    27d2:	e7f8      	b.n	27c6 <memcpy+0x4>

000027d4 <memmove>:
    27d4:	b510      	push	{r4, lr}
    27d6:	4288      	cmp	r0, r1
    27d8:	d902      	bls.n	27e0 <memmove+0xc>
    27da:	188b      	adds	r3, r1, r2
    27dc:	4298      	cmp	r0, r3
    27de:	d308      	bcc.n	27f2 <memmove+0x1e>
    27e0:	2300      	movs	r3, #0
    27e2:	429a      	cmp	r2, r3
    27e4:	d007      	beq.n	27f6 <memmove+0x22>
    27e6:	5ccc      	ldrb	r4, [r1, r3]
    27e8:	54c4      	strb	r4, [r0, r3]
    27ea:	3301      	adds	r3, #1
    27ec:	e7f9      	b.n	27e2 <memmove+0xe>
    27ee:	5c8b      	ldrb	r3, [r1, r2]
    27f0:	5483      	strb	r3, [r0, r2]
    27f2:	3a01      	subs	r2, #1
    27f4:	d2fb      	bcs.n	27ee <memmove+0x1a>
    27f6:	bd10      	pop	{r4, pc}

000027f8 <_free_r>:
    27f8:	b570      	push	{r4, r5, r6, lr}
    27fa:	0005      	movs	r5, r0
    27fc:	2900      	cmp	r1, #0
    27fe:	d010      	beq.n	2822 <_free_r+0x2a>
    2800:	1f0c      	subs	r4, r1, #4
    2802:	6823      	ldr	r3, [r4, #0]
    2804:	2b00      	cmp	r3, #0
    2806:	da00      	bge.n	280a <_free_r+0x12>
    2808:	18e4      	adds	r4, r4, r3
    280a:	0028      	movs	r0, r5
    280c:	f000 f8d4 	bl	29b8 <__malloc_lock>
    2810:	4a1d      	ldr	r2, [pc, #116]	; (2888 <_free_r+0x90>)
    2812:	6813      	ldr	r3, [r2, #0]
    2814:	2b00      	cmp	r3, #0
    2816:	d105      	bne.n	2824 <_free_r+0x2c>
    2818:	6063      	str	r3, [r4, #4]
    281a:	6014      	str	r4, [r2, #0]
    281c:	0028      	movs	r0, r5
    281e:	f000 f8cc 	bl	29ba <__malloc_unlock>
    2822:	bd70      	pop	{r4, r5, r6, pc}
    2824:	42a3      	cmp	r3, r4
    2826:	d909      	bls.n	283c <_free_r+0x44>
    2828:	6821      	ldr	r1, [r4, #0]
    282a:	1860      	adds	r0, r4, r1
    282c:	4283      	cmp	r3, r0
    282e:	d1f3      	bne.n	2818 <_free_r+0x20>
    2830:	6818      	ldr	r0, [r3, #0]
    2832:	685b      	ldr	r3, [r3, #4]
    2834:	1841      	adds	r1, r0, r1
    2836:	6021      	str	r1, [r4, #0]
    2838:	e7ee      	b.n	2818 <_free_r+0x20>
    283a:	0013      	movs	r3, r2
    283c:	685a      	ldr	r2, [r3, #4]
    283e:	2a00      	cmp	r2, #0
    2840:	d001      	beq.n	2846 <_free_r+0x4e>
    2842:	42a2      	cmp	r2, r4
    2844:	d9f9      	bls.n	283a <_free_r+0x42>
    2846:	6819      	ldr	r1, [r3, #0]
    2848:	1858      	adds	r0, r3, r1
    284a:	42a0      	cmp	r0, r4
    284c:	d10b      	bne.n	2866 <_free_r+0x6e>
    284e:	6820      	ldr	r0, [r4, #0]
    2850:	1809      	adds	r1, r1, r0
    2852:	1858      	adds	r0, r3, r1
    2854:	6019      	str	r1, [r3, #0]
    2856:	4282      	cmp	r2, r0
    2858:	d1e0      	bne.n	281c <_free_r+0x24>
    285a:	6810      	ldr	r0, [r2, #0]
    285c:	6852      	ldr	r2, [r2, #4]
    285e:	1841      	adds	r1, r0, r1
    2860:	6019      	str	r1, [r3, #0]
    2862:	605a      	str	r2, [r3, #4]
    2864:	e7da      	b.n	281c <_free_r+0x24>
    2866:	42a0      	cmp	r0, r4
    2868:	d902      	bls.n	2870 <_free_r+0x78>
    286a:	230c      	movs	r3, #12
    286c:	602b      	str	r3, [r5, #0]
    286e:	e7d5      	b.n	281c <_free_r+0x24>
    2870:	6821      	ldr	r1, [r4, #0]
    2872:	1860      	adds	r0, r4, r1
    2874:	4282      	cmp	r2, r0
    2876:	d103      	bne.n	2880 <_free_r+0x88>
    2878:	6810      	ldr	r0, [r2, #0]
    287a:	6852      	ldr	r2, [r2, #4]
    287c:	1841      	adds	r1, r0, r1
    287e:	6021      	str	r1, [r4, #0]
    2880:	6062      	str	r2, [r4, #4]
    2882:	605c      	str	r4, [r3, #4]
    2884:	e7ca      	b.n	281c <_free_r+0x24>
    2886:	46c0      	nop			; (mov r8, r8)
    2888:	200000d0 	.word	0x200000d0

0000288c <_malloc_r>:
    288c:	2303      	movs	r3, #3
    288e:	b570      	push	{r4, r5, r6, lr}
    2890:	1ccd      	adds	r5, r1, #3
    2892:	439d      	bics	r5, r3
    2894:	3508      	adds	r5, #8
    2896:	0006      	movs	r6, r0
    2898:	2d0c      	cmp	r5, #12
    289a:	d21e      	bcs.n	28da <_malloc_r+0x4e>
    289c:	250c      	movs	r5, #12
    289e:	42a9      	cmp	r1, r5
    28a0:	d81d      	bhi.n	28de <_malloc_r+0x52>
    28a2:	0030      	movs	r0, r6
    28a4:	f000 f888 	bl	29b8 <__malloc_lock>
    28a8:	4a25      	ldr	r2, [pc, #148]	; (2940 <_malloc_r+0xb4>)
    28aa:	6814      	ldr	r4, [r2, #0]
    28ac:	0021      	movs	r1, r4
    28ae:	2900      	cmp	r1, #0
    28b0:	d119      	bne.n	28e6 <_malloc_r+0x5a>
    28b2:	4c24      	ldr	r4, [pc, #144]	; (2944 <_malloc_r+0xb8>)
    28b4:	6823      	ldr	r3, [r4, #0]
    28b6:	2b00      	cmp	r3, #0
    28b8:	d103      	bne.n	28c2 <_malloc_r+0x36>
    28ba:	0030      	movs	r0, r6
    28bc:	f000 f86a 	bl	2994 <_sbrk_r>
    28c0:	6020      	str	r0, [r4, #0]
    28c2:	0029      	movs	r1, r5
    28c4:	0030      	movs	r0, r6
    28c6:	f000 f865 	bl	2994 <_sbrk_r>
    28ca:	1c43      	adds	r3, r0, #1
    28cc:	d12c      	bne.n	2928 <_malloc_r+0x9c>
    28ce:	230c      	movs	r3, #12
    28d0:	0030      	movs	r0, r6
    28d2:	6033      	str	r3, [r6, #0]
    28d4:	f000 f871 	bl	29ba <__malloc_unlock>
    28d8:	e003      	b.n	28e2 <_malloc_r+0x56>
    28da:	2d00      	cmp	r5, #0
    28dc:	dadf      	bge.n	289e <_malloc_r+0x12>
    28de:	230c      	movs	r3, #12
    28e0:	6033      	str	r3, [r6, #0]
    28e2:	2000      	movs	r0, #0
    28e4:	bd70      	pop	{r4, r5, r6, pc}
    28e6:	680b      	ldr	r3, [r1, #0]
    28e8:	1b5b      	subs	r3, r3, r5
    28ea:	d41a      	bmi.n	2922 <_malloc_r+0x96>
    28ec:	2b0b      	cmp	r3, #11
    28ee:	d903      	bls.n	28f8 <_malloc_r+0x6c>
    28f0:	600b      	str	r3, [r1, #0]
    28f2:	18cc      	adds	r4, r1, r3
    28f4:	6025      	str	r5, [r4, #0]
    28f6:	e003      	b.n	2900 <_malloc_r+0x74>
    28f8:	428c      	cmp	r4, r1
    28fa:	d10e      	bne.n	291a <_malloc_r+0x8e>
    28fc:	6863      	ldr	r3, [r4, #4]
    28fe:	6013      	str	r3, [r2, #0]
    2900:	0030      	movs	r0, r6
    2902:	f000 f85a 	bl	29ba <__malloc_unlock>
    2906:	0020      	movs	r0, r4
    2908:	2207      	movs	r2, #7
    290a:	300b      	adds	r0, #11
    290c:	1d23      	adds	r3, r4, #4
    290e:	4390      	bics	r0, r2
    2910:	1ac3      	subs	r3, r0, r3
    2912:	d0e7      	beq.n	28e4 <_malloc_r+0x58>
    2914:	425a      	negs	r2, r3
    2916:	50e2      	str	r2, [r4, r3]
    2918:	e7e4      	b.n	28e4 <_malloc_r+0x58>
    291a:	684b      	ldr	r3, [r1, #4]
    291c:	6063      	str	r3, [r4, #4]
    291e:	000c      	movs	r4, r1
    2920:	e7ee      	b.n	2900 <_malloc_r+0x74>
    2922:	000c      	movs	r4, r1
    2924:	6849      	ldr	r1, [r1, #4]
    2926:	e7c2      	b.n	28ae <_malloc_r+0x22>
    2928:	2303      	movs	r3, #3
    292a:	1cc4      	adds	r4, r0, #3
    292c:	439c      	bics	r4, r3
    292e:	42a0      	cmp	r0, r4
    2930:	d0e0      	beq.n	28f4 <_malloc_r+0x68>
    2932:	1a21      	subs	r1, r4, r0
    2934:	0030      	movs	r0, r6
    2936:	f000 f82d 	bl	2994 <_sbrk_r>
    293a:	1c43      	adds	r3, r0, #1
    293c:	d1da      	bne.n	28f4 <_malloc_r+0x68>
    293e:	e7c6      	b.n	28ce <_malloc_r+0x42>
    2940:	200000d0 	.word	0x200000d0
    2944:	200000d4 	.word	0x200000d4

00002948 <_realloc_r>:
    2948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    294a:	0007      	movs	r7, r0
    294c:	000d      	movs	r5, r1
    294e:	0016      	movs	r6, r2
    2950:	2900      	cmp	r1, #0
    2952:	d105      	bne.n	2960 <_realloc_r+0x18>
    2954:	0011      	movs	r1, r2
    2956:	f7ff ff99 	bl	288c <_malloc_r>
    295a:	0004      	movs	r4, r0
    295c:	0020      	movs	r0, r4
    295e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2960:	2a00      	cmp	r2, #0
    2962:	d103      	bne.n	296c <_realloc_r+0x24>
    2964:	f7ff ff48 	bl	27f8 <_free_r>
    2968:	0034      	movs	r4, r6
    296a:	e7f7      	b.n	295c <_realloc_r+0x14>
    296c:	f000 f826 	bl	29bc <_malloc_usable_size_r>
    2970:	002c      	movs	r4, r5
    2972:	4286      	cmp	r6, r0
    2974:	d9f2      	bls.n	295c <_realloc_r+0x14>
    2976:	0031      	movs	r1, r6
    2978:	0038      	movs	r0, r7
    297a:	f7ff ff87 	bl	288c <_malloc_r>
    297e:	1e04      	subs	r4, r0, #0
    2980:	d0ec      	beq.n	295c <_realloc_r+0x14>
    2982:	0029      	movs	r1, r5
    2984:	0032      	movs	r2, r6
    2986:	f7ff ff1c 	bl	27c2 <memcpy>
    298a:	0029      	movs	r1, r5
    298c:	0038      	movs	r0, r7
    298e:	f7ff ff33 	bl	27f8 <_free_r>
    2992:	e7e3      	b.n	295c <_realloc_r+0x14>

00002994 <_sbrk_r>:
    2994:	2300      	movs	r3, #0
    2996:	b570      	push	{r4, r5, r6, lr}
    2998:	4c06      	ldr	r4, [pc, #24]	; (29b4 <_sbrk_r+0x20>)
    299a:	0005      	movs	r5, r0
    299c:	0008      	movs	r0, r1
    299e:	6023      	str	r3, [r4, #0]
    29a0:	f7ff fa6e 	bl	1e80 <_sbrk>
    29a4:	1c43      	adds	r3, r0, #1
    29a6:	d103      	bne.n	29b0 <_sbrk_r+0x1c>
    29a8:	6823      	ldr	r3, [r4, #0]
    29aa:	2b00      	cmp	r3, #0
    29ac:	d000      	beq.n	29b0 <_sbrk_r+0x1c>
    29ae:	602b      	str	r3, [r5, #0]
    29b0:	bd70      	pop	{r4, r5, r6, pc}
    29b2:	46c0      	nop			; (mov r8, r8)
    29b4:	200001c8 	.word	0x200001c8

000029b8 <__malloc_lock>:
    29b8:	4770      	bx	lr

000029ba <__malloc_unlock>:
    29ba:	4770      	bx	lr

000029bc <_malloc_usable_size_r>:
    29bc:	1f0b      	subs	r3, r1, #4
    29be:	681b      	ldr	r3, [r3, #0]
    29c0:	1f18      	subs	r0, r3, #4
    29c2:	2b00      	cmp	r3, #0
    29c4:	da01      	bge.n	29ca <_malloc_usable_size_r+0xe>
    29c6:	580b      	ldr	r3, [r1, r0]
    29c8:	18c0      	adds	r0, r0, r3
    29ca:	4770      	bx	lr
    29cc:	42000800 	.word	0x42000800
    29d0:	42000c00 	.word	0x42000c00
    29d4:	42001000 	.word	0x42001000
    29d8:	42001400 	.word	0x42001400
    29dc:	42001800 	.word	0x42001800
    29e0:	42001c00 	.word	0x42001c00
    29e4:	6c6c6548 	.word	0x6c6c6548
    29e8:	6f57206f 	.word	0x6f57206f
    29ec:	21646c72 	.word	0x21646c72
    29f0:	00000a0d 	.word	0x00000a0d
    29f4:	63450a0d 	.word	0x63450a0d
    29f8:	203a6f68 	.word	0x203a6f68
    29fc:	00000000 	.word	0x00000000
    2a00:	00001886 	.word	0x00001886
    2a04:	00001882 	.word	0x00001882
    2a08:	00001882 	.word	0x00001882
    2a0c:	000018d2 	.word	0x000018d2
    2a10:	000018d2 	.word	0x000018d2
    2a14:	0000189a 	.word	0x0000189a
    2a18:	0000188c 	.word	0x0000188c
    2a1c:	000018a0 	.word	0x000018a0
    2a20:	00001958 	.word	0x00001958
    2a24:	00001938 	.word	0x00001938
    2a28:	00001938 	.word	0x00001938
    2a2c:	000019a8 	.word	0x000019a8
    2a30:	0000194a 	.word	0x0000194a
    2a34:	00001966 	.word	0x00001966
    2a38:	0000193c 	.word	0x0000193c
    2a3c:	00001974 	.word	0x00001974
    2a40:	58323025 	.word	0x58323025
    2a44:	00000000 	.word	0x00000000
    2a48:	4967664d 	.word	0x4967664d
    2a4c:	00203a44 	.word	0x00203a44
    2a50:	2b302d23 	.word	0x2b302d23
    2a54:	6c680020 	.word	0x6c680020
    2a58:	6665004c 	.word	0x6665004c
    2a5c:	47464567 	.word	0x47464567
    2a60:	00          	.byte	0x00
    2a61:	30          	.byte	0x30
    2a62:	3231      	.short	0x3231
    2a64:	36353433 	.word	0x36353433
    2a68:	41393837 	.word	0x41393837
    2a6c:	45444342 	.word	0x45444342
    2a70:	31300046 	.word	0x31300046
    2a74:	35343332 	.word	0x35343332
    2a78:	39383736 	.word	0x39383736
    2a7c:	64636261 	.word	0x64636261
    2a80:	00006665 	.word	0x00006665

00002a84 <_init>:
    2a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a86:	46c0      	nop			; (mov r8, r8)
    2a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2a8a:	bc08      	pop	{r3}
    2a8c:	469e      	mov	lr, r3
    2a8e:	4770      	bx	lr

00002a90 <__init_array_start>:
    2a90:	000000cd 	.word	0x000000cd

00002a94 <_fini>:
    2a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a96:	46c0      	nop			; (mov r8, r8)
    2a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2a9a:	bc08      	pop	{r3}
    2a9c:	469e      	mov	lr, r3
    2a9e:	4770      	bx	lr

00002aa0 <__fini_array_start>:
    2aa0:	000000a5 	.word	0x000000a5
