
SAMD20_SystemDev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a18  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00000a18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000038  2000000c  00000a24  0002000c  2**2
                  ALLOC
  3 .stack        00002004  20000044  00000a5c  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000dae5  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e62  00000000  00000000  0002db72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000019b7  00000000  00000000  0002f9d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000268  00000000  00000000  0003138b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000218  00000000  00000000  000315f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000114c9  00000000  00000000  0003180b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006c05  00000000  00000000  00042cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005d37e  00000000  00000000  000498d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000051c  00000000  00000000  000a6c58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	48 20 00 20 8d 07 00 00 89 07 00 00 89 07 00 00     H . ............
	...
  2c:	89 07 00 00 00 00 00 00 00 00 00 00 89 07 00 00     ................
  3c:	25 08 00 00 89 07 00 00 89 07 00 00 89 07 00 00     %...............
  4c:	89 07 00 00 89 07 00 00 89 07 00 00 89 07 00 00     ................
  5c:	89 07 00 00 89 07 00 00 89 07 00 00 89 07 00 00     ................
  6c:	89 07 00 00 89 07 00 00 89 07 00 00 89 07 00 00     ................
  7c:	89 07 00 00 89 07 00 00 89 07 00 00 89 07 00 00     ................
  8c:	89 07 00 00 89 07 00 00 89 07 00 00 89 07 00 00     ................
  9c:	89 07 00 00 89 07 00 00                             ........

000000a4 <__do_global_dtors_aux>:
  a4:	b510      	push	{r4, lr}
  a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
  a8:	7823      	ldrb	r3, [r4, #0]
  aa:	2b00      	cmp	r3, #0
  ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
  ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
  b0:	2b00      	cmp	r3, #0
  b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
  b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
  b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
  b8:	bf00      	nop
  ba:	2301      	movs	r3, #1
  bc:	7023      	strb	r3, [r4, #0]
  be:	bd10      	pop	{r4, pc}
  c0:	2000000c 	.word	0x2000000c
  c4:	00000000 	.word	0x00000000
  c8:	00000a18 	.word	0x00000a18

000000cc <frame_dummy>:
  cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
  ce:	b510      	push	{r4, lr}
  d0:	2b00      	cmp	r3, #0
  d2:	d003      	beq.n	dc <frame_dummy+0x10>
  d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
  d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
  d8:	e000      	b.n	dc <frame_dummy+0x10>
  da:	bf00      	nop
  dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
  de:	6803      	ldr	r3, [r0, #0]
  e0:	2b00      	cmp	r3, #0
  e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
  e4:	bd10      	pop	{r4, pc}
  e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
  e8:	2b00      	cmp	r3, #0
  ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
  ec:	4798      	blx	r3
  ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
  f0:	00000000 	.word	0x00000000
  f4:	20000010 	.word	0x20000010
  f8:	00000a18 	.word	0x00000a18
  fc:	00000a18 	.word	0x00000a18
 100:	00000000 	.word	0x00000000

00000104 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
 104:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
 106:	2000      	movs	r0, #0
 108:	4b08      	ldr	r3, [pc, #32]	; (12c <delay_init+0x28>)
 10a:	4798      	blx	r3
 10c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
 10e:	4c08      	ldr	r4, [pc, #32]	; (130 <delay_init+0x2c>)
 110:	21fa      	movs	r1, #250	; 0xfa
 112:	0089      	lsls	r1, r1, #2
 114:	47a0      	blx	r4
 116:	4b07      	ldr	r3, [pc, #28]	; (134 <delay_init+0x30>)
 118:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
 11a:	4907      	ldr	r1, [pc, #28]	; (138 <delay_init+0x34>)
 11c:	0028      	movs	r0, r5
 11e:	47a0      	blx	r4
 120:	4b06      	ldr	r3, [pc, #24]	; (13c <delay_init+0x38>)
 122:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 124:	2205      	movs	r2, #5
 126:	4b06      	ldr	r3, [pc, #24]	; (140 <delay_init+0x3c>)
 128:	601a      	str	r2, [r3, #0]
}
 12a:	bd70      	pop	{r4, r5, r6, pc}
 12c:	00000549 	.word	0x00000549
 130:	00000859 	.word	0x00000859
 134:	20000000 	.word	0x20000000
 138:	000f4240 	.word	0x000f4240
 13c:	20000004 	.word	0x20000004
 140:	e000e010 	.word	0xe000e010

00000144 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
 144:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
 146:	4b08      	ldr	r3, [pc, #32]	; (168 <delay_cycles_ms+0x24>)
 148:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
 14a:	4a08      	ldr	r2, [pc, #32]	; (16c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
 14c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
 14e:	2180      	movs	r1, #128	; 0x80
 150:	0249      	lsls	r1, r1, #9
	while (n--) {
 152:	3801      	subs	r0, #1
 154:	d307      	bcc.n	166 <delay_cycles_ms+0x22>
	if (n > 0) {
 156:	2c00      	cmp	r4, #0
 158:	d0fb      	beq.n	152 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
 15a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
 15c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
 15e:	6813      	ldr	r3, [r2, #0]
 160:	420b      	tst	r3, r1
 162:	d0fc      	beq.n	15e <delay_cycles_ms+0x1a>
 164:	e7f5      	b.n	152 <delay_cycles_ms+0xe>
	}
}
 166:	bd30      	pop	{r4, r5, pc}
 168:	20000000 	.word	0x20000000
 16c:	e000e010 	.word	0xe000e010

00000170 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
 170:	b500      	push	{lr}
 172:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
 174:	ab01      	add	r3, sp, #4
 176:	2280      	movs	r2, #128	; 0x80
 178:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
 17a:	780a      	ldrb	r2, [r1, #0]
 17c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
 17e:	784a      	ldrb	r2, [r1, #1]
 180:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
 182:	788a      	ldrb	r2, [r1, #2]
 184:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
 186:	0019      	movs	r1, r3
 188:	4b01      	ldr	r3, [pc, #4]	; (190 <port_pin_set_config+0x20>)
 18a:	4798      	blx	r3
}
 18c:	b003      	add	sp, #12
 18e:	bd00      	pop	{pc}
 190:	00000729 	.word	0x00000729

00000194 <config_led>:
 


 /** Configure LED0, turn it off*/
 void config_led(void)
 {
 194:	b500      	push	{lr}
 196:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
 198:	a901      	add	r1, sp, #4
 19a:	2301      	movs	r3, #1
 19c:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
 19e:	2200      	movs	r2, #0
 1a0:	708a      	strb	r2, [r1, #2]
	 struct port_config pin_conf;
	 port_get_config_defaults(&pin_conf);

	 pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
 1a2:	700b      	strb	r3, [r1, #0]
	 port_pin_set_config(LED_0_PIN, &pin_conf);
 1a4:	200e      	movs	r0, #14
 1a6:	4b04      	ldr	r3, [pc, #16]	; (1b8 <config_led+0x24>)
 1a8:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
 1aa:	2280      	movs	r2, #128	; 0x80
 1ac:	01d2      	lsls	r2, r2, #7
 1ae:	4b03      	ldr	r3, [pc, #12]	; (1bc <config_led+0x28>)
 1b0:	619a      	str	r2, [r3, #24]
	 port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
 
}
 1b2:	b003      	add	sp, #12
 1b4:	bd00      	pop	{pc}
 1b6:	46c0      	nop			; (mov r8, r8)
 1b8:	00000171 	.word	0x00000171
 1bc:	41004400 	.word	0x41004400

000001c0 <config_board>:

void config_board(void)
{
 1c0:	b510      	push	{r4, lr}
	config_led();
 1c2:	4b02      	ldr	r3, [pc, #8]	; (1cc <config_board+0xc>)
 1c4:	4798      	blx	r3
	delay_init();
 1c6:	4b02      	ldr	r3, [pc, #8]	; (1d0 <config_board+0x10>)
 1c8:	4798      	blx	r3
 1ca:	bd10      	pop	{r4, pc}
 1cc:	00000195 	.word	0x00000195
 1d0:	00000105 	.word	0x00000105

000001d4 <system_board_init>:
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	 
}
 1d4:	4770      	bx	lr
	...

000001d8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
 1d8:	4b0c      	ldr	r3, [pc, #48]	; (20c <cpu_irq_enter_critical+0x34>)
 1da:	681b      	ldr	r3, [r3, #0]
 1dc:	2b00      	cmp	r3, #0
 1de:	d106      	bne.n	1ee <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 1e0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
 1e4:	2b00      	cmp	r3, #0
 1e6:	d007      	beq.n	1f8 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
 1e8:	2200      	movs	r2, #0
 1ea:	4b09      	ldr	r3, [pc, #36]	; (210 <cpu_irq_enter_critical+0x38>)
 1ec:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
 1ee:	4a07      	ldr	r2, [pc, #28]	; (20c <cpu_irq_enter_critical+0x34>)
 1f0:	6813      	ldr	r3, [r2, #0]
 1f2:	3301      	adds	r3, #1
 1f4:	6013      	str	r3, [r2, #0]
}
 1f6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 1f8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
 1fa:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
 1fe:	2200      	movs	r2, #0
 200:	4b04      	ldr	r3, [pc, #16]	; (214 <cpu_irq_enter_critical+0x3c>)
 202:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
 204:	3201      	adds	r2, #1
 206:	4b02      	ldr	r3, [pc, #8]	; (210 <cpu_irq_enter_critical+0x38>)
 208:	701a      	strb	r2, [r3, #0]
 20a:	e7f0      	b.n	1ee <cpu_irq_enter_critical+0x16>
 20c:	20000028 	.word	0x20000028
 210:	2000002c 	.word	0x2000002c
 214:	20000008 	.word	0x20000008

00000218 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
 218:	4b08      	ldr	r3, [pc, #32]	; (23c <cpu_irq_leave_critical+0x24>)
 21a:	681a      	ldr	r2, [r3, #0]
 21c:	3a01      	subs	r2, #1
 21e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
 220:	681b      	ldr	r3, [r3, #0]
 222:	2b00      	cmp	r3, #0
 224:	d109      	bne.n	23a <cpu_irq_leave_critical+0x22>
 226:	4b06      	ldr	r3, [pc, #24]	; (240 <cpu_irq_leave_critical+0x28>)
 228:	781b      	ldrb	r3, [r3, #0]
 22a:	2b00      	cmp	r3, #0
 22c:	d005      	beq.n	23a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
 22e:	2201      	movs	r2, #1
 230:	4b04      	ldr	r3, [pc, #16]	; (244 <cpu_irq_leave_critical+0x2c>)
 232:	701a      	strb	r2, [r3, #0]
 234:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 238:	b662      	cpsie	i
	}
}
 23a:	4770      	bx	lr
 23c:	20000028 	.word	0x20000028
 240:	2000002c 	.word	0x2000002c
 244:	20000008 	.word	0x20000008

00000248 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
 248:	b510      	push	{r4, lr}
	switch (clock_source) {
 24a:	2807      	cmp	r0, #7
 24c:	d803      	bhi.n	256 <system_clock_source_get_hz+0xe>
 24e:	0080      	lsls	r0, r0, #2
 250:	4b16      	ldr	r3, [pc, #88]	; (2ac <system_clock_source_get_hz+0x64>)
 252:	581b      	ldr	r3, [r3, r0]
 254:	469f      	mov	pc, r3
		}

		return 48000000UL;

	default:
		return 0;
 256:	2000      	movs	r0, #0
 258:	e027      	b.n	2aa <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc.frequency;
 25a:	4b15      	ldr	r3, [pc, #84]	; (2b0 <system_clock_source_get_hz+0x68>)
 25c:	68d8      	ldr	r0, [r3, #12]
 25e:	e024      	b.n	2aa <system_clock_source_get_hz+0x62>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
 260:	4b14      	ldr	r3, [pc, #80]	; (2b4 <system_clock_source_get_hz+0x6c>)
 262:	6a1b      	ldr	r3, [r3, #32]
 264:	059b      	lsls	r3, r3, #22
 266:	0f9b      	lsrs	r3, r3, #30
 268:	4813      	ldr	r0, [pc, #76]	; (2b8 <system_clock_source_get_hz+0x70>)
 26a:	40d8      	lsrs	r0, r3
 26c:	e01d      	b.n	2aa <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc32k.frequency;
 26e:	4b10      	ldr	r3, [pc, #64]	; (2b0 <system_clock_source_get_hz+0x68>)
 270:	6918      	ldr	r0, [r3, #16]
 272:	e01a      	b.n	2aa <system_clock_source_get_hz+0x62>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
 274:	4b0e      	ldr	r3, [pc, #56]	; (2b0 <system_clock_source_get_hz+0x68>)
 276:	681b      	ldr	r3, [r3, #0]
			return 0;
 278:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
 27a:	079b      	lsls	r3, r3, #30
 27c:	d515      	bpl.n	2aa <system_clock_source_get_hz+0x62>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 27e:	490d      	ldr	r1, [pc, #52]	; (2b4 <system_clock_source_get_hz+0x6c>)
 280:	2210      	movs	r2, #16
 282:	68cb      	ldr	r3, [r1, #12]
 284:	421a      	tst	r2, r3
 286:	d0fc      	beq.n	282 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
 288:	4b09      	ldr	r3, [pc, #36]	; (2b0 <system_clock_source_get_hz+0x68>)
 28a:	681b      	ldr	r3, [r3, #0]
 28c:	075b      	lsls	r3, r3, #29
 28e:	d401      	bmi.n	294 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
 290:	480a      	ldr	r0, [pc, #40]	; (2bc <system_clock_source_get_hz+0x74>)
 292:	e00a      	b.n	2aa <system_clock_source_get_hz+0x62>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
 294:	2000      	movs	r0, #0
 296:	4b0a      	ldr	r3, [pc, #40]	; (2c0 <system_clock_source_get_hz+0x78>)
 298:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
 29a:	4b05      	ldr	r3, [pc, #20]	; (2b0 <system_clock_source_get_hz+0x68>)
 29c:	689b      	ldr	r3, [r3, #8]
 29e:	041b      	lsls	r3, r3, #16
 2a0:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
 2a2:	4358      	muls	r0, r3
 2a4:	e001      	b.n	2aa <system_clock_source_get_hz+0x62>
		return 32768UL;
 2a6:	2080      	movs	r0, #128	; 0x80
 2a8:	0200      	lsls	r0, r0, #8
	}
}
 2aa:	bd10      	pop	{r4, pc}
 2ac:	000009b8 	.word	0x000009b8
 2b0:	20000030 	.word	0x20000030
 2b4:	40000800 	.word	0x40000800
 2b8:	007a1200 	.word	0x007a1200
 2bc:	02dc6c00 	.word	0x02dc6c00
 2c0:	0000064d 	.word	0x0000064d

000002c4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
 2c4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
 2c6:	490c      	ldr	r1, [pc, #48]	; (2f8 <system_clock_source_osc8m_set_config+0x34>)
 2c8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
 2ca:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
 2cc:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
 2ce:	7840      	ldrb	r0, [r0, #1]
 2d0:	2201      	movs	r2, #1
 2d2:	4010      	ands	r0, r2
 2d4:	0180      	lsls	r0, r0, #6
 2d6:	2640      	movs	r6, #64	; 0x40
 2d8:	43b3      	bics	r3, r6
 2da:	4303      	orrs	r3, r0
 2dc:	402a      	ands	r2, r5
 2de:	01d2      	lsls	r2, r2, #7
 2e0:	2080      	movs	r0, #128	; 0x80
 2e2:	4383      	bics	r3, r0
 2e4:	4313      	orrs	r3, r2
 2e6:	2203      	movs	r2, #3
 2e8:	4022      	ands	r2, r4
 2ea:	0212      	lsls	r2, r2, #8
 2ec:	4803      	ldr	r0, [pc, #12]	; (2fc <system_clock_source_osc8m_set_config+0x38>)
 2ee:	4003      	ands	r3, r0
 2f0:	4313      	orrs	r3, r2
 2f2:	620b      	str	r3, [r1, #32]
}
 2f4:	bd70      	pop	{r4, r5, r6, pc}
 2f6:	46c0      	nop			; (mov r8, r8)
 2f8:	40000800 	.word	0x40000800
 2fc:	fffffcff 	.word	0xfffffcff

00000300 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
 300:	2807      	cmp	r0, #7
 302:	d803      	bhi.n	30c <system_clock_source_enable+0xc>
 304:	0080      	lsls	r0, r0, #2
 306:	4b1e      	ldr	r3, [pc, #120]	; (380 <system_clock_source_enable+0x80>)
 308:	581b      	ldr	r3, [r3, r0]
 30a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 30c:	2017      	movs	r0, #23
 30e:	e036      	b.n	37e <system_clock_source_enable+0x7e>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
 310:	4a1c      	ldr	r2, [pc, #112]	; (384 <system_clock_source_enable+0x84>)
 312:	6a13      	ldr	r3, [r2, #32]
 314:	2102      	movs	r1, #2
 316:	430b      	orrs	r3, r1
 318:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
 31a:	2000      	movs	r0, #0
 31c:	e02f      	b.n	37e <system_clock_source_enable+0x7e>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
 31e:	4a19      	ldr	r2, [pc, #100]	; (384 <system_clock_source_enable+0x84>)
 320:	6993      	ldr	r3, [r2, #24]
 322:	2102      	movs	r1, #2
 324:	430b      	orrs	r3, r1
 326:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
 328:	2000      	movs	r0, #0
		break;
 32a:	e028      	b.n	37e <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
 32c:	4a15      	ldr	r2, [pc, #84]	; (384 <system_clock_source_enable+0x84>)
 32e:	8a13      	ldrh	r3, [r2, #16]
 330:	2102      	movs	r1, #2
 332:	430b      	orrs	r3, r1
 334:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
 336:	2000      	movs	r0, #0
		break;
 338:	e021      	b.n	37e <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
 33a:	4a12      	ldr	r2, [pc, #72]	; (384 <system_clock_source_enable+0x84>)
 33c:	8a93      	ldrh	r3, [r2, #20]
 33e:	2102      	movs	r1, #2
 340:	430b      	orrs	r3, r1
 342:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
 344:	2000      	movs	r0, #0
		break;
 346:	e01a      	b.n	37e <system_clock_source_enable+0x7e>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
 348:	4b0f      	ldr	r3, [pc, #60]	; (388 <system_clock_source_enable+0x88>)
 34a:	681a      	ldr	r2, [r3, #0]
 34c:	2102      	movs	r1, #2
 34e:	430a      	orrs	r2, r1
 350:	601a      	str	r2, [r3, #0]
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
 352:	681b      	ldr	r3, [r3, #0]
 354:	4a0d      	ldr	r2, [pc, #52]	; (38c <system_clock_source_enable+0x8c>)
 356:	4013      	ands	r3, r2
 358:	4a0a      	ldr	r2, [pc, #40]	; (384 <system_clock_source_enable+0x84>)
 35a:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 35c:	0011      	movs	r1, r2
 35e:	2210      	movs	r2, #16
 360:	68cb      	ldr	r3, [r1, #12]
 362:	421a      	tst	r2, r3
 364:	d0fc      	beq.n	360 <system_clock_source_enable+0x60>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
 366:	4a08      	ldr	r2, [pc, #32]	; (388 <system_clock_source_enable+0x88>)
 368:	6891      	ldr	r1, [r2, #8]
 36a:	4b06      	ldr	r3, [pc, #24]	; (384 <system_clock_source_enable+0x84>)
 36c:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
 36e:	6851      	ldr	r1, [r2, #4]
 370:	6299      	str	r1, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
 372:	6812      	ldr	r2, [r2, #0]
 374:	b292      	uxth	r2, r2
 376:	849a      	strh	r2, [r3, #36]	; 0x24
	return STATUS_OK;
 378:	2000      	movs	r0, #0
 37a:	e000      	b.n	37e <system_clock_source_enable+0x7e>
		return STATUS_OK;
 37c:	2000      	movs	r0, #0
}
 37e:	4770      	bx	lr
 380:	000009d8 	.word	0x000009d8
 384:	40000800 	.word	0x40000800
 388:	20000030 	.word	0x20000030
 38c:	0000ff7f 	.word	0x0000ff7f

00000390 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
 390:	b530      	push	{r4, r5, lr}
 392:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
 394:	22c2      	movs	r2, #194	; 0xc2
 396:	00d2      	lsls	r2, r2, #3
 398:	4b1a      	ldr	r3, [pc, #104]	; (404 <system_clock_init+0x74>)
 39a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
 39c:	4a1a      	ldr	r2, [pc, #104]	; (408 <system_clock_init+0x78>)
 39e:	6853      	ldr	r3, [r2, #4]
 3a0:	211e      	movs	r1, #30
 3a2:	438b      	bics	r3, r1
 3a4:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
 3a6:	2301      	movs	r3, #1
 3a8:	466a      	mov	r2, sp
 3aa:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 3ac:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
 3ae:	4d17      	ldr	r5, [pc, #92]	; (40c <system_clock_init+0x7c>)
 3b0:	b2e0      	uxtb	r0, r4
 3b2:	4669      	mov	r1, sp
 3b4:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 3b6:	3401      	adds	r4, #1
 3b8:	2c1c      	cmp	r4, #28
 3ba:	d1f9      	bne.n	3b0 <system_clock_init+0x20>
	config->run_in_standby  = false;
 3bc:	a803      	add	r0, sp, #12
 3be:	2400      	movs	r4, #0
 3c0:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
 3c2:	2501      	movs	r5, #1
 3c4:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
 3c6:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
 3c8:	4b11      	ldr	r3, [pc, #68]	; (410 <system_clock_init+0x80>)
 3ca:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
 3cc:	2006      	movs	r0, #6
 3ce:	4b11      	ldr	r3, [pc, #68]	; (414 <system_clock_init+0x84>)
 3d0:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
 3d2:	4b11      	ldr	r3, [pc, #68]	; (418 <system_clock_init+0x88>)
 3d4:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
 3d6:	4b11      	ldr	r3, [pc, #68]	; (41c <system_clock_init+0x8c>)
 3d8:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
 3da:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
 3dc:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
 3de:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
 3e0:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
 3e2:	466b      	mov	r3, sp
 3e4:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
 3e6:	2306      	movs	r3, #6
 3e8:	466a      	mov	r2, sp
 3ea:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
 3ec:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
 3ee:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
 3f0:	4669      	mov	r1, sp
 3f2:	2000      	movs	r0, #0
 3f4:	4b0a      	ldr	r3, [pc, #40]	; (420 <system_clock_init+0x90>)
 3f6:	4798      	blx	r3
 3f8:	2000      	movs	r0, #0
 3fa:	4b0a      	ldr	r3, [pc, #40]	; (424 <system_clock_init+0x94>)
 3fc:	4798      	blx	r3
#endif
}
 3fe:	b005      	add	sp, #20
 400:	bd30      	pop	{r4, r5, pc}
 402:	46c0      	nop			; (mov r8, r8)
 404:	40000800 	.word	0x40000800
 408:	41004000 	.word	0x41004000
 40c:	00000631 	.word	0x00000631
 410:	000002c5 	.word	0x000002c5
 414:	00000301 	.word	0x00000301
 418:	00000429 	.word	0x00000429
 41c:	40000400 	.word	0x40000400
 420:	0000044d 	.word	0x0000044d
 424:	00000505 	.word	0x00000505

00000428 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
 428:	4a06      	ldr	r2, [pc, #24]	; (444 <system_gclk_init+0x1c>)
 42a:	6993      	ldr	r3, [r2, #24]
 42c:	2108      	movs	r1, #8
 42e:	430b      	orrs	r3, r1
 430:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
 432:	2201      	movs	r2, #1
 434:	4b04      	ldr	r3, [pc, #16]	; (448 <system_gclk_init+0x20>)
 436:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
 438:	0019      	movs	r1, r3
 43a:	780b      	ldrb	r3, [r1, #0]
 43c:	4213      	tst	r3, r2
 43e:	d1fc      	bne.n	43a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
 440:	4770      	bx	lr
 442:	46c0      	nop			; (mov r8, r8)
 444:	40000400 	.word	0x40000400
 448:	40000c00 	.word	0x40000c00

0000044c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
 44c:	b570      	push	{r4, r5, r6, lr}
 44e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
 450:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
 452:	780d      	ldrb	r5, [r1, #0]
 454:	022d      	lsls	r5, r5, #8
 456:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
 458:	784b      	ldrb	r3, [r1, #1]
 45a:	2b00      	cmp	r3, #0
 45c:	d002      	beq.n	464 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
 45e:	2380      	movs	r3, #128	; 0x80
 460:	02db      	lsls	r3, r3, #11
 462:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
 464:	7a4b      	ldrb	r3, [r1, #9]
 466:	2b00      	cmp	r3, #0
 468:	d002      	beq.n	470 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
 46a:	2380      	movs	r3, #128	; 0x80
 46c:	031b      	lsls	r3, r3, #12
 46e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
 470:	6848      	ldr	r0, [r1, #4]
 472:	2801      	cmp	r0, #1
 474:	d910      	bls.n	498 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
 476:	1e43      	subs	r3, r0, #1
 478:	4218      	tst	r0, r3
 47a:	d134      	bne.n	4e6 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 47c:	2802      	cmp	r0, #2
 47e:	d930      	bls.n	4e2 <system_gclk_gen_set_config+0x96>
 480:	2302      	movs	r3, #2
 482:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
 484:	3201      	adds	r2, #1
						mask <<= 1) {
 486:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
 488:	4298      	cmp	r0, r3
 48a:	d8fb      	bhi.n	484 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
 48c:	0212      	lsls	r2, r2, #8
 48e:	4332      	orrs	r2, r6
 490:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
 492:	2380      	movs	r3, #128	; 0x80
 494:	035b      	lsls	r3, r3, #13
 496:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
 498:	7a0b      	ldrb	r3, [r1, #8]
 49a:	2b00      	cmp	r3, #0
 49c:	d002      	beq.n	4a4 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
 49e:	2380      	movs	r3, #128	; 0x80
 4a0:	039b      	lsls	r3, r3, #14
 4a2:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 4a4:	4a13      	ldr	r2, [pc, #76]	; (4f4 <system_gclk_gen_set_config+0xa8>)
 4a6:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
 4a8:	b25b      	sxtb	r3, r3
 4aa:	2b00      	cmp	r3, #0
 4ac:	dbfb      	blt.n	4a6 <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 4ae:	4b12      	ldr	r3, [pc, #72]	; (4f8 <system_gclk_gen_set_config+0xac>)
 4b0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 4b2:	4b12      	ldr	r3, [pc, #72]	; (4fc <system_gclk_gen_set_config+0xb0>)
 4b4:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 4b6:	4a0f      	ldr	r2, [pc, #60]	; (4f4 <system_gclk_gen_set_config+0xa8>)
 4b8:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
 4ba:	b25b      	sxtb	r3, r3
 4bc:	2b00      	cmp	r3, #0
 4be:	dbfb      	blt.n	4b8 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
 4c0:	4b0c      	ldr	r3, [pc, #48]	; (4f4 <system_gclk_gen_set_config+0xa8>)
 4c2:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 4c4:	001a      	movs	r2, r3
 4c6:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
 4c8:	b25b      	sxtb	r3, r3
 4ca:	2b00      	cmp	r3, #0
 4cc:	dbfb      	blt.n	4c6 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
 4ce:	4a09      	ldr	r2, [pc, #36]	; (4f4 <system_gclk_gen_set_config+0xa8>)
 4d0:	6853      	ldr	r3, [r2, #4]
 4d2:	2180      	movs	r1, #128	; 0x80
 4d4:	0249      	lsls	r1, r1, #9
 4d6:	400b      	ands	r3, r1
 4d8:	431d      	orrs	r5, r3
 4da:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 4dc:	4b08      	ldr	r3, [pc, #32]	; (500 <system_gclk_gen_set_config+0xb4>)
 4de:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 4e0:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
 4e2:	2200      	movs	r2, #0
 4e4:	e7d2      	b.n	48c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
 4e6:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
 4e8:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
 4ea:	2380      	movs	r3, #128	; 0x80
 4ec:	029b      	lsls	r3, r3, #10
 4ee:	431d      	orrs	r5, r3
 4f0:	e7d2      	b.n	498 <system_gclk_gen_set_config+0x4c>
 4f2:	46c0      	nop			; (mov r8, r8)
 4f4:	40000c00 	.word	0x40000c00
 4f8:	000001d9 	.word	0x000001d9
 4fc:	40000c08 	.word	0x40000c08
 500:	00000219 	.word	0x00000219

00000504 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
 504:	b510      	push	{r4, lr}
 506:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 508:	4a0b      	ldr	r2, [pc, #44]	; (538 <system_gclk_gen_enable+0x34>)
 50a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 50c:	b25b      	sxtb	r3, r3
 50e:	2b00      	cmp	r3, #0
 510:	dbfb      	blt.n	50a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
 512:	4b0a      	ldr	r3, [pc, #40]	; (53c <system_gclk_gen_enable+0x38>)
 514:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 516:	4b0a      	ldr	r3, [pc, #40]	; (540 <system_gclk_gen_enable+0x3c>)
 518:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 51a:	4a07      	ldr	r2, [pc, #28]	; (538 <system_gclk_gen_enable+0x34>)
 51c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 51e:	b25b      	sxtb	r3, r3
 520:	2b00      	cmp	r3, #0
 522:	dbfb      	blt.n	51c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
 524:	4a04      	ldr	r2, [pc, #16]	; (538 <system_gclk_gen_enable+0x34>)
 526:	6851      	ldr	r1, [r2, #4]
 528:	2380      	movs	r3, #128	; 0x80
 52a:	025b      	lsls	r3, r3, #9
 52c:	430b      	orrs	r3, r1
 52e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
 530:	4b04      	ldr	r3, [pc, #16]	; (544 <system_gclk_gen_enable+0x40>)
 532:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 534:	bd10      	pop	{r4, pc}
 536:	46c0      	nop			; (mov r8, r8)
 538:	40000c00 	.word	0x40000c00
 53c:	000001d9 	.word	0x000001d9
 540:	40000c04 	.word	0x40000c04
 544:	00000219 	.word	0x00000219

00000548 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
 548:	b570      	push	{r4, r5, r6, lr}
 54a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 54c:	4a1a      	ldr	r2, [pc, #104]	; (5b8 <system_gclk_gen_get_hz+0x70>)
 54e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 550:	b25b      	sxtb	r3, r3
 552:	2b00      	cmp	r3, #0
 554:	dbfb      	blt.n	54e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
 556:	4b19      	ldr	r3, [pc, #100]	; (5bc <system_gclk_gen_get_hz+0x74>)
 558:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 55a:	4b19      	ldr	r3, [pc, #100]	; (5c0 <system_gclk_gen_get_hz+0x78>)
 55c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 55e:	4a16      	ldr	r2, [pc, #88]	; (5b8 <system_gclk_gen_get_hz+0x70>)
 560:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 562:	b25b      	sxtb	r3, r3
 564:	2b00      	cmp	r3, #0
 566:	dbfb      	blt.n	560 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
 568:	4e13      	ldr	r6, [pc, #76]	; (5b8 <system_gclk_gen_get_hz+0x70>)
 56a:	6870      	ldr	r0, [r6, #4]
 56c:	04c0      	lsls	r0, r0, #19
 56e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
 570:	4b14      	ldr	r3, [pc, #80]	; (5c4 <system_gclk_gen_get_hz+0x7c>)
 572:	4798      	blx	r3
 574:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 576:	4b12      	ldr	r3, [pc, #72]	; (5c0 <system_gclk_gen_get_hz+0x78>)
 578:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
 57a:	6876      	ldr	r6, [r6, #4]
 57c:	02f6      	lsls	r6, r6, #11
 57e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 580:	4b11      	ldr	r3, [pc, #68]	; (5c8 <system_gclk_gen_get_hz+0x80>)
 582:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 584:	4a0c      	ldr	r2, [pc, #48]	; (5b8 <system_gclk_gen_get_hz+0x70>)
 586:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 588:	b25b      	sxtb	r3, r3
 58a:	2b00      	cmp	r3, #0
 58c:	dbfb      	blt.n	586 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
 58e:	4b0a      	ldr	r3, [pc, #40]	; (5b8 <system_gclk_gen_get_hz+0x70>)
 590:	689c      	ldr	r4, [r3, #8]
 592:	0224      	lsls	r4, r4, #8
 594:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
 596:	4b0d      	ldr	r3, [pc, #52]	; (5cc <system_gclk_gen_get_hz+0x84>)
 598:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
 59a:	2e00      	cmp	r6, #0
 59c:	d107      	bne.n	5ae <system_gclk_gen_get_hz+0x66>
 59e:	2c01      	cmp	r4, #1
 5a0:	d907      	bls.n	5b2 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
 5a2:	0021      	movs	r1, r4
 5a4:	0028      	movs	r0, r5
 5a6:	4b0a      	ldr	r3, [pc, #40]	; (5d0 <system_gclk_gen_get_hz+0x88>)
 5a8:	4798      	blx	r3
 5aa:	0005      	movs	r5, r0
 5ac:	e001      	b.n	5b2 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
 5ae:	3401      	adds	r4, #1
 5b0:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
 5b2:	0028      	movs	r0, r5
 5b4:	bd70      	pop	{r4, r5, r6, pc}
 5b6:	46c0      	nop			; (mov r8, r8)
 5b8:	40000c00 	.word	0x40000c00
 5bc:	000001d9 	.word	0x000001d9
 5c0:	40000c04 	.word	0x40000c04
 5c4:	00000249 	.word	0x00000249
 5c8:	40000c08 	.word	0x40000c08
 5cc:	00000219 	.word	0x00000219
 5d0:	00000859 	.word	0x00000859

000005d4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
 5d4:	b510      	push	{r4, lr}
 5d6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 5d8:	4b0f      	ldr	r3, [pc, #60]	; (618 <system_gclk_chan_disable+0x44>)
 5da:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 5dc:	4b0f      	ldr	r3, [pc, #60]	; (61c <system_gclk_chan_disable+0x48>)
 5de:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
 5e0:	4a0f      	ldr	r2, [pc, #60]	; (620 <system_gclk_chan_disable+0x4c>)
 5e2:	8853      	ldrh	r3, [r2, #2]
 5e4:	051b      	lsls	r3, r3, #20
 5e6:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
 5e8:	8853      	ldrh	r3, [r2, #2]
 5ea:	490e      	ldr	r1, [pc, #56]	; (624 <system_gclk_chan_disable+0x50>)
 5ec:	400b      	ands	r3, r1
 5ee:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
 5f0:	8853      	ldrh	r3, [r2, #2]
 5f2:	490d      	ldr	r1, [pc, #52]	; (628 <system_gclk_chan_disable+0x54>)
 5f4:	400b      	ands	r3, r1
 5f6:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
 5f8:	0011      	movs	r1, r2
 5fa:	2280      	movs	r2, #128	; 0x80
 5fc:	01d2      	lsls	r2, r2, #7
 5fe:	884b      	ldrh	r3, [r1, #2]
 600:	4213      	tst	r3, r2
 602:	d1fc      	bne.n	5fe <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
 604:	4906      	ldr	r1, [pc, #24]	; (620 <system_gclk_chan_disable+0x4c>)
 606:	884a      	ldrh	r2, [r1, #2]
 608:	0203      	lsls	r3, r0, #8
 60a:	4806      	ldr	r0, [pc, #24]	; (624 <system_gclk_chan_disable+0x50>)
 60c:	4002      	ands	r2, r0
 60e:	4313      	orrs	r3, r2
 610:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
 612:	4b06      	ldr	r3, [pc, #24]	; (62c <system_gclk_chan_disable+0x58>)
 614:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 616:	bd10      	pop	{r4, pc}
 618:	000001d9 	.word	0x000001d9
 61c:	40000c02 	.word	0x40000c02
 620:	40000c00 	.word	0x40000c00
 624:	fffff0ff 	.word	0xfffff0ff
 628:	ffffbfff 	.word	0xffffbfff
 62c:	00000219 	.word	0x00000219

00000630 <system_gclk_chan_set_config>:
{
 630:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
 632:	780c      	ldrb	r4, [r1, #0]
 634:	0224      	lsls	r4, r4, #8
 636:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
 638:	4b02      	ldr	r3, [pc, #8]	; (644 <system_gclk_chan_set_config+0x14>)
 63a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
 63c:	b2a4      	uxth	r4, r4
 63e:	4b02      	ldr	r3, [pc, #8]	; (648 <system_gclk_chan_set_config+0x18>)
 640:	805c      	strh	r4, [r3, #2]
}
 642:	bd10      	pop	{r4, pc}
 644:	000005d5 	.word	0x000005d5
 648:	40000c00 	.word	0x40000c00

0000064c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
 64c:	b510      	push	{r4, lr}
 64e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 650:	4b06      	ldr	r3, [pc, #24]	; (66c <system_gclk_chan_get_hz+0x20>)
 652:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 654:	4b06      	ldr	r3, [pc, #24]	; (670 <system_gclk_chan_get_hz+0x24>)
 656:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
 658:	4b06      	ldr	r3, [pc, #24]	; (674 <system_gclk_chan_get_hz+0x28>)
 65a:	885c      	ldrh	r4, [r3, #2]
 65c:	0524      	lsls	r4, r4, #20
 65e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
 660:	4b05      	ldr	r3, [pc, #20]	; (678 <system_gclk_chan_get_hz+0x2c>)
 662:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
 664:	0020      	movs	r0, r4
 666:	4b05      	ldr	r3, [pc, #20]	; (67c <system_gclk_chan_get_hz+0x30>)
 668:	4798      	blx	r3
}
 66a:	bd10      	pop	{r4, pc}
 66c:	000001d9 	.word	0x000001d9
 670:	40000c02 	.word	0x40000c02
 674:	40000c00 	.word	0x40000c00
 678:	00000219 	.word	0x00000219
 67c:	00000549 	.word	0x00000549

00000680 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
 680:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
 682:	78d3      	ldrb	r3, [r2, #3]
 684:	2b00      	cmp	r3, #0
 686:	d135      	bne.n	6f4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
 688:	7813      	ldrb	r3, [r2, #0]
 68a:	2b80      	cmp	r3, #128	; 0x80
 68c:	d029      	beq.n	6e2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
 68e:	061b      	lsls	r3, r3, #24
 690:	2480      	movs	r4, #128	; 0x80
 692:	0264      	lsls	r4, r4, #9
 694:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
 696:	7854      	ldrb	r4, [r2, #1]
 698:	2502      	movs	r5, #2
 69a:	43ac      	bics	r4, r5
 69c:	d106      	bne.n	6ac <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
 69e:	7894      	ldrb	r4, [r2, #2]
 6a0:	2c00      	cmp	r4, #0
 6a2:	d120      	bne.n	6e6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
 6a4:	2480      	movs	r4, #128	; 0x80
 6a6:	02a4      	lsls	r4, r4, #10
 6a8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
 6aa:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 6ac:	7854      	ldrb	r4, [r2, #1]
 6ae:	3c01      	subs	r4, #1
 6b0:	2c01      	cmp	r4, #1
 6b2:	d91c      	bls.n	6ee <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 6b4:	040d      	lsls	r5, r1, #16
 6b6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 6b8:	24a0      	movs	r4, #160	; 0xa0
 6ba:	05e4      	lsls	r4, r4, #23
 6bc:	432c      	orrs	r4, r5
 6be:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 6c0:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 6c2:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 6c4:	24d0      	movs	r4, #208	; 0xd0
 6c6:	0624      	lsls	r4, r4, #24
 6c8:	432c      	orrs	r4, r5
 6ca:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 6cc:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
 6ce:	78d4      	ldrb	r4, [r2, #3]
 6d0:	2c00      	cmp	r4, #0
 6d2:	d122      	bne.n	71a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
 6d4:	035b      	lsls	r3, r3, #13
 6d6:	d51c      	bpl.n	712 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
 6d8:	7893      	ldrb	r3, [r2, #2]
 6da:	2b01      	cmp	r3, #1
 6dc:	d01e      	beq.n	71c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
 6de:	6141      	str	r1, [r0, #20]
 6e0:	e017      	b.n	712 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
 6e2:	2300      	movs	r3, #0
 6e4:	e7d7      	b.n	696 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
 6e6:	24c0      	movs	r4, #192	; 0xc0
 6e8:	02e4      	lsls	r4, r4, #11
 6ea:	4323      	orrs	r3, r4
 6ec:	e7dd      	b.n	6aa <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
 6ee:	4c0d      	ldr	r4, [pc, #52]	; (724 <_system_pinmux_config+0xa4>)
 6f0:	4023      	ands	r3, r4
 6f2:	e7df      	b.n	6b4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
 6f4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 6f6:	040c      	lsls	r4, r1, #16
 6f8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 6fa:	23a0      	movs	r3, #160	; 0xa0
 6fc:	05db      	lsls	r3, r3, #23
 6fe:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 700:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 702:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 704:	23d0      	movs	r3, #208	; 0xd0
 706:	061b      	lsls	r3, r3, #24
 708:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 70a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
 70c:	78d3      	ldrb	r3, [r2, #3]
 70e:	2b00      	cmp	r3, #0
 710:	d103      	bne.n	71a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 712:	7853      	ldrb	r3, [r2, #1]
 714:	3b01      	subs	r3, #1
 716:	2b01      	cmp	r3, #1
 718:	d902      	bls.n	720 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
 71a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
 71c:	6181      	str	r1, [r0, #24]
 71e:	e7f8      	b.n	712 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
 720:	6081      	str	r1, [r0, #8]
}
 722:	e7fa      	b.n	71a <_system_pinmux_config+0x9a>
 724:	fffbffff 	.word	0xfffbffff

00000728 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
 728:	b510      	push	{r4, lr}
 72a:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
 72c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
 72e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
 730:	2900      	cmp	r1, #0
 732:	d104      	bne.n	73e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
 734:	0943      	lsrs	r3, r0, #5
 736:	01db      	lsls	r3, r3, #7
 738:	4905      	ldr	r1, [pc, #20]	; (750 <system_pinmux_pin_set_config+0x28>)
 73a:	468c      	mov	ip, r1
 73c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
 73e:	241f      	movs	r4, #31
 740:	4020      	ands	r0, r4
 742:	2101      	movs	r1, #1
 744:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
 746:	0018      	movs	r0, r3
 748:	4b02      	ldr	r3, [pc, #8]	; (754 <system_pinmux_pin_set_config+0x2c>)
 74a:	4798      	blx	r3
}
 74c:	bd10      	pop	{r4, pc}
 74e:	46c0      	nop			; (mov r8, r8)
 750:	41004400 	.word	0x41004400
 754:	00000681 	.word	0x00000681

00000758 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
 758:	4770      	bx	lr
	...

0000075c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
 75c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
 75e:	4b05      	ldr	r3, [pc, #20]	; (774 <system_init+0x18>)
 760:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
 762:	4b05      	ldr	r3, [pc, #20]	; (778 <system_init+0x1c>)
 764:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
 766:	4b05      	ldr	r3, [pc, #20]	; (77c <system_init+0x20>)
 768:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
 76a:	4b05      	ldr	r3, [pc, #20]	; (780 <system_init+0x24>)
 76c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
 76e:	4b05      	ldr	r3, [pc, #20]	; (784 <system_init+0x28>)
 770:	4798      	blx	r3
}
 772:	bd10      	pop	{r4, pc}
 774:	00000391 	.word	0x00000391
 778:	000001d5 	.word	0x000001d5
 77c:	00000759 	.word	0x00000759
 780:	00000759 	.word	0x00000759
 784:	00000759 	.word	0x00000759

00000788 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 788:	e7fe      	b.n	788 <Dummy_Handler>
	...

0000078c <Reset_Handler>:
{
 78c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
 78e:	4a1a      	ldr	r2, [pc, #104]	; (7f8 <Reset_Handler+0x6c>)
 790:	4b1a      	ldr	r3, [pc, #104]	; (7fc <Reset_Handler+0x70>)
 792:	429a      	cmp	r2, r3
 794:	d011      	beq.n	7ba <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 796:	001a      	movs	r2, r3
 798:	4b19      	ldr	r3, [pc, #100]	; (800 <Reset_Handler+0x74>)
 79a:	429a      	cmp	r2, r3
 79c:	d20d      	bcs.n	7ba <Reset_Handler+0x2e>
 79e:	4a19      	ldr	r2, [pc, #100]	; (804 <Reset_Handler+0x78>)
 7a0:	3303      	adds	r3, #3
 7a2:	1a9b      	subs	r3, r3, r2
 7a4:	089b      	lsrs	r3, r3, #2
 7a6:	3301      	adds	r3, #1
 7a8:	009b      	lsls	r3, r3, #2
 7aa:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 7ac:	4813      	ldr	r0, [pc, #76]	; (7fc <Reset_Handler+0x70>)
 7ae:	4912      	ldr	r1, [pc, #72]	; (7f8 <Reset_Handler+0x6c>)
 7b0:	588c      	ldr	r4, [r1, r2]
 7b2:	5084      	str	r4, [r0, r2]
 7b4:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 7b6:	429a      	cmp	r2, r3
 7b8:	d1fa      	bne.n	7b0 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 7ba:	4a13      	ldr	r2, [pc, #76]	; (808 <Reset_Handler+0x7c>)
 7bc:	4b13      	ldr	r3, [pc, #76]	; (80c <Reset_Handler+0x80>)
 7be:	429a      	cmp	r2, r3
 7c0:	d20a      	bcs.n	7d8 <Reset_Handler+0x4c>
 7c2:	43d3      	mvns	r3, r2
 7c4:	4911      	ldr	r1, [pc, #68]	; (80c <Reset_Handler+0x80>)
 7c6:	185b      	adds	r3, r3, r1
 7c8:	2103      	movs	r1, #3
 7ca:	438b      	bics	r3, r1
 7cc:	3304      	adds	r3, #4
 7ce:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 7d0:	2100      	movs	r1, #0
 7d2:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 7d4:	4293      	cmp	r3, r2
 7d6:	d1fc      	bne.n	7d2 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 7d8:	4a0d      	ldr	r2, [pc, #52]	; (810 <Reset_Handler+0x84>)
 7da:	21ff      	movs	r1, #255	; 0xff
 7dc:	4b0d      	ldr	r3, [pc, #52]	; (814 <Reset_Handler+0x88>)
 7de:	438b      	bics	r3, r1
 7e0:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
 7e2:	4a0d      	ldr	r2, [pc, #52]	; (818 <Reset_Handler+0x8c>)
 7e4:	6853      	ldr	r3, [r2, #4]
 7e6:	397f      	subs	r1, #127	; 0x7f
 7e8:	430b      	orrs	r3, r1
 7ea:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 7ec:	4b0b      	ldr	r3, [pc, #44]	; (81c <Reset_Handler+0x90>)
 7ee:	4798      	blx	r3
        main();
 7f0:	4b0b      	ldr	r3, [pc, #44]	; (820 <Reset_Handler+0x94>)
 7f2:	4798      	blx	r3
 7f4:	e7fe      	b.n	7f4 <Reset_Handler+0x68>
 7f6:	46c0      	nop			; (mov r8, r8)
 7f8:	00000a18 	.word	0x00000a18
 7fc:	20000000 	.word	0x20000000
 800:	2000000c 	.word	0x2000000c
 804:	20000004 	.word	0x20000004
 808:	2000000c 	.word	0x2000000c
 80c:	20000044 	.word	0x20000044
 810:	e000ed00 	.word	0xe000ed00
 814:	00000000 	.word	0x00000000
 818:	41004000 	.word	0x41004000
 81c:	00000971 	.word	0x00000971
 820:	00000829 	.word	0x00000829

00000824 <SysTick_Handler>:
#include "main.h"

void SysTick_Handler(void)
{
	// Your code goes here
}
 824:	4770      	bx	lr
	...

00000828 <main>:

int main (void)
{
 828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	system_init();
 82a:	4b07      	ldr	r3, [pc, #28]	; (848 <main+0x20>)
 82c:	4798      	blx	r3
	config_board();
 82e:	4b07      	ldr	r3, [pc, #28]	; (84c <main+0x24>)
 830:	4798      	blx	r3
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
 832:	4f07      	ldr	r7, [pc, #28]	; (850 <main+0x28>)
 834:	2680      	movs	r6, #128	; 0x80
 836:	01f6      	lsls	r6, r6, #7

	while(true)
	{
		port_pin_toggle_output_level( LED_0_PIN );
		delay_ms(500);
 838:	25fa      	movs	r5, #250	; 0xfa
 83a:	006d      	lsls	r5, r5, #1
 83c:	4c05      	ldr	r4, [pc, #20]	; (854 <main+0x2c>)
 83e:	61fe      	str	r6, [r7, #28]
 840:	0028      	movs	r0, r5
 842:	47a0      	blx	r4
 844:	e7fb      	b.n	83e <main+0x16>
 846:	46c0      	nop			; (mov r8, r8)
 848:	0000075d 	.word	0x0000075d
 84c:	000001c1 	.word	0x000001c1
 850:	41004400 	.word	0x41004400
 854:	00000145 	.word	0x00000145

00000858 <__udivsi3>:
 858:	2200      	movs	r2, #0
 85a:	0843      	lsrs	r3, r0, #1
 85c:	428b      	cmp	r3, r1
 85e:	d374      	bcc.n	94a <__udivsi3+0xf2>
 860:	0903      	lsrs	r3, r0, #4
 862:	428b      	cmp	r3, r1
 864:	d35f      	bcc.n	926 <__udivsi3+0xce>
 866:	0a03      	lsrs	r3, r0, #8
 868:	428b      	cmp	r3, r1
 86a:	d344      	bcc.n	8f6 <__udivsi3+0x9e>
 86c:	0b03      	lsrs	r3, r0, #12
 86e:	428b      	cmp	r3, r1
 870:	d328      	bcc.n	8c4 <__udivsi3+0x6c>
 872:	0c03      	lsrs	r3, r0, #16
 874:	428b      	cmp	r3, r1
 876:	d30d      	bcc.n	894 <__udivsi3+0x3c>
 878:	22ff      	movs	r2, #255	; 0xff
 87a:	0209      	lsls	r1, r1, #8
 87c:	ba12      	rev	r2, r2
 87e:	0c03      	lsrs	r3, r0, #16
 880:	428b      	cmp	r3, r1
 882:	d302      	bcc.n	88a <__udivsi3+0x32>
 884:	1212      	asrs	r2, r2, #8
 886:	0209      	lsls	r1, r1, #8
 888:	d065      	beq.n	956 <__udivsi3+0xfe>
 88a:	0b03      	lsrs	r3, r0, #12
 88c:	428b      	cmp	r3, r1
 88e:	d319      	bcc.n	8c4 <__udivsi3+0x6c>
 890:	e000      	b.n	894 <__udivsi3+0x3c>
 892:	0a09      	lsrs	r1, r1, #8
 894:	0bc3      	lsrs	r3, r0, #15
 896:	428b      	cmp	r3, r1
 898:	d301      	bcc.n	89e <__udivsi3+0x46>
 89a:	03cb      	lsls	r3, r1, #15
 89c:	1ac0      	subs	r0, r0, r3
 89e:	4152      	adcs	r2, r2
 8a0:	0b83      	lsrs	r3, r0, #14
 8a2:	428b      	cmp	r3, r1
 8a4:	d301      	bcc.n	8aa <__udivsi3+0x52>
 8a6:	038b      	lsls	r3, r1, #14
 8a8:	1ac0      	subs	r0, r0, r3
 8aa:	4152      	adcs	r2, r2
 8ac:	0b43      	lsrs	r3, r0, #13
 8ae:	428b      	cmp	r3, r1
 8b0:	d301      	bcc.n	8b6 <__udivsi3+0x5e>
 8b2:	034b      	lsls	r3, r1, #13
 8b4:	1ac0      	subs	r0, r0, r3
 8b6:	4152      	adcs	r2, r2
 8b8:	0b03      	lsrs	r3, r0, #12
 8ba:	428b      	cmp	r3, r1
 8bc:	d301      	bcc.n	8c2 <__udivsi3+0x6a>
 8be:	030b      	lsls	r3, r1, #12
 8c0:	1ac0      	subs	r0, r0, r3
 8c2:	4152      	adcs	r2, r2
 8c4:	0ac3      	lsrs	r3, r0, #11
 8c6:	428b      	cmp	r3, r1
 8c8:	d301      	bcc.n	8ce <__udivsi3+0x76>
 8ca:	02cb      	lsls	r3, r1, #11
 8cc:	1ac0      	subs	r0, r0, r3
 8ce:	4152      	adcs	r2, r2
 8d0:	0a83      	lsrs	r3, r0, #10
 8d2:	428b      	cmp	r3, r1
 8d4:	d301      	bcc.n	8da <__udivsi3+0x82>
 8d6:	028b      	lsls	r3, r1, #10
 8d8:	1ac0      	subs	r0, r0, r3
 8da:	4152      	adcs	r2, r2
 8dc:	0a43      	lsrs	r3, r0, #9
 8de:	428b      	cmp	r3, r1
 8e0:	d301      	bcc.n	8e6 <__udivsi3+0x8e>
 8e2:	024b      	lsls	r3, r1, #9
 8e4:	1ac0      	subs	r0, r0, r3
 8e6:	4152      	adcs	r2, r2
 8e8:	0a03      	lsrs	r3, r0, #8
 8ea:	428b      	cmp	r3, r1
 8ec:	d301      	bcc.n	8f2 <__udivsi3+0x9a>
 8ee:	020b      	lsls	r3, r1, #8
 8f0:	1ac0      	subs	r0, r0, r3
 8f2:	4152      	adcs	r2, r2
 8f4:	d2cd      	bcs.n	892 <__udivsi3+0x3a>
 8f6:	09c3      	lsrs	r3, r0, #7
 8f8:	428b      	cmp	r3, r1
 8fa:	d301      	bcc.n	900 <__udivsi3+0xa8>
 8fc:	01cb      	lsls	r3, r1, #7
 8fe:	1ac0      	subs	r0, r0, r3
 900:	4152      	adcs	r2, r2
 902:	0983      	lsrs	r3, r0, #6
 904:	428b      	cmp	r3, r1
 906:	d301      	bcc.n	90c <__udivsi3+0xb4>
 908:	018b      	lsls	r3, r1, #6
 90a:	1ac0      	subs	r0, r0, r3
 90c:	4152      	adcs	r2, r2
 90e:	0943      	lsrs	r3, r0, #5
 910:	428b      	cmp	r3, r1
 912:	d301      	bcc.n	918 <__udivsi3+0xc0>
 914:	014b      	lsls	r3, r1, #5
 916:	1ac0      	subs	r0, r0, r3
 918:	4152      	adcs	r2, r2
 91a:	0903      	lsrs	r3, r0, #4
 91c:	428b      	cmp	r3, r1
 91e:	d301      	bcc.n	924 <__udivsi3+0xcc>
 920:	010b      	lsls	r3, r1, #4
 922:	1ac0      	subs	r0, r0, r3
 924:	4152      	adcs	r2, r2
 926:	08c3      	lsrs	r3, r0, #3
 928:	428b      	cmp	r3, r1
 92a:	d301      	bcc.n	930 <__udivsi3+0xd8>
 92c:	00cb      	lsls	r3, r1, #3
 92e:	1ac0      	subs	r0, r0, r3
 930:	4152      	adcs	r2, r2
 932:	0883      	lsrs	r3, r0, #2
 934:	428b      	cmp	r3, r1
 936:	d301      	bcc.n	93c <__udivsi3+0xe4>
 938:	008b      	lsls	r3, r1, #2
 93a:	1ac0      	subs	r0, r0, r3
 93c:	4152      	adcs	r2, r2
 93e:	0843      	lsrs	r3, r0, #1
 940:	428b      	cmp	r3, r1
 942:	d301      	bcc.n	948 <__udivsi3+0xf0>
 944:	004b      	lsls	r3, r1, #1
 946:	1ac0      	subs	r0, r0, r3
 948:	4152      	adcs	r2, r2
 94a:	1a41      	subs	r1, r0, r1
 94c:	d200      	bcs.n	950 <__udivsi3+0xf8>
 94e:	4601      	mov	r1, r0
 950:	4152      	adcs	r2, r2
 952:	4610      	mov	r0, r2
 954:	4770      	bx	lr
 956:	e7ff      	b.n	958 <__udivsi3+0x100>
 958:	b501      	push	{r0, lr}
 95a:	2000      	movs	r0, #0
 95c:	f000 f806 	bl	96c <__aeabi_idiv0>
 960:	bd02      	pop	{r1, pc}
 962:	46c0      	nop			; (mov r8, r8)

00000964 <__aeabi_uidivmod>:
 964:	2900      	cmp	r1, #0
 966:	d0f7      	beq.n	958 <__udivsi3+0x100>
 968:	e776      	b.n	858 <__udivsi3>
 96a:	4770      	bx	lr

0000096c <__aeabi_idiv0>:
 96c:	4770      	bx	lr
 96e:	46c0      	nop			; (mov r8, r8)

00000970 <__libc_init_array>:
 970:	b570      	push	{r4, r5, r6, lr}
 972:	2600      	movs	r6, #0
 974:	4d0c      	ldr	r5, [pc, #48]	; (9a8 <__libc_init_array+0x38>)
 976:	4c0d      	ldr	r4, [pc, #52]	; (9ac <__libc_init_array+0x3c>)
 978:	1b64      	subs	r4, r4, r5
 97a:	10a4      	asrs	r4, r4, #2
 97c:	42a6      	cmp	r6, r4
 97e:	d109      	bne.n	994 <__libc_init_array+0x24>
 980:	2600      	movs	r6, #0
 982:	f000 f839 	bl	9f8 <_init>
 986:	4d0a      	ldr	r5, [pc, #40]	; (9b0 <__libc_init_array+0x40>)
 988:	4c0a      	ldr	r4, [pc, #40]	; (9b4 <__libc_init_array+0x44>)
 98a:	1b64      	subs	r4, r4, r5
 98c:	10a4      	asrs	r4, r4, #2
 98e:	42a6      	cmp	r6, r4
 990:	d105      	bne.n	99e <__libc_init_array+0x2e>
 992:	bd70      	pop	{r4, r5, r6, pc}
 994:	00b3      	lsls	r3, r6, #2
 996:	58eb      	ldr	r3, [r5, r3]
 998:	4798      	blx	r3
 99a:	3601      	adds	r6, #1
 99c:	e7ee      	b.n	97c <__libc_init_array+0xc>
 99e:	00b3      	lsls	r3, r6, #2
 9a0:	58eb      	ldr	r3, [r5, r3]
 9a2:	4798      	blx	r3
 9a4:	3601      	adds	r6, #1
 9a6:	e7f2      	b.n	98e <__libc_init_array+0x1e>
 9a8:	00000a04 	.word	0x00000a04
 9ac:	00000a04 	.word	0x00000a04
 9b0:	00000a04 	.word	0x00000a04
 9b4:	00000a08 	.word	0x00000a08
 9b8:	0000025a 	.word	0x0000025a
 9bc:	00000256 	.word	0x00000256
 9c0:	00000256 	.word	0x00000256
 9c4:	000002a6 	.word	0x000002a6
 9c8:	000002a6 	.word	0x000002a6
 9cc:	0000026e 	.word	0x0000026e
 9d0:	00000260 	.word	0x00000260
 9d4:	00000274 	.word	0x00000274
 9d8:	0000032c 	.word	0x0000032c
 9dc:	0000030c 	.word	0x0000030c
 9e0:	0000030c 	.word	0x0000030c
 9e4:	0000037c 	.word	0x0000037c
 9e8:	0000031e 	.word	0x0000031e
 9ec:	0000033a 	.word	0x0000033a
 9f0:	00000310 	.word	0x00000310
 9f4:	00000348 	.word	0x00000348

000009f8 <_init>:
 9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 9fa:	46c0      	nop			; (mov r8, r8)
 9fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 9fe:	bc08      	pop	{r3}
 a00:	469e      	mov	lr, r3
 a02:	4770      	bx	lr

00000a04 <__init_array_start>:
 a04:	000000cd 	.word	0x000000cd

00000a08 <_fini>:
 a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 a0a:	46c0      	nop			; (mov r8, r8)
 a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 a0e:	bc08      	pop	{r3}
 a10:	469e      	mov	lr, r3
 a12:	4770      	bx	lr

00000a14 <__fini_array_start>:
 a14:	000000a5 	.word	0x000000a5
