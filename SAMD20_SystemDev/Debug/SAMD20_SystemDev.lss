
SAMD20_SystemDev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e24  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000010  20000000  00001e24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000104  20000010  00001e34  00020010  2**2
                  ALLOC
  3 .stack        00002004  20000114  00001f38  00020010  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
  6 .debug_info   000279ed  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b76  00000000  00000000  00047a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000501b  00000000  00000000  0004b5f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000550  00000000  00000000  0005060f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000578  00000000  00000000  00050b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00013cd6  00000000  00000000  000510d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c6a6  00000000  00000000  00064dad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005fab4  00000000  00000000  00071453  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000d08  00000000  00000000  000d0f08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	18 21 00 20 e9 1a 00 00 e5 1a 00 00 e5 1a 00 00     .!. ............
	...
      2c:	e5 1a 00 00 00 00 00 00 00 00 00 00 e5 1a 00 00     ................
      3c:	81 1b 00 00 e5 1a 00 00 e5 1a 00 00 e5 1a 00 00     ................
      4c:	e5 1a 00 00 e5 1a 00 00 e5 1a 00 00 e5 1a 00 00     ................
      5c:	a5 10 00 00 b5 10 00 00 c5 10 00 00 d5 10 00 00     ................
      6c:	e5 10 00 00 f5 10 00 00 e5 1a 00 00 e5 1a 00 00     ................
      7c:	e5 1a 00 00 e5 1a 00 00 e5 1a 00 00 e5 1a 00 00     ................
      8c:	e5 1a 00 00 e5 1a 00 00 e5 1a 00 00 e5 1a 00 00     ................
      9c:	e5 1a 00 00 e5 1a 00 00                             ........

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	20000010 	.word	0x20000010
      c4:	00000000 	.word	0x00000000
      c8:	00001e24 	.word	0x00001e24

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	20000014 	.word	0x20000014
      f8:	00001e24 	.word	0x00001e24
      fc:	00001e24 	.word	0x00001e24
     100:	00000000 	.word	0x00000000

00000104 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     104:	6802      	ldr	r2, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
     106:	8a13      	ldrh	r3, [r2, #16]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     108:	b21b      	sxth	r3, r3
     10a:	2b00      	cmp	r3, #0
     10c:	dbfb      	blt.n	106 <_i2c_master_wait_for_sync+0x2>
		/* Wait for I2C module to sync. */
	}
}
     10e:	4770      	bx	lr

00000110 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     110:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     112:	7b9a      	ldrb	r2, [r3, #14]
     114:	0792      	lsls	r2, r2, #30
     116:	d507      	bpl.n	128 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     118:	2202      	movs	r2, #2
     11a:	739a      	strb	r2, [r3, #14]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     11c:	8a1b      	ldrh	r3, [r3, #16]
     11e:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     120:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     122:	17db      	asrs	r3, r3, #31
     124:	4018      	ands	r0, r3
}
     126:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     128:	8a1a      	ldrh	r2, [r3, #16]
     12a:	0752      	lsls	r2, r2, #29
     12c:	d506      	bpl.n	13c <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     12e:	6859      	ldr	r1, [r3, #4]
     130:	22c0      	movs	r2, #192	; 0xc0
     132:	0292      	lsls	r2, r2, #10
     134:	430a      	orrs	r2, r1
     136:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     138:	2018      	movs	r0, #24
     13a:	e7f4      	b.n	126 <_i2c_master_address_response+0x16>
	return STATUS_OK;
     13c:	2000      	movs	r0, #0
     13e:	e7f2      	b.n	126 <_i2c_master_address_response+0x16>

00000140 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
static enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     140:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     142:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     144:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     146:	2401      	movs	r4, #1
     148:	2502      	movs	r5, #2
     14a:	7b91      	ldrb	r1, [r2, #14]
     14c:	4221      	tst	r1, r4
     14e:	d10b      	bne.n	168 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     150:	7b91      	ldrb	r1, [r2, #14]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     152:	4229      	tst	r1, r5
     154:	d106      	bne.n	164 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     156:	3301      	adds	r3, #1
     158:	b29b      	uxth	r3, r3
     15a:	8901      	ldrh	r1, [r0, #8]
     15c:	4299      	cmp	r1, r3
     15e:	d8f4      	bhi.n	14a <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     160:	2012      	movs	r0, #18
     162:	e002      	b.n	16a <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     164:	2000      	movs	r0, #0
     166:	e000      	b.n	16a <_i2c_master_wait_for_bus+0x2a>
     168:	2000      	movs	r0, #0
}
     16a:	bd30      	pop	{r4, r5, pc}

0000016c <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     16c:	b5f0      	push	{r4, r5, r6, r7, lr}
     16e:	46de      	mov	lr, fp
     170:	4657      	mov	r7, sl
     172:	464e      	mov	r6, r9
     174:	4645      	mov	r5, r8
     176:	b5e0      	push	{r5, r6, r7, lr}
     178:	b083      	sub	sp, #12
     17a:	0006      	movs	r6, r0
     17c:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     17e:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     180:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	/* Set address and direction bit. Will send start command on bus. */
	i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ;
     182:	880b      	ldrh	r3, [r1, #0]
     184:	005b      	lsls	r3, r3, #1
     186:	2201      	movs	r2, #1
     188:	4313      	orrs	r3, r2
     18a:	b2db      	uxtb	r3, r3
     18c:	752b      	strb	r3, [r5, #20]

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     18e:	4b32      	ldr	r3, [pc, #200]	; (258 <_i2c_master_read_packet+0xec>)
     190:	4798      	blx	r3
     192:	9001      	str	r0, [sp, #4]

	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     194:	686b      	ldr	r3, [r5, #4]
     196:	4a31      	ldr	r2, [pc, #196]	; (25c <_i2c_master_read_packet+0xf0>)
     198:	4013      	ands	r3, r2
     19a:	606b      	str	r3, [r5, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     19c:	2800      	cmp	r0, #0
     19e:	d007      	beq.n	1b0 <_i2c_master_read_packet+0x44>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     1a0:	9801      	ldr	r0, [sp, #4]
     1a2:	b003      	add	sp, #12
     1a4:	bc3c      	pop	{r2, r3, r4, r5}
     1a6:	4690      	mov	r8, r2
     1a8:	4699      	mov	r9, r3
     1aa:	46a2      	mov	sl, r4
     1ac:	46ab      	mov	fp, r5
     1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp_status = _i2c_master_address_response(module);
     1b0:	0030      	movs	r0, r6
     1b2:	4b2b      	ldr	r3, [pc, #172]	; (260 <_i2c_master_read_packet+0xf4>)
     1b4:	4798      	blx	r3
     1b6:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     1b8:	2800      	cmp	r0, #0
     1ba:	d1f1      	bne.n	1a0 <_i2c_master_read_packet+0x34>
     1bc:	3c01      	subs	r4, #1
     1be:	b2a4      	uxth	r4, r4
     1c0:	4680      	mov	r8, r0
		while (tmp_data_length--) {
     1c2:	4b28      	ldr	r3, [pc, #160]	; (264 <_i2c_master_read_packet+0xf8>)
     1c4:	469a      	mov	sl, r3
				_i2c_master_wait_for_sync(module);
     1c6:	4b28      	ldr	r3, [pc, #160]	; (268 <_i2c_master_read_packet+0xfc>)
     1c8:	469b      	mov	fp, r3
     1ca:	e011      	b.n	1f0 <_i2c_master_read_packet+0x84>
     1cc:	0030      	movs	r0, r6
     1ce:	47d8      	blx	fp
				packet->data[counter++] = i2c_module->DATA.reg;
     1d0:	4643      	mov	r3, r8
     1d2:	1c5f      	adds	r7, r3, #1
     1d4:	b2bf      	uxth	r7, r7
     1d6:	7e2b      	ldrb	r3, [r5, #24]
     1d8:	464a      	mov	r2, r9
     1da:	6852      	ldr	r2, [r2, #4]
     1dc:	4641      	mov	r1, r8
     1de:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
     1e0:	0030      	movs	r0, r6
     1e2:	4b1d      	ldr	r3, [pc, #116]	; (258 <_i2c_master_read_packet+0xec>)
     1e4:	4798      	blx	r3
     1e6:	3c01      	subs	r4, #1
     1e8:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
     1ea:	2800      	cmp	r0, #0
     1ec:	d112      	bne.n	214 <_i2c_master_read_packet+0xa8>
				packet->data[counter++] = i2c_module->DATA.reg;
     1ee:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
     1f0:	4554      	cmp	r4, sl
     1f2:	d011      	beq.n	218 <_i2c_master_read_packet+0xac>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     1f4:	8a2b      	ldrh	r3, [r5, #16]
     1f6:	069b      	lsls	r3, r3, #26
     1f8:	d52b      	bpl.n	252 <_i2c_master_read_packet+0xe6>
			if (module->send_nack && tmp_data_length == 0) {
     1fa:	7af3      	ldrb	r3, [r6, #11]
     1fc:	2b00      	cmp	r3, #0
     1fe:	d0e5      	beq.n	1cc <_i2c_master_read_packet+0x60>
     200:	2c00      	cmp	r4, #0
     202:	d1e3      	bne.n	1cc <_i2c_master_read_packet+0x60>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     204:	686a      	ldr	r2, [r5, #4]
     206:	2380      	movs	r3, #128	; 0x80
     208:	02db      	lsls	r3, r3, #11
     20a:	4313      	orrs	r3, r2
     20c:	606b      	str	r3, [r5, #4]
     20e:	3c01      	subs	r4, #1
     210:	b2a4      	uxth	r4, r4
     212:	e7ed      	b.n	1f0 <_i2c_master_read_packet+0x84>
				packet->data[counter++] = i2c_module->DATA.reg;
     214:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
     216:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     218:	7ab3      	ldrb	r3, [r6, #10]
     21a:	2b00      	cmp	r3, #0
     21c:	d010      	beq.n	240 <_i2c_master_read_packet+0xd4>
			_i2c_master_wait_for_sync(module);
     21e:	0030      	movs	r0, r6
     220:	4b11      	ldr	r3, [pc, #68]	; (268 <_i2c_master_read_packet+0xfc>)
     222:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     224:	686a      	ldr	r2, [r5, #4]
     226:	23c0      	movs	r3, #192	; 0xc0
     228:	029b      	lsls	r3, r3, #10
     22a:	4313      	orrs	r3, r2
     22c:	606b      	str	r3, [r5, #4]
		_i2c_master_wait_for_sync(module);
     22e:	0030      	movs	r0, r6
     230:	4b0d      	ldr	r3, [pc, #52]	; (268 <_i2c_master_read_packet+0xfc>)
     232:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     234:	7e2a      	ldrb	r2, [r5, #24]
     236:	464b      	mov	r3, r9
     238:	685b      	ldr	r3, [r3, #4]
     23a:	4641      	mov	r1, r8
     23c:	545a      	strb	r2, [r3, r1]
     23e:	e7af      	b.n	1a0 <_i2c_master_read_packet+0x34>
		  	_i2c_master_wait_for_sync(module);
     240:	0030      	movs	r0, r6
     242:	4b09      	ldr	r3, [pc, #36]	; (268 <_i2c_master_read_packet+0xfc>)
     244:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(1);
     246:	686a      	ldr	r2, [r5, #4]
     248:	2380      	movs	r3, #128	; 0x80
     24a:	025b      	lsls	r3, r3, #9
     24c:	4313      	orrs	r3, r2
     24e:	606b      	str	r3, [r5, #4]
     250:	e7ed      	b.n	22e <_i2c_master_read_packet+0xc2>
				return STATUS_ERR_PACKET_COLLISION;
     252:	2341      	movs	r3, #65	; 0x41
     254:	9301      	str	r3, [sp, #4]
     256:	e7a3      	b.n	1a0 <_i2c_master_read_packet+0x34>
     258:	00000141 	.word	0x00000141
     25c:	fffbffff 	.word	0xfffbffff
     260:	00000111 	.word	0x00000111
     264:	0000ffff 	.word	0x0000ffff
     268:	00000105 	.word	0x00000105

0000026c <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     26c:	b5f0      	push	{r4, r5, r6, r7, lr}
     26e:	46de      	mov	lr, fp
     270:	4657      	mov	r7, sl
     272:	464e      	mov	r6, r9
     274:	4645      	mov	r5, r8
     276:	b5e0      	push	{r5, r6, r7, lr}
     278:	b083      	sub	sp, #12
     27a:	0006      	movs	r6, r0
     27c:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     27e:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     280:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     282:	4b24      	ldr	r3, [pc, #144]	; (314 <_i2c_master_write_packet+0xa8>)
     284:	4798      	blx	r3

	/* Set address and direction bit. Will send start command on bus. */
	i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE;
     286:	883b      	ldrh	r3, [r7, #0]
     288:	005b      	lsls	r3, r3, #1
     28a:	b2db      	uxtb	r3, r3
     28c:	752b      	strb	r3, [r5, #20]

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     28e:	0030      	movs	r0, r6
     290:	4b21      	ldr	r3, [pc, #132]	; (318 <_i2c_master_write_packet+0xac>)
     292:	4798      	blx	r3
     294:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     296:	2800      	cmp	r0, #0
     298:	d007      	beq.n	2aa <_i2c_master_write_packet+0x3e>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     29a:	9801      	ldr	r0, [sp, #4]
     29c:	b003      	add	sp, #12
     29e:	bc3c      	pop	{r2, r3, r4, r5}
     2a0:	4690      	mov	r8, r2
     2a2:	4699      	mov	r9, r3
     2a4:	46a2      	mov	sl, r4
     2a6:	46ab      	mov	fp, r5
     2a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp_status = _i2c_master_address_response(module);
     2aa:	0030      	movs	r0, r6
     2ac:	4b1b      	ldr	r3, [pc, #108]	; (31c <_i2c_master_write_packet+0xb0>)
     2ae:	4798      	blx	r3
     2b0:	1e03      	subs	r3, r0, #0
     2b2:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     2b4:	d1f1      	bne.n	29a <_i2c_master_write_packet+0x2e>
     2b6:	46a0      	mov	r8, r4
     2b8:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     2ba:	3320      	adds	r3, #32
     2bc:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     2be:	4b15      	ldr	r3, [pc, #84]	; (314 <_i2c_master_write_packet+0xa8>)
     2c0:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     2c2:	4b15      	ldr	r3, [pc, #84]	; (318 <_i2c_master_write_packet+0xac>)
     2c4:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     2c6:	4544      	cmp	r4, r8
     2c8:	d014      	beq.n	2f4 <_i2c_master_write_packet+0x88>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     2ca:	8a2b      	ldrh	r3, [r5, #16]
     2cc:	464a      	mov	r2, r9
     2ce:	4213      	tst	r3, r2
     2d0:	d01c      	beq.n	30c <_i2c_master_write_packet+0xa0>
			_i2c_master_wait_for_sync(module);
     2d2:	0030      	movs	r0, r6
     2d4:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     2d6:	687b      	ldr	r3, [r7, #4]
     2d8:	5d1b      	ldrb	r3, [r3, r4]
     2da:	762b      	strb	r3, [r5, #24]
			tmp_status = _i2c_master_wait_for_bus(module);
     2dc:	0030      	movs	r0, r6
     2de:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     2e0:	2800      	cmp	r0, #0
     2e2:	d106      	bne.n	2f2 <_i2c_master_write_packet+0x86>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     2e4:	8a2b      	ldrh	r3, [r5, #16]
     2e6:	3401      	adds	r4, #1
     2e8:	075b      	lsls	r3, r3, #29
     2ea:	d5ec      	bpl.n	2c6 <_i2c_master_write_packet+0x5a>
				tmp_status = STATUS_ERR_OVERFLOW;
     2ec:	231e      	movs	r3, #30
     2ee:	9301      	str	r3, [sp, #4]
     2f0:	e000      	b.n	2f4 <_i2c_master_write_packet+0x88>
			tmp_status = _i2c_master_wait_for_bus(module);
     2f2:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     2f4:	7ab3      	ldrb	r3, [r6, #10]
     2f6:	2b00      	cmp	r3, #0
     2f8:	d0cf      	beq.n	29a <_i2c_master_write_packet+0x2e>
			_i2c_master_wait_for_sync(module);
     2fa:	0030      	movs	r0, r6
     2fc:	4b05      	ldr	r3, [pc, #20]	; (314 <_i2c_master_write_packet+0xa8>)
     2fe:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     300:	686a      	ldr	r2, [r5, #4]
     302:	23c0      	movs	r3, #192	; 0xc0
     304:	029b      	lsls	r3, r3, #10
     306:	4313      	orrs	r3, r2
     308:	606b      	str	r3, [r5, #4]
     30a:	e7c6      	b.n	29a <_i2c_master_write_packet+0x2e>
				return STATUS_ERR_PACKET_COLLISION;
     30c:	2341      	movs	r3, #65	; 0x41
     30e:	9301      	str	r3, [sp, #4]
     310:	e7c3      	b.n	29a <_i2c_master_write_packet+0x2e>
     312:	46c0      	nop			; (mov r8, r8)
     314:	00000105 	.word	0x00000105
     318:	00000141 	.word	0x00000141
     31c:	00000111 	.word	0x00000111

00000320 <i2c_master_init>:
{
     320:	b5f0      	push	{r4, r5, r6, r7, lr}
     322:	46ce      	mov	lr, r9
     324:	4647      	mov	r7, r8
     326:	b580      	push	{r7, lr}
     328:	b083      	sub	sp, #12
     32a:	0007      	movs	r7, r0
     32c:	000d      	movs	r5, r1
     32e:	0016      	movs	r6, r2
	module->hw = hw;
     330:	6039      	str	r1, [r7, #0]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     332:	0008      	movs	r0, r1
     334:	4b52      	ldr	r3, [pc, #328]	; (480 <i2c_master_init+0x160>)
     336:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     338:	4a52      	ldr	r2, [pc, #328]	; (484 <i2c_master_init+0x164>)
     33a:	6a11      	ldr	r1, [r2, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     33c:	1c84      	adds	r4, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     33e:	2301      	movs	r3, #1
     340:	40a3      	lsls	r3, r4
     342:	430b      	orrs	r3, r1
     344:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     346:	a901      	add	r1, sp, #4
     348:	7933      	ldrb	r3, [r6, #4]
     34a:	700b      	strb	r3, [r1, #0]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     34c:	300d      	adds	r0, #13
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     34e:	b2c4      	uxtb	r4, r0
     350:	0020      	movs	r0, r4
     352:	4b4d      	ldr	r3, [pc, #308]	; (488 <i2c_master_init+0x168>)
     354:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     356:	0020      	movs	r0, r4
     358:	4b4c      	ldr	r3, [pc, #304]	; (48c <i2c_master_init+0x16c>)
     35a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     35c:	7930      	ldrb	r0, [r6, #4]
     35e:	2100      	movs	r1, #0
     360:	4b4b      	ldr	r3, [pc, #300]	; (490 <i2c_master_init+0x170>)
     362:	4798      	blx	r3
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     364:	682b      	ldr	r3, [r5, #0]
		return STATUS_ERR_DENIED;
     366:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     368:	079b      	lsls	r3, r3, #30
     36a:	d504      	bpl.n	376 <i2c_master_init+0x56>
}
     36c:	b003      	add	sp, #12
     36e:	bc0c      	pop	{r2, r3}
     370:	4690      	mov	r8, r2
     372:	4699      	mov	r9, r3
     374:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     376:	682b      	ldr	r3, [r5, #0]
		return STATUS_BUSY;
     378:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     37a:	07db      	lsls	r3, r3, #31
     37c:	d4f6      	bmi.n	36c <i2c_master_init+0x4c>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     37e:	6838      	ldr	r0, [r7, #0]
     380:	4b3f      	ldr	r3, [pc, #252]	; (480 <i2c_master_init+0x160>)
     382:	4698      	mov	r8, r3
     384:	4798      	blx	r3
     386:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     388:	4942      	ldr	r1, [pc, #264]	; (494 <i2c_master_init+0x174>)
     38a:	4b43      	ldr	r3, [pc, #268]	; (498 <i2c_master_init+0x178>)
     38c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     38e:	00a4      	lsls	r4, r4, #2
     390:	4b42      	ldr	r3, [pc, #264]	; (49c <i2c_master_init+0x17c>)
     392:	50e7      	str	r7, [r4, r3]
	module->registered_callback = 0;
     394:	2300      	movs	r3, #0
     396:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
     398:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
     39a:	2200      	movs	r2, #0
     39c:	4691      	mov	r9, r2
     39e:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
     3a0:	83bb      	strh	r3, [r7, #28]
	module->status = STATUS_OK;
     3a2:	2225      	movs	r2, #37	; 0x25
     3a4:	4649      	mov	r1, r9
     3a6:	54b9      	strb	r1, [r7, r2]
	module->buffer = NULL;
     3a8:	623b      	str	r3, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE_I2C_MASTER;
     3aa:	3314      	adds	r3, #20
     3ac:	602b      	str	r3, [r5, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     3ae:	683c      	ldr	r4, [r7, #0]
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     3b0:	0020      	movs	r0, r4
     3b2:	47c0      	blx	r8
     3b4:	4680      	mov	r8, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     3b6:	2380      	movs	r3, #128	; 0x80
     3b8:	466a      	mov	r2, sp
     3ba:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3bc:	466b      	mov	r3, sp
     3be:	464a      	mov	r2, r9
     3c0:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     3c2:	2301      	movs	r3, #1
     3c4:	466a      	mov	r2, sp
     3c6:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     3c8:	466b      	mov	r3, sp
     3ca:	464a      	mov	r2, r9
     3cc:	70da      	strb	r2, [r3, #3]
	uint32_t pad0 = config->pinmux_pad0;
     3ce:	6970      	ldr	r0, [r6, #20]
	uint32_t pad1 = config->pinmux_pad1;
     3d0:	69b5      	ldr	r5, [r6, #24]
	if (pad0 == PINMUX_DEFAULT) {
     3d2:	2800      	cmp	r0, #0
     3d4:	d048      	beq.n	468 <i2c_master_init+0x148>
	pin_conf.mux_position = pad0 & 0xFFFF;
     3d6:	466b      	mov	r3, sp
     3d8:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     3da:	2302      	movs	r3, #2
     3dc:	466a      	mov	r2, sp
     3de:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     3e0:	0c00      	lsrs	r0, r0, #16
     3e2:	b2c0      	uxtb	r0, r0
     3e4:	4669      	mov	r1, sp
     3e6:	4b2e      	ldr	r3, [pc, #184]	; (4a0 <i2c_master_init+0x180>)
     3e8:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     3ea:	2d00      	cmp	r5, #0
     3ec:	d041      	beq.n	472 <i2c_master_init+0x152>
	pin_conf.mux_position = pad1 & 0xFFFF;
     3ee:	466b      	mov	r3, sp
     3f0:	701d      	strb	r5, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     3f2:	2302      	movs	r3, #2
     3f4:	466a      	mov	r2, sp
     3f6:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     3f8:	0c28      	lsrs	r0, r5, #16
     3fa:	b2c0      	uxtb	r0, r0
     3fc:	4669      	mov	r1, sp
     3fe:	4b28      	ldr	r3, [pc, #160]	; (4a0 <i2c_master_init+0x180>)
     400:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     402:	89b3      	ldrh	r3, [r6, #12]
     404:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
     406:	89f3      	ldrh	r3, [r6, #14]
     408:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     40a:	7c32      	ldrb	r2, [r6, #16]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     40c:	2380      	movs	r3, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     40e:	2a00      	cmp	r2, #0
     410:	d104      	bne.n	41c <i2c_master_init+0xfc>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     412:	4b24      	ldr	r3, [pc, #144]	; (4a4 <i2c_master_init+0x184>)
     414:	789b      	ldrb	r3, [r3, #2]
     416:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     418:	0fdb      	lsrs	r3, r3, #31
     41a:	01db      	lsls	r3, r3, #7
		tmp_ctrla |= config->start_hold_time;
     41c:	68b2      	ldr	r2, [r6, #8]
     41e:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     420:	7f32      	ldrb	r2, [r6, #28]
     422:	2a00      	cmp	r2, #0
     424:	d002      	beq.n	42c <i2c_master_init+0x10c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUT;
     426:	2280      	movs	r2, #128	; 0x80
     428:	05d2      	lsls	r2, r2, #23
     42a:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     42c:	6822      	ldr	r2, [r4, #0]
     42e:	6a31      	ldr	r1, [r6, #32]
     430:	430a      	orrs	r2, r1
     432:	4313      	orrs	r3, r2
     434:	6023      	str	r3, [r4, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     436:	2380      	movs	r3, #128	; 0x80
     438:	005b      	lsls	r3, r3, #1
     43a:	6063      	str	r3, [r4, #4]
	tmp_baud = (int32_t)(div_ceil(
     43c:	4645      	mov	r5, r8
     43e:	350d      	adds	r5, #13
     440:	b2e8      	uxtb	r0, r5
     442:	4b19      	ldr	r3, [pc, #100]	; (4a8 <i2c_master_init+0x188>)
     444:	4798      	blx	r3
     446:	6833      	ldr	r3, [r6, #0]
     448:	21fa      	movs	r1, #250	; 0xfa
     44a:	00c9      	lsls	r1, r1, #3
     44c:	4359      	muls	r1, r3
     44e:	1e4b      	subs	r3, r1, #1
     450:	1818      	adds	r0, r3, r0
     452:	4b16      	ldr	r3, [pc, #88]	; (4ac <i2c_master_init+0x18c>)
     454:	4798      	blx	r3
				(2000*(config->baud_rate))) - 5);
     456:	1f43      	subs	r3, r0, #5
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
     458:	2040      	movs	r0, #64	; 0x40
	if (tmp_baud > 255 || tmp_baud < 0) {
     45a:	2bff      	cmp	r3, #255	; 0xff
     45c:	d900      	bls.n	460 <i2c_master_init+0x140>
     45e:	e785      	b.n	36c <i2c_master_init+0x4c>
		i2c_module->BAUD.reg = (uint8_t)tmp_baud;
     460:	b2db      	uxtb	r3, r3
     462:	8163      	strh	r3, [r4, #10]
	enum status_code tmp_status_code = STATUS_OK;
     464:	2000      	movs	r0, #0
     466:	e781      	b.n	36c <i2c_master_init+0x4c>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     468:	2100      	movs	r1, #0
     46a:	0020      	movs	r0, r4
     46c:	4b10      	ldr	r3, [pc, #64]	; (4b0 <i2c_master_init+0x190>)
     46e:	4798      	blx	r3
     470:	e7b1      	b.n	3d6 <i2c_master_init+0xb6>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     472:	2101      	movs	r1, #1
     474:	0020      	movs	r0, r4
     476:	4b0e      	ldr	r3, [pc, #56]	; (4b0 <i2c_master_init+0x190>)
     478:	4798      	blx	r3
     47a:	0005      	movs	r5, r0
     47c:	e7b7      	b.n	3ee <i2c_master_init+0xce>
     47e:	46c0      	nop			; (mov r8, r8)
     480:	00000b1d 	.word	0x00000b1d
     484:	40000400 	.word	0x40000400
     488:	0000198d 	.word	0x0000198d
     48c:	00001901 	.word	0x00001901
     490:	00000959 	.word	0x00000959
     494:	00000611 	.word	0x00000611
     498:	00001039 	.word	0x00001039
     49c:	20000068 	.word	0x20000068
     4a0:	00001a85 	.word	0x00001a85
     4a4:	41002000 	.word	0x41002000
     4a8:	000019a9 	.word	0x000019a9
     4ac:	00001bdd 	.word	0x00001bdd
     4b0:	000009a5 	.word	0x000009a5

000004b4 <i2c_master_read_packet_wait>:
{
     4b4:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
     4b6:	8b83      	ldrh	r3, [r0, #28]
     4b8:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     4ba:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     4bc:	2b00      	cmp	r3, #0
     4be:	d001      	beq.n	4c4 <i2c_master_read_packet_wait+0x10>
}
     4c0:	0010      	movs	r0, r2
     4c2:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     4c4:	3301      	adds	r3, #1
     4c6:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     4c8:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     4ca:	4b02      	ldr	r3, [pc, #8]	; (4d4 <i2c_master_read_packet_wait+0x20>)
     4cc:	4798      	blx	r3
     4ce:	0002      	movs	r2, r0
     4d0:	e7f6      	b.n	4c0 <i2c_master_read_packet_wait+0xc>
     4d2:	46c0      	nop			; (mov r8, r8)
     4d4:	0000016d 	.word	0x0000016d

000004d8 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     4d8:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     4da:	8b83      	ldrh	r3, [r0, #28]
     4dc:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     4de:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     4e0:	2b00      	cmp	r3, #0
     4e2:	d001      	beq.n	4e8 <i2c_master_write_packet_wait+0x10>

	module->send_stop = true;
	module->send_nack = true;
	
	return _i2c_master_write_packet(module, packet);
}
     4e4:	0010      	movs	r0, r2
     4e6:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     4e8:	3301      	adds	r3, #1
     4ea:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     4ec:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     4ee:	4b02      	ldr	r3, [pc, #8]	; (4f8 <i2c_master_write_packet_wait+0x20>)
     4f0:	4798      	blx	r3
     4f2:	0002      	movs	r2, r0
     4f4:	e7f6      	b.n	4e4 <i2c_master_write_packet_wait+0xc>
     4f6:	46c0      	nop			; (mov r8, r8)
     4f8:	0000026d 	.word	0x0000026d

000004fc <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     4fc:	6802      	ldr	r2, [r0, #0]
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
     4fe:	8a13      	ldrh	r3, [r2, #16]
	while (i2c_master_is_syncing(module)) {
     500:	b21b      	sxth	r3, r3
     502:	2b00      	cmp	r3, #0
     504:	dbfb      	blt.n	4fe <_i2c_master_wait_for_sync+0x2>
}
     506:	4770      	bx	lr

00000508 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     508:	b570      	push	{r4, r5, r6, lr}
     50a:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     50c:	6806      	ldr	r6, [r0, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
     50e:	8b45      	ldrh	r5, [r0, #26]
     510:	8b83      	ldrh	r3, [r0, #28]
     512:	1aed      	subs	r5, r5, r3
     514:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     516:	8b83      	ldrh	r3, [r0, #28]
     518:	3b01      	subs	r3, #1
     51a:	b29b      	uxth	r3, r3
     51c:	8383      	strh	r3, [r0, #28]

	if (!module->buffer_remaining) {
     51e:	8b83      	ldrh	r3, [r0, #28]
     520:	b29b      	uxth	r3, r3
     522:	2b00      	cmp	r3, #0
     524:	d11c      	bne.n	560 <_i2c_master_read+0x58>
		/* Send nack */
	  	if (module->send_nack)
     526:	7ac3      	ldrb	r3, [r0, #11]
     528:	2b00      	cmp	r3, #0
     52a:	d004      	beq.n	536 <_i2c_master_read+0x2e>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     52c:	6872      	ldr	r2, [r6, #4]
     52e:	2380      	movs	r3, #128	; 0x80
     530:	02db      	lsls	r3, r3, #11
     532:	4313      	orrs	r3, r2
     534:	6073      	str	r3, [r6, #4]
		if (module->send_stop) {
     536:	7aa3      	ldrb	r3, [r4, #10]
     538:	2b00      	cmp	r3, #0
     53a:	d008      	beq.n	54e <_i2c_master_read+0x46>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
     53c:	0020      	movs	r0, r4
     53e:	4b0f      	ldr	r3, [pc, #60]	; (57c <_i2c_master_read+0x74>)
     540:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     542:	6872      	ldr	r2, [r6, #4]
     544:	23c0      	movs	r3, #192	; 0xc0
     546:	029b      	lsls	r3, r3, #10
     548:	4313      	orrs	r3, r2
     54a:	6073      	str	r3, [r6, #4]
     54c:	e00c      	b.n	568 <_i2c_master_read+0x60>
		} else {
		  	_i2c_master_wait_for_sync(module);
     54e:	0020      	movs	r0, r4
     550:	4b0a      	ldr	r3, [pc, #40]	; (57c <_i2c_master_read+0x74>)
     552:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(1);
     554:	6872      	ldr	r2, [r6, #4]
     556:	2380      	movs	r3, #128	; 0x80
     558:	025b      	lsls	r3, r3, #9
     55a:	4313      	orrs	r3, r2
     55c:	6073      	str	r3, [r6, #4]
     55e:	e003      	b.n	568 <_i2c_master_read+0x60>
		}
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     560:	6873      	ldr	r3, [r6, #4]
     562:	4a07      	ldr	r2, [pc, #28]	; (580 <_i2c_master_read+0x78>)
     564:	4013      	ands	r3, r2
     566:	6073      	str	r3, [r6, #4]
	}

	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     568:	0020      	movs	r0, r4
     56a:	4b04      	ldr	r3, [pc, #16]	; (57c <_i2c_master_read+0x74>)
     56c:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     56e:	6a23      	ldr	r3, [r4, #32]
     570:	195d      	adds	r5, r3, r5
     572:	7e33      	ldrb	r3, [r6, #24]
     574:	b2db      	uxtb	r3, r3
     576:	702b      	strb	r3, [r5, #0]
}
     578:	bd70      	pop	{r4, r5, r6, pc}
     57a:	46c0      	nop			; (mov r8, r8)
     57c:	000004fd 	.word	0x000004fd
     580:	fffbffff 	.word	0xfffbffff

00000584 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     584:	b570      	push	{r4, r5, r6, lr}
     586:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     588:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     58a:	8a2b      	ldrh	r3, [r5, #16]
     58c:	075b      	lsls	r3, r3, #29
     58e:	d503      	bpl.n	598 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     590:	221e      	movs	r2, #30
     592:	2325      	movs	r3, #37	; 0x25
     594:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     596:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
     598:	8b46      	ldrh	r6, [r0, #26]
     59a:	8b83      	ldrh	r3, [r0, #28]
     59c:	1af6      	subs	r6, r6, r3
     59e:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     5a0:	8b83      	ldrh	r3, [r0, #28]
     5a2:	3b01      	subs	r3, #1
     5a4:	b29b      	uxth	r3, r3
     5a6:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     5a8:	4b03      	ldr	r3, [pc, #12]	; (5b8 <_i2c_master_write+0x34>)
     5aa:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     5ac:	6a23      	ldr	r3, [r4, #32]
     5ae:	199e      	adds	r6, r3, r6
     5b0:	7833      	ldrb	r3, [r6, #0]
     5b2:	b2db      	uxtb	r3, r3
     5b4:	762b      	strb	r3, [r5, #24]
     5b6:	e7ee      	b.n	596 <_i2c_master_write+0x12>
     5b8:	000004fd 	.word	0x000004fd

000005bc <i2c_master_register_callback>:
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
     5bc:	1c93      	adds	r3, r2, #2
     5be:	009b      	lsls	r3, r3, #2
     5c0:	18c3      	adds	r3, r0, r3
     5c2:	6059      	str	r1, [r3, #4]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
     5c4:	7e03      	ldrb	r3, [r0, #24]
     5c6:	2101      	movs	r1, #1
     5c8:	4091      	lsls	r1, r2
     5ca:	430b      	orrs	r3, r1
     5cc:	b2db      	uxtb	r3, r3
     5ce:	7603      	strb	r3, [r0, #24]
}
     5d0:	4770      	bx	lr

000005d2 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     5d2:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     5d4:	8b83      	ldrh	r3, [r0, #28]
     5d6:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     5d8:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     5da:	2b00      	cmp	r3, #0
     5dc:	d001      	beq.n	5e2 <i2c_master_read_packet_job+0x10>
	/* Make sure we send STOP */
	module->send_stop = true;
	module->send_nack = true;
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
}
     5de:	0010      	movs	r0, r2
     5e0:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     5e2:	3301      	adds	r3, #1
     5e4:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     5e6:	72c3      	strb	r3, [r0, #11]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     5e8:	6802      	ldr	r2, [r0, #0]
	module->buffer             = packet->data;
     5ea:	684c      	ldr	r4, [r1, #4]
     5ec:	6204      	str	r4, [r0, #32]
	module->buffer_remaining   = packet->data_length;
     5ee:	884c      	ldrh	r4, [r1, #2]
     5f0:	8384      	strh	r4, [r0, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
     5f2:	2424      	movs	r4, #36	; 0x24
     5f4:	5503      	strb	r3, [r0, r4]
	module->status             = STATUS_BUSY;
     5f6:	3c1f      	subs	r4, #31
     5f8:	3324      	adds	r3, #36	; 0x24
     5fa:	54c4      	strb	r4, [r0, r3]
	i2c_module->INTENSET.reg =
     5fc:	3b22      	subs	r3, #34	; 0x22
     5fe:	7353      	strb	r3, [r2, #13]
	i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ;
     600:	880b      	ldrh	r3, [r1, #0]
     602:	005b      	lsls	r3, r3, #1
     604:	2101      	movs	r1, #1
     606:	430b      	orrs	r3, r1
     608:	b2db      	uxtb	r3, r3
     60a:	7513      	strb	r3, [r2, #20]
	return _i2c_master_read_packet(module, packet);
     60c:	2200      	movs	r2, #0
     60e:	e7e6      	b.n	5de <i2c_master_read_packet_job+0xc>

00000610 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     610:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     612:	0080      	lsls	r0, r0, #2
     614:	4b6e      	ldr	r3, [pc, #440]	; (7d0 <_i2c_master_interrupt_handler+0x1c0>)
     616:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     618:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback &
     61a:	7e63      	ldrb	r3, [r4, #25]
			module->registered_callback;
     61c:	7e25      	ldrb	r5, [r4, #24]
	uint8_t callback_mask = module->enabled_callback &
     61e:	401d      	ands	r5, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     620:	8b63      	ldrh	r3, [r4, #26]
     622:	b29b      	uxth	r3, r3
     624:	2b00      	cmp	r3, #0
     626:	d103      	bne.n	630 <_i2c_master_interrupt_handler+0x20>
     628:	8ba3      	ldrh	r3, [r4, #28]
     62a:	b29b      	uxth	r3, r3
     62c:	2b00      	cmp	r3, #0
     62e:	d141      	bne.n	6b4 <_i2c_master_interrupt_handler+0xa4>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     630:	8b63      	ldrh	r3, [r4, #26]
     632:	b29b      	uxth	r3, r3
     634:	2b00      	cmp	r3, #0
     636:	d008      	beq.n	64a <_i2c_master_interrupt_handler+0x3a>
     638:	8ba3      	ldrh	r3, [r4, #28]
     63a:	b29b      	uxth	r3, r3
     63c:	2b00      	cmp	r3, #0
     63e:	d104      	bne.n	64a <_i2c_master_interrupt_handler+0x3a>
			(module->status == STATUS_BUSY) &&
     640:	3325      	adds	r3, #37	; 0x25
     642:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     644:	2b05      	cmp	r3, #5
     646:	d100      	bne.n	64a <_i2c_master_interrupt_handler+0x3a>
     648:	e066      	b.n	718 <_i2c_master_interrupt_handler+0x108>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     64a:	8b63      	ldrh	r3, [r4, #26]
     64c:	b29b      	uxth	r3, r3
     64e:	2b00      	cmp	r3, #0
     650:	d00a      	beq.n	668 <_i2c_master_interrupt_handler+0x58>
     652:	8ba3      	ldrh	r3, [r4, #28]
     654:	b29b      	uxth	r3, r3
     656:	2b00      	cmp	r3, #0
     658:	d006      	beq.n	668 <_i2c_master_interrupt_handler+0x58>
		/* Check that bus ownership is not lost */
		if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     65a:	8a33      	ldrh	r3, [r6, #16]
     65c:	069b      	lsls	r3, r3, #26
     65e:	d500      	bpl.n	662 <_i2c_master_interrupt_handler+0x52>
     660:	e07b      	b.n	75a <_i2c_master_interrupt_handler+0x14a>
			module->status = STATUS_ERR_PACKET_COLLISION;
     662:	2241      	movs	r2, #65	; 0x41
     664:	2325      	movs	r3, #37	; 0x25
     666:	54e2      	strb	r2, [r4, r3]
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     668:	8b63      	ldrh	r3, [r4, #26]
     66a:	b29b      	uxth	r3, r3
     66c:	2b00      	cmp	r3, #0
     66e:	d008      	beq.n	682 <_i2c_master_interrupt_handler+0x72>
     670:	8ba3      	ldrh	r3, [r4, #28]
     672:	b29b      	uxth	r3, r3
     674:	2b00      	cmp	r3, #0
     676:	d104      	bne.n	682 <_i2c_master_interrupt_handler+0x72>
			(module->status == STATUS_BUSY) &&
     678:	3325      	adds	r3, #37	; 0x25
     67a:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     67c:	2b05      	cmp	r3, #5
     67e:	d100      	bne.n	682 <_i2c_master_interrupt_handler+0x72>
     680:	e077      	b.n	772 <_i2c_master_interrupt_handler+0x162>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     682:	2325      	movs	r3, #37	; 0x25
     684:	5ce3      	ldrb	r3, [r4, r3]
     686:	2b05      	cmp	r3, #5
     688:	d013      	beq.n	6b2 <_i2c_master_interrupt_handler+0xa2>
     68a:	2325      	movs	r3, #37	; 0x25
     68c:	5ce3      	ldrb	r3, [r4, r3]
     68e:	2b00      	cmp	r3, #0
     690:	d00f      	beq.n	6b2 <_i2c_master_interrupt_handler+0xa2>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     692:	2303      	movs	r3, #3
     694:	7333      	strb	r3, [r6, #12]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     696:	2300      	movs	r3, #0
     698:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     69a:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     69c:	3325      	adds	r3, #37	; 0x25
     69e:	5ce3      	ldrb	r3, [r4, r3]
     6a0:	2b41      	cmp	r3, #65	; 0x41
     6a2:	d003      	beq.n	6ac <_i2c_master_interrupt_handler+0x9c>
     6a4:	7aa3      	ldrb	r3, [r4, #10]
     6a6:	2b00      	cmp	r3, #0
     6a8:	d000      	beq.n	6ac <_i2c_master_interrupt_handler+0x9c>
     6aa:	e084      	b.n	7b6 <_i2c_master_interrupt_handler+0x1a6>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     6ac:	076b      	lsls	r3, r5, #29
     6ae:	d500      	bpl.n	6b2 <_i2c_master_interrupt_handler+0xa2>
     6b0:	e08a      	b.n	7c8 <_i2c_master_interrupt_handler+0x1b8>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     6b2:	bd70      	pop	{r4, r5, r6, pc}
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     6b4:	7bb3      	ldrb	r3, [r6, #14]
     6b6:	07db      	lsls	r3, r3, #31
     6b8:	d507      	bpl.n	6ca <_i2c_master_interrupt_handler+0xba>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     6ba:	2301      	movs	r3, #1
     6bc:	73b3      	strb	r3, [r6, #14]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     6be:	8a33      	ldrh	r3, [r6, #16]
     6c0:	079b      	lsls	r3, r3, #30
     6c2:	d502      	bpl.n	6ca <_i2c_master_interrupt_handler+0xba>
			module->status = STATUS_ERR_PACKET_COLLISION;
     6c4:	2241      	movs	r2, #65	; 0x41
     6c6:	2325      	movs	r3, #37	; 0x25
     6c8:	54e2      	strb	r2, [r4, r3]
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     6ca:	8a33      	ldrh	r3, [r6, #16]
     6cc:	075b      	lsls	r3, r3, #29
     6ce:	d507      	bpl.n	6e0 <_i2c_master_interrupt_handler+0xd0>
		module->status           = STATUS_ERR_BAD_ADDRESS;
     6d0:	2218      	movs	r2, #24
     6d2:	2325      	movs	r3, #37	; 0x25
     6d4:	54e2      	strb	r2, [r4, r3]
		module->buffer_remaining = 0;
     6d6:	2300      	movs	r3, #0
     6d8:	83a3      	strh	r3, [r4, #28]
		if (module->send_stop) {
     6da:	7aa3      	ldrb	r3, [r4, #10]
     6dc:	2b00      	cmp	r3, #0
     6de:	d10e      	bne.n	6fe <_i2c_master_interrupt_handler+0xee>
	module->buffer_length = module->buffer_remaining;
     6e0:	8ba3      	ldrh	r3, [r4, #28]
     6e2:	b29b      	uxth	r3, r3
     6e4:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     6e6:	2325      	movs	r3, #37	; 0x25
     6e8:	5ce3      	ldrb	r3, [r4, r3]
     6ea:	2b05      	cmp	r3, #5
     6ec:	d1bc      	bne.n	668 <_i2c_master_interrupt_handler+0x58>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     6ee:	331f      	adds	r3, #31
     6f0:	5ce3      	ldrb	r3, [r4, r3]
     6f2:	2b00      	cmp	r3, #0
     6f4:	d00c      	beq.n	710 <_i2c_master_interrupt_handler+0x100>
			_i2c_master_read(module);
     6f6:	0020      	movs	r0, r4
     6f8:	4b36      	ldr	r3, [pc, #216]	; (7d4 <_i2c_master_interrupt_handler+0x1c4>)
     6fa:	4798      	blx	r3
     6fc:	e7b4      	b.n	668 <_i2c_master_interrupt_handler+0x58>
			_i2c_master_wait_for_sync(module);
     6fe:	0020      	movs	r0, r4
     700:	4b35      	ldr	r3, [pc, #212]	; (7d8 <_i2c_master_interrupt_handler+0x1c8>)
     702:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     704:	6872      	ldr	r2, [r6, #4]
     706:	23c0      	movs	r3, #192	; 0xc0
     708:	029b      	lsls	r3, r3, #10
     70a:	4313      	orrs	r3, r2
     70c:	6073      	str	r3, [r6, #4]
     70e:	e7e7      	b.n	6e0 <_i2c_master_interrupt_handler+0xd0>
			_i2c_master_write(module);
     710:	0020      	movs	r0, r4
     712:	4b32      	ldr	r3, [pc, #200]	; (7dc <_i2c_master_interrupt_handler+0x1cc>)
     714:	4798      	blx	r3
     716:	e7a7      	b.n	668 <_i2c_master_interrupt_handler+0x58>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     718:	331f      	adds	r3, #31
     71a:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     71c:	2b00      	cmp	r3, #0
     71e:	d000      	beq.n	722 <_i2c_master_interrupt_handler+0x112>
     720:	e793      	b.n	64a <_i2c_master_interrupt_handler+0x3a>
		i2c_module->INTENCLR.reg =
     722:	3303      	adds	r3, #3
     724:	7333      	strb	r3, [r6, #12]
		module->buffer_length = 0;
     726:	2300      	movs	r3, #0
     728:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     72a:	3325      	adds	r3, #37	; 0x25
     72c:	2200      	movs	r2, #0
     72e:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     730:	7aa3      	ldrb	r3, [r4, #10]
     732:	2b00      	cmp	r3, #0
     734:	d108      	bne.n	748 <_i2c_master_interrupt_handler+0x138>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     736:	2301      	movs	r3, #1
     738:	73b3      	strb	r3, [r6, #14]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     73a:	07eb      	lsls	r3, r5, #31
     73c:	d400      	bmi.n	740 <_i2c_master_interrupt_handler+0x130>
     73e:	e793      	b.n	668 <_i2c_master_interrupt_handler+0x58>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     740:	68e3      	ldr	r3, [r4, #12]
     742:	0020      	movs	r0, r4
     744:	4798      	blx	r3
     746:	e78f      	b.n	668 <_i2c_master_interrupt_handler+0x58>
			_i2c_master_wait_for_sync(module);
     748:	0020      	movs	r0, r4
     74a:	4b23      	ldr	r3, [pc, #140]	; (7d8 <_i2c_master_interrupt_handler+0x1c8>)
     74c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     74e:	6872      	ldr	r2, [r6, #4]
     750:	23c0      	movs	r3, #192	; 0xc0
     752:	029b      	lsls	r3, r3, #10
     754:	4313      	orrs	r3, r2
     756:	6073      	str	r3, [r6, #4]
     758:	e7ef      	b.n	73a <_i2c_master_interrupt_handler+0x12a>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     75a:	2324      	movs	r3, #36	; 0x24
     75c:	5ce3      	ldrb	r3, [r4, r3]
     75e:	2b00      	cmp	r3, #0
     760:	d103      	bne.n	76a <_i2c_master_interrupt_handler+0x15a>
			_i2c_master_write(module);
     762:	0020      	movs	r0, r4
     764:	4b1d      	ldr	r3, [pc, #116]	; (7dc <_i2c_master_interrupt_handler+0x1cc>)
     766:	4798      	blx	r3
     768:	e77e      	b.n	668 <_i2c_master_interrupt_handler+0x58>
			_i2c_master_read(module);
     76a:	0020      	movs	r0, r4
     76c:	4b19      	ldr	r3, [pc, #100]	; (7d4 <_i2c_master_interrupt_handler+0x1c4>)
     76e:	4798      	blx	r3
     770:	e77a      	b.n	668 <_i2c_master_interrupt_handler+0x58>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     772:	331f      	adds	r3, #31
     774:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     776:	2b01      	cmp	r3, #1
     778:	d000      	beq.n	77c <_i2c_master_interrupt_handler+0x16c>
     77a:	e782      	b.n	682 <_i2c_master_interrupt_handler+0x72>
		i2c_module->INTENCLR.reg =
     77c:	3302      	adds	r3, #2
     77e:	7333      	strb	r3, [r6, #12]
		module->buffer_length = 0;
     780:	2300      	movs	r3, #0
     782:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     784:	3325      	adds	r3, #37	; 0x25
     786:	2200      	movs	r2, #0
     788:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     78a:	07ab      	lsls	r3, r5, #30
     78c:	d503      	bpl.n	796 <_i2c_master_interrupt_handler+0x186>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     78e:	2324      	movs	r3, #36	; 0x24
     790:	5ce3      	ldrb	r3, [r4, r3]
     792:	2b01      	cmp	r3, #1
     794:	d00b      	beq.n	7ae <_i2c_master_interrupt_handler+0x19e>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     796:	07eb      	lsls	r3, r5, #31
     798:	d400      	bmi.n	79c <_i2c_master_interrupt_handler+0x18c>
     79a:	e772      	b.n	682 <_i2c_master_interrupt_handler+0x72>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     79c:	2324      	movs	r3, #36	; 0x24
     79e:	5ce3      	ldrb	r3, [r4, r3]
     7a0:	2b00      	cmp	r3, #0
     7a2:	d000      	beq.n	7a6 <_i2c_master_interrupt_handler+0x196>
     7a4:	e76d      	b.n	682 <_i2c_master_interrupt_handler+0x72>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     7a6:	68e3      	ldr	r3, [r4, #12]
     7a8:	0020      	movs	r0, r4
     7aa:	4798      	blx	r3
     7ac:	e769      	b.n	682 <_i2c_master_interrupt_handler+0x72>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     7ae:	6923      	ldr	r3, [r4, #16]
     7b0:	0020      	movs	r0, r4
     7b2:	4798      	blx	r3
     7b4:	e765      	b.n	682 <_i2c_master_interrupt_handler+0x72>
			_i2c_master_wait_for_sync(module);
     7b6:	0020      	movs	r0, r4
     7b8:	4b07      	ldr	r3, [pc, #28]	; (7d8 <_i2c_master_interrupt_handler+0x1c8>)
     7ba:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     7bc:	6872      	ldr	r2, [r6, #4]
     7be:	23e0      	movs	r3, #224	; 0xe0
     7c0:	02db      	lsls	r3, r3, #11
     7c2:	4313      	orrs	r3, r2
     7c4:	6073      	str	r3, [r6, #4]
     7c6:	e771      	b.n	6ac <_i2c_master_interrupt_handler+0x9c>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     7c8:	6963      	ldr	r3, [r4, #20]
     7ca:	0020      	movs	r0, r4
     7cc:	4798      	blx	r3
}
     7ce:	e770      	b.n	6b2 <_i2c_master_interrupt_handler+0xa2>
     7d0:	20000068 	.word	0x20000068
     7d4:	00000509 	.word	0x00000509
     7d8:	000004fd 	.word	0x000004fd
     7dc:	00000585 	.word	0x00000585

000007e0 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     7e2:	46de      	mov	lr, fp
     7e4:	4657      	mov	r7, sl
     7e6:	464e      	mov	r6, r9
     7e8:	4645      	mov	r5, r8
     7ea:	b5e0      	push	{r5, r6, r7, lr}
     7ec:	b087      	sub	sp, #28
     7ee:	4680      	mov	r8, r0
     7f0:	9104      	str	r1, [sp, #16]
     7f2:	0016      	movs	r6, r2
     7f4:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     7f6:	2200      	movs	r2, #0
     7f8:	2300      	movs	r3, #0
     7fa:	2100      	movs	r1, #0
     7fc:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     7fe:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     800:	2001      	movs	r0, #1
     802:	0021      	movs	r1, r4
     804:	9600      	str	r6, [sp, #0]
     806:	9701      	str	r7, [sp, #4]
     808:	465c      	mov	r4, fp
     80a:	9403      	str	r4, [sp, #12]
     80c:	4644      	mov	r4, r8
     80e:	9405      	str	r4, [sp, #20]
     810:	e013      	b.n	83a <long_division+0x5a>
     812:	2420      	movs	r4, #32
     814:	1a64      	subs	r4, r4, r1
     816:	0005      	movs	r5, r0
     818:	40e5      	lsrs	r5, r4
     81a:	46a8      	mov	r8, r5
     81c:	e014      	b.n	848 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     81e:	9c00      	ldr	r4, [sp, #0]
     820:	9d01      	ldr	r5, [sp, #4]
     822:	1b12      	subs	r2, r2, r4
     824:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     826:	465c      	mov	r4, fp
     828:	464d      	mov	r5, r9
     82a:	432c      	orrs	r4, r5
     82c:	46a3      	mov	fp, r4
     82e:	9c03      	ldr	r4, [sp, #12]
     830:	4645      	mov	r5, r8
     832:	432c      	orrs	r4, r5
     834:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     836:	3901      	subs	r1, #1
     838:	d325      	bcc.n	886 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     83a:	2420      	movs	r4, #32
     83c:	4264      	negs	r4, r4
     83e:	190c      	adds	r4, r1, r4
     840:	d4e7      	bmi.n	812 <long_division+0x32>
     842:	0005      	movs	r5, r0
     844:	40a5      	lsls	r5, r4
     846:	46a8      	mov	r8, r5
     848:	0004      	movs	r4, r0
     84a:	408c      	lsls	r4, r1
     84c:	46a1      	mov	r9, r4
		r = r << 1;
     84e:	1892      	adds	r2, r2, r2
     850:	415b      	adcs	r3, r3
     852:	0014      	movs	r4, r2
     854:	001d      	movs	r5, r3
		if (n & bit_shift) {
     856:	9e05      	ldr	r6, [sp, #20]
     858:	464f      	mov	r7, r9
     85a:	403e      	ands	r6, r7
     85c:	46b4      	mov	ip, r6
     85e:	9e04      	ldr	r6, [sp, #16]
     860:	4647      	mov	r7, r8
     862:	403e      	ands	r6, r7
     864:	46b2      	mov	sl, r6
     866:	4666      	mov	r6, ip
     868:	4657      	mov	r7, sl
     86a:	433e      	orrs	r6, r7
     86c:	d003      	beq.n	876 <long_division+0x96>
			r |= 0x01;
     86e:	0006      	movs	r6, r0
     870:	4326      	orrs	r6, r4
     872:	0032      	movs	r2, r6
     874:	002b      	movs	r3, r5
		if (r >= d) {
     876:	9c00      	ldr	r4, [sp, #0]
     878:	9d01      	ldr	r5, [sp, #4]
     87a:	429d      	cmp	r5, r3
     87c:	d8db      	bhi.n	836 <long_division+0x56>
     87e:	d1ce      	bne.n	81e <long_division+0x3e>
     880:	4294      	cmp	r4, r2
     882:	d8d8      	bhi.n	836 <long_division+0x56>
     884:	e7cb      	b.n	81e <long_division+0x3e>
     886:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     888:	4658      	mov	r0, fp
     88a:	0019      	movs	r1, r3
     88c:	b007      	add	sp, #28
     88e:	bc3c      	pop	{r2, r3, r4, r5}
     890:	4690      	mov	r8, r2
     892:	4699      	mov	r9, r3
     894:	46a2      	mov	sl, r4
     896:	46ab      	mov	fp, r5
     898:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000089a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     89a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     89c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     89e:	2340      	movs	r3, #64	; 0x40
     8a0:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     8a2:	4281      	cmp	r1, r0
     8a4:	d202      	bcs.n	8ac <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     8a6:	0018      	movs	r0, r3
     8a8:	bd10      	pop	{r4, pc}
		baud_calculated++;
     8aa:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     8ac:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     8ae:	1c63      	adds	r3, r4, #1
     8b0:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     8b2:	4288      	cmp	r0, r1
     8b4:	d9f9      	bls.n	8aa <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     8b6:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     8b8:	2cff      	cmp	r4, #255	; 0xff
     8ba:	d8f4      	bhi.n	8a6 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     8bc:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     8be:	2300      	movs	r3, #0
     8c0:	e7f1      	b.n	8a6 <_sercom_get_sync_baud_val+0xc>
	...

000008c4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     8c4:	b5f0      	push	{r4, r5, r6, r7, lr}
     8c6:	b083      	sub	sp, #12
     8c8:	000f      	movs	r7, r1
     8ca:	0016      	movs	r6, r2
     8cc:	aa08      	add	r2, sp, #32
     8ce:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     8d0:	0004      	movs	r4, r0
     8d2:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     8d4:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     8d6:	42bc      	cmp	r4, r7
     8d8:	d902      	bls.n	8e0 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     8da:	0010      	movs	r0, r2
     8dc:	b003      	add	sp, #12
     8de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     8e0:	2b00      	cmp	r3, #0
     8e2:	d114      	bne.n	90e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     8e4:	0002      	movs	r2, r0
     8e6:	0008      	movs	r0, r1
     8e8:	2100      	movs	r1, #0
     8ea:	4c19      	ldr	r4, [pc, #100]	; (950 <_sercom_get_async_baud_val+0x8c>)
     8ec:	47a0      	blx	r4
     8ee:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     8f0:	003a      	movs	r2, r7
     8f2:	2300      	movs	r3, #0
     8f4:	2000      	movs	r0, #0
     8f6:	4c17      	ldr	r4, [pc, #92]	; (954 <_sercom_get_async_baud_val+0x90>)
     8f8:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     8fa:	2200      	movs	r2, #0
     8fc:	2301      	movs	r3, #1
     8fe:	1a12      	subs	r2, r2, r0
     900:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     902:	0c12      	lsrs	r2, r2, #16
     904:	041b      	lsls	r3, r3, #16
     906:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     908:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     90a:	2200      	movs	r2, #0
     90c:	e7e5      	b.n	8da <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     90e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     910:	2b01      	cmp	r3, #1
     912:	d1f9      	bne.n	908 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     914:	000a      	movs	r2, r1
     916:	2300      	movs	r3, #0
     918:	2100      	movs	r1, #0
     91a:	4c0d      	ldr	r4, [pc, #52]	; (950 <_sercom_get_async_baud_val+0x8c>)
     91c:	47a0      	blx	r4
     91e:	0002      	movs	r2, r0
     920:	000b      	movs	r3, r1
     922:	9200      	str	r2, [sp, #0]
     924:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     926:	0038      	movs	r0, r7
     928:	2100      	movs	r1, #0
     92a:	4c0a      	ldr	r4, [pc, #40]	; (954 <_sercom_get_async_baud_val+0x90>)
     92c:	47a0      	blx	r4
     92e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     930:	2380      	movs	r3, #128	; 0x80
     932:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     934:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     936:	4298      	cmp	r0, r3
     938:	d8cf      	bhi.n	8da <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     93a:	0f79      	lsrs	r1, r7, #29
     93c:	00f8      	lsls	r0, r7, #3
     93e:	9a00      	ldr	r2, [sp, #0]
     940:	9b01      	ldr	r3, [sp, #4]
     942:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     944:	00ea      	lsls	r2, r5, #3
     946:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     948:	b2d2      	uxtb	r2, r2
     94a:	0352      	lsls	r2, r2, #13
     94c:	432a      	orrs	r2, r5
     94e:	e7db      	b.n	908 <_sercom_get_async_baud_val+0x44>
     950:	00001cf5 	.word	0x00001cf5
     954:	000007e1 	.word	0x000007e1

00000958 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     958:	b510      	push	{r4, lr}
     95a:	b082      	sub	sp, #8
     95c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     95e:	4b0e      	ldr	r3, [pc, #56]	; (998 <sercom_set_gclk_generator+0x40>)
     960:	781b      	ldrb	r3, [r3, #0]
     962:	2b00      	cmp	r3, #0
     964:	d007      	beq.n	976 <sercom_set_gclk_generator+0x1e>
     966:	2900      	cmp	r1, #0
     968:	d105      	bne.n	976 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     96a:	4b0b      	ldr	r3, [pc, #44]	; (998 <sercom_set_gclk_generator+0x40>)
     96c:	785b      	ldrb	r3, [r3, #1]
     96e:	4283      	cmp	r3, r0
     970:	d010      	beq.n	994 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     972:	201d      	movs	r0, #29
     974:	e00c      	b.n	990 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     976:	a901      	add	r1, sp, #4
     978:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     97a:	200c      	movs	r0, #12
     97c:	4b07      	ldr	r3, [pc, #28]	; (99c <sercom_set_gclk_generator+0x44>)
     97e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     980:	200c      	movs	r0, #12
     982:	4b07      	ldr	r3, [pc, #28]	; (9a0 <sercom_set_gclk_generator+0x48>)
     984:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     986:	4b04      	ldr	r3, [pc, #16]	; (998 <sercom_set_gclk_generator+0x40>)
     988:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     98a:	2201      	movs	r2, #1
     98c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     98e:	2000      	movs	r0, #0
}
     990:	b002      	add	sp, #8
     992:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     994:	2000      	movs	r0, #0
     996:	e7fb      	b.n	990 <sercom_set_gclk_generator+0x38>
     998:	2000002c 	.word	0x2000002c
     99c:	0000198d 	.word	0x0000198d
     9a0:	00001901 	.word	0x00001901

000009a4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     9a4:	4b40      	ldr	r3, [pc, #256]	; (aa8 <_sercom_get_default_pad+0x104>)
     9a6:	4298      	cmp	r0, r3
     9a8:	d031      	beq.n	a0e <_sercom_get_default_pad+0x6a>
     9aa:	d90a      	bls.n	9c2 <_sercom_get_default_pad+0x1e>
     9ac:	4b3f      	ldr	r3, [pc, #252]	; (aac <_sercom_get_default_pad+0x108>)
     9ae:	4298      	cmp	r0, r3
     9b0:	d04d      	beq.n	a4e <_sercom_get_default_pad+0xaa>
     9b2:	4b3f      	ldr	r3, [pc, #252]	; (ab0 <_sercom_get_default_pad+0x10c>)
     9b4:	4298      	cmp	r0, r3
     9b6:	d05a      	beq.n	a6e <_sercom_get_default_pad+0xca>
     9b8:	4b3e      	ldr	r3, [pc, #248]	; (ab4 <_sercom_get_default_pad+0x110>)
     9ba:	4298      	cmp	r0, r3
     9bc:	d037      	beq.n	a2e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     9be:	2000      	movs	r0, #0
}
     9c0:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     9c2:	4b3d      	ldr	r3, [pc, #244]	; (ab8 <_sercom_get_default_pad+0x114>)
     9c4:	4298      	cmp	r0, r3
     9c6:	d00c      	beq.n	9e2 <_sercom_get_default_pad+0x3e>
     9c8:	4b3c      	ldr	r3, [pc, #240]	; (abc <_sercom_get_default_pad+0x118>)
     9ca:	4298      	cmp	r0, r3
     9cc:	d1f7      	bne.n	9be <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9ce:	2901      	cmp	r1, #1
     9d0:	d017      	beq.n	a02 <_sercom_get_default_pad+0x5e>
     9d2:	2900      	cmp	r1, #0
     9d4:	d05d      	beq.n	a92 <_sercom_get_default_pad+0xee>
     9d6:	2902      	cmp	r1, #2
     9d8:	d015      	beq.n	a06 <_sercom_get_default_pad+0x62>
     9da:	2903      	cmp	r1, #3
     9dc:	d015      	beq.n	a0a <_sercom_get_default_pad+0x66>
	return 0;
     9de:	2000      	movs	r0, #0
     9e0:	e7ee      	b.n	9c0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9e2:	2901      	cmp	r1, #1
     9e4:	d007      	beq.n	9f6 <_sercom_get_default_pad+0x52>
     9e6:	2900      	cmp	r1, #0
     9e8:	d051      	beq.n	a8e <_sercom_get_default_pad+0xea>
     9ea:	2902      	cmp	r1, #2
     9ec:	d005      	beq.n	9fa <_sercom_get_default_pad+0x56>
     9ee:	2903      	cmp	r1, #3
     9f0:	d005      	beq.n	9fe <_sercom_get_default_pad+0x5a>
	return 0;
     9f2:	2000      	movs	r0, #0
     9f4:	e7e4      	b.n	9c0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9f6:	4832      	ldr	r0, [pc, #200]	; (ac0 <_sercom_get_default_pad+0x11c>)
     9f8:	e7e2      	b.n	9c0 <_sercom_get_default_pad+0x1c>
     9fa:	4832      	ldr	r0, [pc, #200]	; (ac4 <_sercom_get_default_pad+0x120>)
     9fc:	e7e0      	b.n	9c0 <_sercom_get_default_pad+0x1c>
     9fe:	4832      	ldr	r0, [pc, #200]	; (ac8 <_sercom_get_default_pad+0x124>)
     a00:	e7de      	b.n	9c0 <_sercom_get_default_pad+0x1c>
     a02:	4832      	ldr	r0, [pc, #200]	; (acc <_sercom_get_default_pad+0x128>)
     a04:	e7dc      	b.n	9c0 <_sercom_get_default_pad+0x1c>
     a06:	4832      	ldr	r0, [pc, #200]	; (ad0 <_sercom_get_default_pad+0x12c>)
     a08:	e7da      	b.n	9c0 <_sercom_get_default_pad+0x1c>
     a0a:	4832      	ldr	r0, [pc, #200]	; (ad4 <_sercom_get_default_pad+0x130>)
     a0c:	e7d8      	b.n	9c0 <_sercom_get_default_pad+0x1c>
     a0e:	2901      	cmp	r1, #1
     a10:	d007      	beq.n	a22 <_sercom_get_default_pad+0x7e>
     a12:	2900      	cmp	r1, #0
     a14:	d03f      	beq.n	a96 <_sercom_get_default_pad+0xf2>
     a16:	2902      	cmp	r1, #2
     a18:	d005      	beq.n	a26 <_sercom_get_default_pad+0x82>
     a1a:	2903      	cmp	r1, #3
     a1c:	d005      	beq.n	a2a <_sercom_get_default_pad+0x86>
	return 0;
     a1e:	2000      	movs	r0, #0
     a20:	e7ce      	b.n	9c0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a22:	482d      	ldr	r0, [pc, #180]	; (ad8 <_sercom_get_default_pad+0x134>)
     a24:	e7cc      	b.n	9c0 <_sercom_get_default_pad+0x1c>
     a26:	482d      	ldr	r0, [pc, #180]	; (adc <_sercom_get_default_pad+0x138>)
     a28:	e7ca      	b.n	9c0 <_sercom_get_default_pad+0x1c>
     a2a:	482d      	ldr	r0, [pc, #180]	; (ae0 <_sercom_get_default_pad+0x13c>)
     a2c:	e7c8      	b.n	9c0 <_sercom_get_default_pad+0x1c>
     a2e:	2901      	cmp	r1, #1
     a30:	d007      	beq.n	a42 <_sercom_get_default_pad+0x9e>
     a32:	2900      	cmp	r1, #0
     a34:	d031      	beq.n	a9a <_sercom_get_default_pad+0xf6>
     a36:	2902      	cmp	r1, #2
     a38:	d005      	beq.n	a46 <_sercom_get_default_pad+0xa2>
     a3a:	2903      	cmp	r1, #3
     a3c:	d005      	beq.n	a4a <_sercom_get_default_pad+0xa6>
	return 0;
     a3e:	2000      	movs	r0, #0
     a40:	e7be      	b.n	9c0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a42:	4828      	ldr	r0, [pc, #160]	; (ae4 <_sercom_get_default_pad+0x140>)
     a44:	e7bc      	b.n	9c0 <_sercom_get_default_pad+0x1c>
     a46:	4828      	ldr	r0, [pc, #160]	; (ae8 <_sercom_get_default_pad+0x144>)
     a48:	e7ba      	b.n	9c0 <_sercom_get_default_pad+0x1c>
     a4a:	4828      	ldr	r0, [pc, #160]	; (aec <_sercom_get_default_pad+0x148>)
     a4c:	e7b8      	b.n	9c0 <_sercom_get_default_pad+0x1c>
     a4e:	2901      	cmp	r1, #1
     a50:	d007      	beq.n	a62 <_sercom_get_default_pad+0xbe>
     a52:	2900      	cmp	r1, #0
     a54:	d023      	beq.n	a9e <_sercom_get_default_pad+0xfa>
     a56:	2902      	cmp	r1, #2
     a58:	d005      	beq.n	a66 <_sercom_get_default_pad+0xc2>
     a5a:	2903      	cmp	r1, #3
     a5c:	d005      	beq.n	a6a <_sercom_get_default_pad+0xc6>
	return 0;
     a5e:	2000      	movs	r0, #0
     a60:	e7ae      	b.n	9c0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a62:	4823      	ldr	r0, [pc, #140]	; (af0 <_sercom_get_default_pad+0x14c>)
     a64:	e7ac      	b.n	9c0 <_sercom_get_default_pad+0x1c>
     a66:	4823      	ldr	r0, [pc, #140]	; (af4 <_sercom_get_default_pad+0x150>)
     a68:	e7aa      	b.n	9c0 <_sercom_get_default_pad+0x1c>
     a6a:	4823      	ldr	r0, [pc, #140]	; (af8 <_sercom_get_default_pad+0x154>)
     a6c:	e7a8      	b.n	9c0 <_sercom_get_default_pad+0x1c>
     a6e:	2901      	cmp	r1, #1
     a70:	d007      	beq.n	a82 <_sercom_get_default_pad+0xde>
     a72:	2900      	cmp	r1, #0
     a74:	d015      	beq.n	aa2 <_sercom_get_default_pad+0xfe>
     a76:	2902      	cmp	r1, #2
     a78:	d005      	beq.n	a86 <_sercom_get_default_pad+0xe2>
     a7a:	2903      	cmp	r1, #3
     a7c:	d005      	beq.n	a8a <_sercom_get_default_pad+0xe6>
	return 0;
     a7e:	2000      	movs	r0, #0
     a80:	e79e      	b.n	9c0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a82:	481e      	ldr	r0, [pc, #120]	; (afc <_sercom_get_default_pad+0x158>)
     a84:	e79c      	b.n	9c0 <_sercom_get_default_pad+0x1c>
     a86:	481e      	ldr	r0, [pc, #120]	; (b00 <_sercom_get_default_pad+0x15c>)
     a88:	e79a      	b.n	9c0 <_sercom_get_default_pad+0x1c>
     a8a:	481e      	ldr	r0, [pc, #120]	; (b04 <_sercom_get_default_pad+0x160>)
     a8c:	e798      	b.n	9c0 <_sercom_get_default_pad+0x1c>
     a8e:	481e      	ldr	r0, [pc, #120]	; (b08 <_sercom_get_default_pad+0x164>)
     a90:	e796      	b.n	9c0 <_sercom_get_default_pad+0x1c>
     a92:	2003      	movs	r0, #3
     a94:	e794      	b.n	9c0 <_sercom_get_default_pad+0x1c>
     a96:	481d      	ldr	r0, [pc, #116]	; (b0c <_sercom_get_default_pad+0x168>)
     a98:	e792      	b.n	9c0 <_sercom_get_default_pad+0x1c>
     a9a:	481d      	ldr	r0, [pc, #116]	; (b10 <_sercom_get_default_pad+0x16c>)
     a9c:	e790      	b.n	9c0 <_sercom_get_default_pad+0x1c>
     a9e:	481d      	ldr	r0, [pc, #116]	; (b14 <_sercom_get_default_pad+0x170>)
     aa0:	e78e      	b.n	9c0 <_sercom_get_default_pad+0x1c>
     aa2:	481d      	ldr	r0, [pc, #116]	; (b18 <_sercom_get_default_pad+0x174>)
     aa4:	e78c      	b.n	9c0 <_sercom_get_default_pad+0x1c>
     aa6:	46c0      	nop			; (mov r8, r8)
     aa8:	42001000 	.word	0x42001000
     aac:	42001800 	.word	0x42001800
     ab0:	42001c00 	.word	0x42001c00
     ab4:	42001400 	.word	0x42001400
     ab8:	42000800 	.word	0x42000800
     abc:	42000c00 	.word	0x42000c00
     ac0:	00050003 	.word	0x00050003
     ac4:	00060003 	.word	0x00060003
     ac8:	00070003 	.word	0x00070003
     acc:	00010003 	.word	0x00010003
     ad0:	001e0003 	.word	0x001e0003
     ad4:	001f0003 	.word	0x001f0003
     ad8:	00090003 	.word	0x00090003
     adc:	000a0003 	.word	0x000a0003
     ae0:	000b0003 	.word	0x000b0003
     ae4:	00110003 	.word	0x00110003
     ae8:	00120003 	.word	0x00120003
     aec:	00130003 	.word	0x00130003
     af0:	000d0003 	.word	0x000d0003
     af4:	000e0003 	.word	0x000e0003
     af8:	000f0003 	.word	0x000f0003
     afc:	00170003 	.word	0x00170003
     b00:	00180003 	.word	0x00180003
     b04:	00190003 	.word	0x00190003
     b08:	00040003 	.word	0x00040003
     b0c:	00080003 	.word	0x00080003
     b10:	00100003 	.word	0x00100003
     b14:	000c0003 	.word	0x000c0003
     b18:	00160003 	.word	0x00160003

00000b1c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     b1c:	b530      	push	{r4, r5, lr}
     b1e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     b20:	4b0b      	ldr	r3, [pc, #44]	; (b50 <_sercom_get_sercom_inst_index+0x34>)
     b22:	466a      	mov	r2, sp
     b24:	cb32      	ldmia	r3!, {r1, r4, r5}
     b26:	c232      	stmia	r2!, {r1, r4, r5}
     b28:	cb32      	ldmia	r3!, {r1, r4, r5}
     b2a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     b2c:	9b00      	ldr	r3, [sp, #0]
     b2e:	4283      	cmp	r3, r0
     b30:	d00b      	beq.n	b4a <_sercom_get_sercom_inst_index+0x2e>
     b32:	2301      	movs	r3, #1
     b34:	009a      	lsls	r2, r3, #2
     b36:	4669      	mov	r1, sp
     b38:	5852      	ldr	r2, [r2, r1]
     b3a:	4282      	cmp	r2, r0
     b3c:	d006      	beq.n	b4c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b3e:	3301      	adds	r3, #1
     b40:	2b06      	cmp	r3, #6
     b42:	d1f7      	bne.n	b34 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     b44:	2000      	movs	r0, #0
}
     b46:	b007      	add	sp, #28
     b48:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b4a:	2300      	movs	r3, #0
			return i;
     b4c:	b2d8      	uxtb	r0, r3
     b4e:	e7fa      	b.n	b46 <_sercom_get_sercom_inst_index+0x2a>
     b50:	00001d90 	.word	0x00001d90

00000b54 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     b54:	b5f0      	push	{r4, r5, r6, r7, lr}
     b56:	46de      	mov	lr, fp
     b58:	4657      	mov	r7, sl
     b5a:	464e      	mov	r6, r9
     b5c:	4645      	mov	r5, r8
     b5e:	b5e0      	push	{r5, r6, r7, lr}
     b60:	b08d      	sub	sp, #52	; 0x34
     b62:	0005      	movs	r5, r0
     b64:	000c      	movs	r4, r1
     b66:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     b68:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b6a:	0008      	movs	r0, r1
     b6c:	4b80      	ldr	r3, [pc, #512]	; (d70 <usart_init+0x21c>)
     b6e:	4798      	blx	r3
     b70:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     b72:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     b74:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     b76:	07db      	lsls	r3, r3, #31
     b78:	d506      	bpl.n	b88 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     b7a:	b00d      	add	sp, #52	; 0x34
     b7c:	bc3c      	pop	{r2, r3, r4, r5}
     b7e:	4690      	mov	r8, r2
     b80:	4699      	mov	r9, r3
     b82:	46a2      	mov	sl, r4
     b84:	46ab      	mov	fp, r5
     b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     b88:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     b8a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     b8c:	079b      	lsls	r3, r3, #30
     b8e:	d4f4      	bmi.n	b7a <usart_init+0x26>
     b90:	4978      	ldr	r1, [pc, #480]	; (d74 <usart_init+0x220>)
     b92:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     b94:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     b96:	2301      	movs	r3, #1
     b98:	40bb      	lsls	r3, r7
     b9a:	4303      	orrs	r3, r0
     b9c:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     b9e:	a90b      	add	r1, sp, #44	; 0x2c
     ba0:	7f73      	ldrb	r3, [r6, #29]
     ba2:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     ba4:	320d      	adds	r2, #13
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     ba6:	b2d7      	uxtb	r7, r2
     ba8:	0038      	movs	r0, r7
     baa:	4b73      	ldr	r3, [pc, #460]	; (d78 <usart_init+0x224>)
     bac:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     bae:	0038      	movs	r0, r7
     bb0:	4b72      	ldr	r3, [pc, #456]	; (d7c <usart_init+0x228>)
     bb2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     bb4:	7f70      	ldrb	r0, [r6, #29]
     bb6:	2100      	movs	r1, #0
     bb8:	4b71      	ldr	r3, [pc, #452]	; (d80 <usart_init+0x22c>)
     bba:	4798      	blx	r3
	module->character_size = config->character_size;
     bbc:	7af3      	ldrb	r3, [r6, #11]
     bbe:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     bc0:	7d33      	ldrb	r3, [r6, #20]
     bc2:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     bc4:	7d73      	ldrb	r3, [r6, #21]
     bc6:	71eb      	strb	r3, [r5, #7]
	SercomUsart *const usart_hw = &(module->hw->USART);
     bc8:	682b      	ldr	r3, [r5, #0]
     bca:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     bcc:	0018      	movs	r0, r3
     bce:	4b68      	ldr	r3, [pc, #416]	; (d70 <usart_init+0x21c>)
     bd0:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     bd2:	300d      	adds	r0, #13
	uint16_t baud  = 0;
     bd4:	2200      	movs	r2, #0
     bd6:	230e      	movs	r3, #14
     bd8:	a902      	add	r1, sp, #8
     bda:	468c      	mov	ip, r1
     bdc:	4463      	add	r3, ip
     bde:	801a      	strh	r2, [r3, #0]
	ctrla = (uint32_t)config->data_order |
     be0:	6833      	ldr	r3, [r6, #0]
     be2:	9303      	str	r3, [sp, #12]
		(uint32_t)config->mux_setting |
     be4:	68f3      	ldr	r3, [r6, #12]
     be6:	469a      	mov	sl, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     be8:	7db3      	ldrb	r3, [r6, #22]
     bea:	469b      	mov	fp, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     bec:	6873      	ldr	r3, [r6, #4]
     bee:	4699      	mov	r9, r3
	switch (transfer_mode)
     bf0:	2b00      	cmp	r3, #0
     bf2:	d014      	beq.n	c1e <usart_init+0xca>
     bf4:	2380      	movs	r3, #128	; 0x80
     bf6:	055b      	lsls	r3, r3, #21
     bf8:	4599      	cmp	r9, r3
     bfa:	d130      	bne.n	c5e <usart_init+0x10a>
			if (!config->use_external_clock) {
     bfc:	7df3      	ldrb	r3, [r6, #23]
     bfe:	2b00      	cmp	r3, #0
     c00:	d131      	bne.n	c66 <usart_init+0x112>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     c02:	6933      	ldr	r3, [r6, #16]
     c04:	001f      	movs	r7, r3
     c06:	b2c0      	uxtb	r0, r0
     c08:	4b5e      	ldr	r3, [pc, #376]	; (d84 <usart_init+0x230>)
     c0a:	4798      	blx	r3
     c0c:	0001      	movs	r1, r0
     c0e:	220e      	movs	r2, #14
     c10:	ab02      	add	r3, sp, #8
     c12:	469c      	mov	ip, r3
     c14:	4462      	add	r2, ip
     c16:	0038      	movs	r0, r7
     c18:	4b5b      	ldr	r3, [pc, #364]	; (d88 <usart_init+0x234>)
     c1a:	4798      	blx	r3
     c1c:	e020      	b.n	c60 <usart_init+0x10c>
			if (config->use_external_clock) {
     c1e:	7df3      	ldrb	r3, [r6, #23]
     c20:	2b00      	cmp	r3, #0
     c22:	d00b      	beq.n	c3c <usart_init+0xe8>
				status_code =
     c24:	2310      	movs	r3, #16
     c26:	9300      	str	r3, [sp, #0]
     c28:	2300      	movs	r3, #0
     c2a:	220e      	movs	r2, #14
     c2c:	a902      	add	r1, sp, #8
     c2e:	468c      	mov	ip, r1
     c30:	4462      	add	r2, ip
     c32:	69b1      	ldr	r1, [r6, #24]
     c34:	6930      	ldr	r0, [r6, #16]
     c36:	4f55      	ldr	r7, [pc, #340]	; (d8c <usart_init+0x238>)
     c38:	47b8      	blx	r7
     c3a:	e011      	b.n	c60 <usart_init+0x10c>
						_sercom_get_async_baud_val(config->baudrate,
     c3c:	6933      	ldr	r3, [r6, #16]
     c3e:	001f      	movs	r7, r3
     c40:	b2c0      	uxtb	r0, r0
     c42:	4b50      	ldr	r3, [pc, #320]	; (d84 <usart_init+0x230>)
     c44:	4798      	blx	r3
     c46:	0001      	movs	r1, r0
				status_code =
     c48:	2310      	movs	r3, #16
     c4a:	9300      	str	r3, [sp, #0]
     c4c:	2300      	movs	r3, #0
     c4e:	220e      	movs	r2, #14
     c50:	a802      	add	r0, sp, #8
     c52:	4684      	mov	ip, r0
     c54:	4462      	add	r2, ip
     c56:	0038      	movs	r0, r7
     c58:	4f4c      	ldr	r7, [pc, #304]	; (d8c <usart_init+0x238>)
     c5a:	47b8      	blx	r7
     c5c:	e000      	b.n	c60 <usart_init+0x10c>
	enum status_code status_code = STATUS_OK;
     c5e:	2000      	movs	r0, #0
	if (status_code != STATUS_OK) {
     c60:	2800      	cmp	r0, #0
     c62:	d000      	beq.n	c66 <usart_init+0x112>
     c64:	e789      	b.n	b7a <usart_init+0x26>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     c66:	682a      	ldr	r2, [r5, #0]
     c68:	9f03      	ldr	r7, [sp, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     c6a:	8a13      	ldrh	r3, [r2, #16]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     c6c:	b21b      	sxth	r3, r3
     c6e:	2b00      	cmp	r3, #0
     c70:	dbfb      	blt.n	c6a <usart_init+0x116>
	usart_hw->BAUD.reg = baud;
     c72:	230e      	movs	r3, #14
     c74:	aa02      	add	r2, sp, #8
     c76:	4694      	mov	ip, r2
     c78:	4463      	add	r3, ip
     c7a:	881b      	ldrh	r3, [r3, #0]
     c7c:	4642      	mov	r2, r8
     c7e:	8153      	strh	r3, [r2, #10]
	ctrla |= transfer_mode;
     c80:	4653      	mov	r3, sl
     c82:	431f      	orrs	r7, r3
     c84:	464b      	mov	r3, r9
     c86:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     c88:	465b      	mov	r3, fp
     c8a:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     c8c:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     c8e:	7df3      	ldrb	r3, [r6, #23]
     c90:	2b00      	cmp	r3, #0
     c92:	d101      	bne.n	c98 <usart_init+0x144>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     c94:	3304      	adds	r3, #4
     c96:	431f      	orrs	r7, r3
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     c98:	7d31      	ldrb	r1, [r6, #20]
     c9a:	0449      	lsls	r1, r1, #17
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     c9c:	7d73      	ldrb	r3, [r6, #21]
     c9e:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     ca0:	430b      	orrs	r3, r1
	ctrlb |= (uint32_t)config->character_size;
     ca2:	7ab1      	ldrb	r1, [r6, #10]
     ca4:	7af2      	ldrb	r2, [r6, #11]
     ca6:	4311      	orrs	r1, r2
     ca8:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     caa:	8933      	ldrh	r3, [r6, #8]
     cac:	2bff      	cmp	r3, #255	; 0xff
     cae:	d003      	beq.n	cb8 <usart_init+0x164>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     cb0:	2280      	movs	r2, #128	; 0x80
     cb2:	0452      	lsls	r2, r2, #17
     cb4:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     cb6:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     cb8:	7f33      	ldrb	r3, [r6, #28]
     cba:	2b00      	cmp	r3, #0
     cbc:	d103      	bne.n	cc6 <usart_init+0x172>
     cbe:	4b34      	ldr	r3, [pc, #208]	; (d90 <usart_init+0x23c>)
     cc0:	789b      	ldrb	r3, [r3, #2]
     cc2:	079b      	lsls	r3, r3, #30
     cc4:	d501      	bpl.n	cca <usart_init+0x176>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     cc6:	2380      	movs	r3, #128	; 0x80
     cc8:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     cca:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     ccc:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
     cce:	b21b      	sxth	r3, r3
     cd0:	2b00      	cmp	r3, #0
     cd2:	dbfb      	blt.n	ccc <usart_init+0x178>
	usart_hw->CTRLB.reg = ctrlb;
     cd4:	4643      	mov	r3, r8
     cd6:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     cd8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     cda:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
     cdc:	b21b      	sxth	r3, r3
     cde:	2b00      	cmp	r3, #0
     ce0:	dbfb      	blt.n	cda <usart_init+0x186>
	usart_hw->CTRLA.reg = ctrla;
     ce2:	4643      	mov	r3, r8
     ce4:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     ce6:	ab0a      	add	r3, sp, #40	; 0x28
     ce8:	2280      	movs	r2, #128	; 0x80
     cea:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     cec:	2200      	movs	r2, #0
     cee:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
     cf0:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     cf2:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     cf4:	6a33      	ldr	r3, [r6, #32]
     cf6:	9306      	str	r3, [sp, #24]
     cf8:	6a73      	ldr	r3, [r6, #36]	; 0x24
     cfa:	9307      	str	r3, [sp, #28]
     cfc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     cfe:	9308      	str	r3, [sp, #32]
     d00:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     d02:	9303      	str	r3, [sp, #12]
     d04:	9309      	str	r3, [sp, #36]	; 0x24
     d06:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     d08:	ae06      	add	r6, sp, #24
     d0a:	e006      	b.n	d1a <usart_init+0x1c6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     d0c:	0020      	movs	r0, r4
     d0e:	4b21      	ldr	r3, [pc, #132]	; (d94 <usart_init+0x240>)
     d10:	4798      	blx	r3
     d12:	e007      	b.n	d24 <usart_init+0x1d0>
     d14:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     d16:	2f04      	cmp	r7, #4
     d18:	d00d      	beq.n	d36 <usart_init+0x1e2>
     d1a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     d1c:	00bb      	lsls	r3, r7, #2
     d1e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     d20:	2800      	cmp	r0, #0
     d22:	d0f3      	beq.n	d0c <usart_init+0x1b8>
		if (current_pinmux != PINMUX_UNUSED) {
     d24:	1c43      	adds	r3, r0, #1
     d26:	d0f5      	beq.n	d14 <usart_init+0x1c0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     d28:	a90a      	add	r1, sp, #40	; 0x28
     d2a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     d2c:	0c00      	lsrs	r0, r0, #16
     d2e:	b2c0      	uxtb	r0, r0
     d30:	4b19      	ldr	r3, [pc, #100]	; (d98 <usart_init+0x244>)
     d32:	4798      	blx	r3
     d34:	e7ee      	b.n	d14 <usart_init+0x1c0>
		module->callback[i]            = NULL;
     d36:	2300      	movs	r3, #0
     d38:	60ab      	str	r3, [r5, #8]
     d3a:	60eb      	str	r3, [r5, #12]
     d3c:	612b      	str	r3, [r5, #16]
	module->tx_buffer_ptr              = NULL;
     d3e:	61ab      	str	r3, [r5, #24]
	module->rx_buffer_ptr              = NULL;
     d40:	616b      	str	r3, [r5, #20]
	module->remaining_tx_buffer_length = 0x0000;
     d42:	2200      	movs	r2, #0
     d44:	83eb      	strh	r3, [r5, #30]
	module->remaining_rx_buffer_length = 0x0000;
     d46:	83ab      	strh	r3, [r5, #28]
	module->callback_reg_mask          = 0x00;
     d48:	3320      	adds	r3, #32
     d4a:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     d4c:	3301      	adds	r3, #1
     d4e:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     d50:	3301      	adds	r3, #1
     d52:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     d54:	3301      	adds	r3, #1
     d56:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     d58:	6828      	ldr	r0, [r5, #0]
     d5a:	4b05      	ldr	r3, [pc, #20]	; (d70 <usart_init+0x21c>)
     d5c:	4798      	blx	r3
     d5e:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     d60:	490e      	ldr	r1, [pc, #56]	; (d9c <usart_init+0x248>)
     d62:	4b0f      	ldr	r3, [pc, #60]	; (da0 <usart_init+0x24c>)
     d64:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     d66:	00a4      	lsls	r4, r4, #2
     d68:	4b0e      	ldr	r3, [pc, #56]	; (da4 <usart_init+0x250>)
     d6a:	50e5      	str	r5, [r4, r3]
	return status_code;
     d6c:	2000      	movs	r0, #0
     d6e:	e704      	b.n	b7a <usart_init+0x26>
     d70:	00000b1d 	.word	0x00000b1d
     d74:	40000400 	.word	0x40000400
     d78:	0000198d 	.word	0x0000198d
     d7c:	00001901 	.word	0x00001901
     d80:	00000959 	.word	0x00000959
     d84:	000019a9 	.word	0x000019a9
     d88:	0000089b 	.word	0x0000089b
     d8c:	000008c5 	.word	0x000008c5
     d90:	41002000 	.word	0x41002000
     d94:	000009a5 	.word	0x000009a5
     d98:	00001a85 	.word	0x00001a85
     d9c:	00000f11 	.word	0x00000f11
     da0:	00001039 	.word	0x00001039
     da4:	20000068 	.word	0x20000068

00000da8 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     da8:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     daa:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     dac:	2a00      	cmp	r2, #0
     dae:	d101      	bne.n	db4 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     db0:	0018      	movs	r0, r3
     db2:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     db4:	8bc2      	ldrh	r2, [r0, #30]
     db6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     db8:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     dba:	2a00      	cmp	r2, #0
     dbc:	d1f8      	bne.n	db0 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     dbe:	6802      	ldr	r2, [r0, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     dc0:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
     dc2:	b21b      	sxth	r3, r3
     dc4:	2b00      	cmp	r3, #0
     dc6:	dbfb      	blt.n	dc0 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     dc8:	8311      	strh	r1, [r2, #24]
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     dca:	2102      	movs	r1, #2
     dcc:	7b93      	ldrb	r3, [r2, #14]
     dce:	420b      	tst	r3, r1
     dd0:	d0fc      	beq.n	dcc <usart_write_wait+0x24>
	return STATUS_OK;
     dd2:	2300      	movs	r3, #0
     dd4:	e7ec      	b.n	db0 <usart_write_wait+0x8>
	...

00000dd8 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
     dda:	46ce      	mov	lr, r9
     ddc:	4647      	mov	r7, r8
     dde:	b580      	push	{r7, lr}
     de0:	b083      	sub	sp, #12
     de2:	0005      	movs	r5, r0
     de4:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     de6:	2017      	movs	r0, #23
	if (length == 0) {
     de8:	2a00      	cmp	r2, #0
     dea:	d104      	bne.n	df6 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     dec:	b003      	add	sp, #12
     dee:	bc0c      	pop	{r2, r3}
     df0:	4690      	mov	r8, r2
     df2:	4699      	mov	r9, r3
     df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
     df6:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
     df8:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
     dfa:	2b00      	cmp	r3, #0
     dfc:	d0f6      	beq.n	dec <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
     dfe:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     e00:	8a23      	ldrh	r3, [r4, #16]
	while (usart_is_syncing(module)) {
     e02:	b21b      	sxth	r3, r3
     e04:	2b00      	cmp	r3, #0
     e06:	dbfb      	blt.n	e00 <usart_write_buffer_wait+0x28>
	while (length--) {
     e08:	3a01      	subs	r2, #1
     e0a:	b293      	uxth	r3, r2
     e0c:	4699      	mov	r9, r3
     e0e:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     e10:	2701      	movs	r7, #1
	while (length--) {
     e12:	4b20      	ldr	r3, [pc, #128]	; (e94 <usart_write_buffer_wait+0xbc>)
     e14:	4698      	mov	r8, r3
     e16:	e011      	b.n	e3c <usart_write_buffer_wait+0x64>
		uint16_t data_to_send = tx_data[tx_pos++];
     e18:	1c73      	adds	r3, r6, #1
     e1a:	b29b      	uxth	r3, r3
     e1c:	9a01      	ldr	r2, [sp, #4]
     e1e:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     e20:	796a      	ldrb	r2, [r5, #5]
     e22:	2a01      	cmp	r2, #1
     e24:	d017      	beq.n	e56 <usart_write_buffer_wait+0x7e>
		uint16_t data_to_send = tx_data[tx_pos++];
     e26:	b289      	uxth	r1, r1
     e28:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
     e2a:	0028      	movs	r0, r5
     e2c:	4b1a      	ldr	r3, [pc, #104]	; (e98 <usart_write_buffer_wait+0xc0>)
     e2e:	4798      	blx	r3
	while (length--) {
     e30:	464b      	mov	r3, r9
     e32:	3b01      	subs	r3, #1
     e34:	b29b      	uxth	r3, r3
     e36:	4699      	mov	r9, r3
     e38:	4543      	cmp	r3, r8
     e3a:	d013      	beq.n	e64 <usart_write_buffer_wait+0x8c>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     e3c:	7ba3      	ldrb	r3, [r4, #14]
     e3e:	423b      	tst	r3, r7
     e40:	d1ea      	bne.n	e18 <usart_write_buffer_wait+0x40>
     e42:	4b14      	ldr	r3, [pc, #80]	; (e94 <usart_write_buffer_wait+0xbc>)
     e44:	7ba2      	ldrb	r2, [r4, #14]
     e46:	423a      	tst	r2, r7
     e48:	d1e6      	bne.n	e18 <usart_write_buffer_wait+0x40>
			} else if (i == USART_TIMEOUT) {
     e4a:	2b01      	cmp	r3, #1
     e4c:	d019      	beq.n	e82 <usart_write_buffer_wait+0xaa>
     e4e:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     e50:	2b00      	cmp	r3, #0
     e52:	d1f7      	bne.n	e44 <usart_write_buffer_wait+0x6c>
     e54:	e7e0      	b.n	e18 <usart_write_buffer_wait+0x40>
			data_to_send |= (tx_data[tx_pos++] << 8);
     e56:	3602      	adds	r6, #2
     e58:	b2b6      	uxth	r6, r6
     e5a:	9a01      	ldr	r2, [sp, #4]
     e5c:	5cd3      	ldrb	r3, [r2, r3]
     e5e:	021b      	lsls	r3, r3, #8
     e60:	4319      	orrs	r1, r3
     e62:	e7e2      	b.n	e2a <usart_write_buffer_wait+0x52>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     e64:	7ba3      	ldrb	r3, [r4, #14]
     e66:	079b      	lsls	r3, r3, #30
     e68:	d40d      	bmi.n	e86 <usart_write_buffer_wait+0xae>
     e6a:	4b0a      	ldr	r3, [pc, #40]	; (e94 <usart_write_buffer_wait+0xbc>)
     e6c:	2102      	movs	r1, #2
     e6e:	7ba2      	ldrb	r2, [r4, #14]
     e70:	420a      	tst	r2, r1
     e72:	d10a      	bne.n	e8a <usart_write_buffer_wait+0xb2>
		} else if (i == USART_TIMEOUT) {
     e74:	2b01      	cmp	r3, #1
     e76:	d00a      	beq.n	e8e <usart_write_buffer_wait+0xb6>
     e78:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     e7a:	2b00      	cmp	r3, #0
     e7c:	d1f7      	bne.n	e6e <usart_write_buffer_wait+0x96>
	return STATUS_OK;
     e7e:	2000      	movs	r0, #0
     e80:	e7b4      	b.n	dec <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
     e82:	2012      	movs	r0, #18
     e84:	e7b2      	b.n	dec <usart_write_buffer_wait+0x14>
	return STATUS_OK;
     e86:	2000      	movs	r0, #0
     e88:	e7b0      	b.n	dec <usart_write_buffer_wait+0x14>
     e8a:	2000      	movs	r0, #0
     e8c:	e7ae      	b.n	dec <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
     e8e:	2012      	movs	r0, #18
     e90:	e7ac      	b.n	dec <usart_write_buffer_wait+0x14>
     e92:	46c0      	nop			; (mov r8, r8)
     e94:	0000ffff 	.word	0x0000ffff
     e98:	00000da9 	.word	0x00000da9

00000e9c <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e9e:	0006      	movs	r6, r0
     ea0:	000c      	movs	r4, r1
     ea2:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     ea4:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     ea6:	4b0a      	ldr	r3, [pc, #40]	; (ed0 <_usart_write_buffer+0x34>)
     ea8:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
     eaa:	8bf3      	ldrh	r3, [r6, #30]
     eac:	b29b      	uxth	r3, r3
     eae:	2b00      	cmp	r3, #0
     eb0:	d003      	beq.n	eba <_usart_write_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     eb2:	4b08      	ldr	r3, [pc, #32]	; (ed4 <_usart_write_buffer+0x38>)
     eb4:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     eb6:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
     eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
     eba:	83f5      	strh	r5, [r6, #30]
     ebc:	4b05      	ldr	r3, [pc, #20]	; (ed4 <_usart_write_buffer+0x38>)
     ebe:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
     ec0:	61b4      	str	r4, [r6, #24]
	module->tx_status                  = STATUS_BUSY;
     ec2:	2205      	movs	r2, #5
     ec4:	2323      	movs	r3, #35	; 0x23
     ec6:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
     ec8:	3b22      	subs	r3, #34	; 0x22
     eca:	737b      	strb	r3, [r7, #13]
	return STATUS_OK;
     ecc:	2000      	movs	r0, #0
     ece:	e7f3      	b.n	eb8 <_usart_write_buffer+0x1c>
     ed0:	00001505 	.word	0x00001505
     ed4:	00001545 	.word	0x00001545

00000ed8 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     ed8:	1c93      	adds	r3, r2, #2
     eda:	009b      	lsls	r3, r3, #2
     edc:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     ede:	2120      	movs	r1, #32
     ee0:	2301      	movs	r3, #1
     ee2:	4093      	lsls	r3, r2
     ee4:	001a      	movs	r2, r3
     ee6:	5c43      	ldrb	r3, [r0, r1]
     ee8:	4313      	orrs	r3, r2
     eea:	5443      	strb	r3, [r0, r1]
}
     eec:	4770      	bx	lr
	...

00000ef0 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     ef0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     ef2:	2317      	movs	r3, #23
	if (length == 0) {
     ef4:	2a00      	cmp	r2, #0
     ef6:	d101      	bne.n	efc <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
     ef8:	0018      	movs	r0, r3
     efa:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
     efc:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     efe:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
     f00:	2c00      	cmp	r4, #0
     f02:	d0f9      	beq.n	ef8 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
     f04:	4b01      	ldr	r3, [pc, #4]	; (f0c <usart_write_buffer_job+0x1c>)
     f06:	4798      	blx	r3
     f08:	0003      	movs	r3, r0
     f0a:	e7f5      	b.n	ef8 <usart_write_buffer_job+0x8>
     f0c:	00000e9d 	.word	0x00000e9d

00000f10 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     f12:	0080      	lsls	r0, r0, #2
     f14:	4b46      	ldr	r3, [pc, #280]	; (1030 <_usart_interrupt_handler+0x120>)
     f16:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     f18:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     f1a:	8a23      	ldrh	r3, [r4, #16]
	while (usart_is_syncing(module)) {
     f1c:	b21b      	sxth	r3, r3
     f1e:	2b00      	cmp	r3, #0
     f20:	dbfb      	blt.n	f1a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     f22:	7ba3      	ldrb	r3, [r4, #14]
	interrupt_status &= usart_hw->INTENSET.reg;
     f24:	7b66      	ldrb	r6, [r4, #13]
     f26:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     f28:	2320      	movs	r3, #32
     f2a:	5ceb      	ldrb	r3, [r5, r3]
     f2c:	2221      	movs	r2, #33	; 0x21
     f2e:	5caf      	ldrb	r7, [r5, r2]
     f30:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     f32:	07f3      	lsls	r3, r6, #31
     f34:	d522      	bpl.n	f7c <_usart_interrupt_handler+0x6c>
		if (module->remaining_tx_buffer_length) {
     f36:	8beb      	ldrh	r3, [r5, #30]
     f38:	b29b      	uxth	r3, r3
     f3a:	2b00      	cmp	r3, #0
     f3c:	d01c      	beq.n	f78 <_usart_interrupt_handler+0x68>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     f3e:	69aa      	ldr	r2, [r5, #24]
     f40:	7813      	ldrb	r3, [r2, #0]
     f42:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     f44:	1c51      	adds	r1, r2, #1
     f46:	61a9      	str	r1, [r5, #24]

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     f48:	7969      	ldrb	r1, [r5, #5]
     f4a:	2901      	cmp	r1, #1
     f4c:	d00e      	beq.n	f6c <_usart_interrupt_handler+0x5c>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     f4e:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     f50:	05db      	lsls	r3, r3, #23
     f52:	0ddb      	lsrs	r3, r3, #23
     f54:	8323      	strh	r3, [r4, #24]

			if (--(module->remaining_tx_buffer_length) == 0) {
     f56:	8beb      	ldrh	r3, [r5, #30]
     f58:	3b01      	subs	r3, #1
     f5a:	b29b      	uxth	r3, r3
     f5c:	83eb      	strh	r3, [r5, #30]
     f5e:	2b00      	cmp	r3, #0
     f60:	d10c      	bne.n	f7c <_usart_interrupt_handler+0x6c>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     f62:	3301      	adds	r3, #1
     f64:	7323      	strb	r3, [r4, #12]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     f66:	3301      	adds	r3, #1
     f68:	7363      	strb	r3, [r4, #13]
     f6a:	e007      	b.n	f7c <_usart_interrupt_handler+0x6c>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     f6c:	7851      	ldrb	r1, [r2, #1]
     f6e:	0209      	lsls	r1, r1, #8
     f70:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     f72:	3202      	adds	r2, #2
     f74:	61aa      	str	r2, [r5, #24]
     f76:	e7eb      	b.n	f50 <_usart_interrupt_handler+0x40>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     f78:	2301      	movs	r3, #1
     f7a:	7323      	strb	r3, [r4, #12]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     f7c:	07b3      	lsls	r3, r6, #30
     f7e:	d506      	bpl.n	f8e <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     f80:	2302      	movs	r3, #2
     f82:	7323      	strb	r3, [r4, #12]
		module->tx_status = STATUS_OK;
     f84:	2200      	movs	r2, #0
     f86:	3321      	adds	r3, #33	; 0x21
     f88:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     f8a:	07fb      	lsls	r3, r7, #31
     f8c:	d416      	bmi.n	fbc <_usart_interrupt_handler+0xac>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     f8e:	0773      	lsls	r3, r6, #29
     f90:	d54d      	bpl.n	102e <_usart_interrupt_handler+0x11e>

		if (module->remaining_rx_buffer_length) {
     f92:	8bab      	ldrh	r3, [r5, #28]
     f94:	b29b      	uxth	r3, r3
     f96:	2b00      	cmp	r3, #0
     f98:	d047      	beq.n	102a <_usart_interrupt_handler+0x11a>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     f9a:	8a23      	ldrh	r3, [r4, #16]
     f9c:	b2db      	uxtb	r3, r3
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     f9e:	075a      	lsls	r2, r3, #29
     fa0:	d020      	beq.n	fe4 <_usart_interrupt_handler+0xd4>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     fa2:	079a      	lsls	r2, r3, #30
     fa4:	d50e      	bpl.n	fc4 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     fa6:	221a      	movs	r2, #26
     fa8:	2322      	movs	r3, #34	; 0x22
     faa:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     fac:	3b20      	subs	r3, #32
     fae:	8223      	strh	r3, [r4, #16]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     fb0:	077b      	lsls	r3, r7, #29
     fb2:	d53c      	bpl.n	102e <_usart_interrupt_handler+0x11e>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     fb4:	692b      	ldr	r3, [r5, #16]
     fb6:	0028      	movs	r0, r5
     fb8:	4798      	blx	r3
     fba:	e038      	b.n	102e <_usart_interrupt_handler+0x11e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     fbc:	0028      	movs	r0, r5
     fbe:	68ab      	ldr	r3, [r5, #8]
     fc0:	4798      	blx	r3
     fc2:	e7e4      	b.n	f8e <_usart_interrupt_handler+0x7e>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     fc4:	075a      	lsls	r2, r3, #29
     fc6:	d505      	bpl.n	fd4 <_usart_interrupt_handler+0xc4>
					module->rx_status = STATUS_ERR_OVERFLOW;
     fc8:	221e      	movs	r2, #30
     fca:	2322      	movs	r3, #34	; 0x22
     fcc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     fce:	3b1e      	subs	r3, #30
     fd0:	8223      	strh	r3, [r4, #16]
     fd2:	e7ed      	b.n	fb0 <_usart_interrupt_handler+0xa0>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     fd4:	07db      	lsls	r3, r3, #31
     fd6:	d5eb      	bpl.n	fb0 <_usart_interrupt_handler+0xa0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     fd8:	2213      	movs	r2, #19
     fda:	2322      	movs	r3, #34	; 0x22
     fdc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     fde:	3b21      	subs	r3, #33	; 0x21
     fe0:	8223      	strh	r3, [r4, #16]
     fe2:	e7e5      	b.n	fb0 <_usart_interrupt_handler+0xa0>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     fe4:	8b23      	ldrh	r3, [r4, #24]
     fe6:	05db      	lsls	r3, r3, #23
     fe8:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     fea:	b2da      	uxtb	r2, r3
     fec:	6969      	ldr	r1, [r5, #20]
     fee:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     ff0:	696a      	ldr	r2, [r5, #20]
     ff2:	1c51      	adds	r1, r2, #1
     ff4:	6169      	str	r1, [r5, #20]

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     ff6:	7969      	ldrb	r1, [r5, #5]
     ff8:	2901      	cmp	r1, #1
     ffa:	d010      	beq.n	101e <_usart_interrupt_handler+0x10e>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     ffc:	8bab      	ldrh	r3, [r5, #28]
     ffe:	3b01      	subs	r3, #1
    1000:	b29b      	uxth	r3, r3
    1002:	83ab      	strh	r3, [r5, #28]
    1004:	2b00      	cmp	r3, #0
    1006:	d112      	bne.n	102e <_usart_interrupt_handler+0x11e>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1008:	3304      	adds	r3, #4
    100a:	7323      	strb	r3, [r4, #12]
					module->rx_status = STATUS_OK;
    100c:	2200      	movs	r2, #0
    100e:	331e      	adds	r3, #30
    1010:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1012:	07bb      	lsls	r3, r7, #30
    1014:	d50b      	bpl.n	102e <_usart_interrupt_handler+0x11e>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1016:	68eb      	ldr	r3, [r5, #12]
    1018:	0028      	movs	r0, r5
    101a:	4798      	blx	r3
    101c:	e007      	b.n	102e <_usart_interrupt_handler+0x11e>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    101e:	0a1b      	lsrs	r3, r3, #8
    1020:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1022:	696b      	ldr	r3, [r5, #20]
    1024:	3301      	adds	r3, #1
    1026:	616b      	str	r3, [r5, #20]
    1028:	e7e8      	b.n	ffc <_usart_interrupt_handler+0xec>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    102a:	2304      	movs	r3, #4
    102c:	7323      	strb	r3, [r4, #12]
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    102e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1030:	20000068 	.word	0x20000068

00001034 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1034:	4770      	bx	lr
	...

00001038 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1038:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    103a:	4b0a      	ldr	r3, [pc, #40]	; (1064 <_sercom_set_handler+0x2c>)
    103c:	781b      	ldrb	r3, [r3, #0]
    103e:	2b00      	cmp	r3, #0
    1040:	d10c      	bne.n	105c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1042:	4f09      	ldr	r7, [pc, #36]	; (1068 <_sercom_set_handler+0x30>)
    1044:	4e09      	ldr	r6, [pc, #36]	; (106c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1046:	4d0a      	ldr	r5, [pc, #40]	; (1070 <_sercom_set_handler+0x38>)
    1048:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    104a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    104c:	195a      	adds	r2, r3, r5
    104e:	6014      	str	r4, [r2, #0]
    1050:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1052:	2b18      	cmp	r3, #24
    1054:	d1f9      	bne.n	104a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1056:	2201      	movs	r2, #1
    1058:	4b02      	ldr	r3, [pc, #8]	; (1064 <_sercom_set_handler+0x2c>)
    105a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    105c:	0080      	lsls	r0, r0, #2
    105e:	4b02      	ldr	r3, [pc, #8]	; (1068 <_sercom_set_handler+0x30>)
    1060:	50c1      	str	r1, [r0, r3]
}
    1062:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1064:	2000002e 	.word	0x2000002e
    1068:	20000030 	.word	0x20000030
    106c:	00001035 	.word	0x00001035
    1070:	20000068 	.word	0x20000068

00001074 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1074:	b500      	push	{lr}
    1076:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1078:	2307      	movs	r3, #7
    107a:	466a      	mov	r2, sp
    107c:	7013      	strb	r3, [r2, #0]
    107e:	3301      	adds	r3, #1
    1080:	7053      	strb	r3, [r2, #1]
    1082:	3301      	adds	r3, #1
    1084:	7093      	strb	r3, [r2, #2]
    1086:	3301      	adds	r3, #1
    1088:	70d3      	strb	r3, [r2, #3]
    108a:	3301      	adds	r3, #1
    108c:	7113      	strb	r3, [r2, #4]
    108e:	3301      	adds	r3, #1
    1090:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1092:	4b03      	ldr	r3, [pc, #12]	; (10a0 <_sercom_get_interrupt_vector+0x2c>)
    1094:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1096:	466b      	mov	r3, sp
    1098:	5618      	ldrsb	r0, [r3, r0]
}
    109a:	b003      	add	sp, #12
    109c:	bd00      	pop	{pc}
    109e:	46c0      	nop			; (mov r8, r8)
    10a0:	00000b1d 	.word	0x00000b1d

000010a4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    10a4:	b510      	push	{r4, lr}
    10a6:	4b02      	ldr	r3, [pc, #8]	; (10b0 <SERCOM0_Handler+0xc>)
    10a8:	681b      	ldr	r3, [r3, #0]
    10aa:	2000      	movs	r0, #0
    10ac:	4798      	blx	r3
    10ae:	bd10      	pop	{r4, pc}
    10b0:	20000030 	.word	0x20000030

000010b4 <SERCOM1_Handler>:
    10b4:	b510      	push	{r4, lr}
    10b6:	4b02      	ldr	r3, [pc, #8]	; (10c0 <SERCOM1_Handler+0xc>)
    10b8:	685b      	ldr	r3, [r3, #4]
    10ba:	2001      	movs	r0, #1
    10bc:	4798      	blx	r3
    10be:	bd10      	pop	{r4, pc}
    10c0:	20000030 	.word	0x20000030

000010c4 <SERCOM2_Handler>:
    10c4:	b510      	push	{r4, lr}
    10c6:	4b02      	ldr	r3, [pc, #8]	; (10d0 <SERCOM2_Handler+0xc>)
    10c8:	689b      	ldr	r3, [r3, #8]
    10ca:	2002      	movs	r0, #2
    10cc:	4798      	blx	r3
    10ce:	bd10      	pop	{r4, pc}
    10d0:	20000030 	.word	0x20000030

000010d4 <SERCOM3_Handler>:
    10d4:	b510      	push	{r4, lr}
    10d6:	4b02      	ldr	r3, [pc, #8]	; (10e0 <SERCOM3_Handler+0xc>)
    10d8:	68db      	ldr	r3, [r3, #12]
    10da:	2003      	movs	r0, #3
    10dc:	4798      	blx	r3
    10de:	bd10      	pop	{r4, pc}
    10e0:	20000030 	.word	0x20000030

000010e4 <SERCOM4_Handler>:
    10e4:	b510      	push	{r4, lr}
    10e6:	4b02      	ldr	r3, [pc, #8]	; (10f0 <SERCOM4_Handler+0xc>)
    10e8:	691b      	ldr	r3, [r3, #16]
    10ea:	2004      	movs	r0, #4
    10ec:	4798      	blx	r3
    10ee:	bd10      	pop	{r4, pc}
    10f0:	20000030 	.word	0x20000030

000010f4 <SERCOM5_Handler>:
    10f4:	b510      	push	{r4, lr}
    10f6:	4b02      	ldr	r3, [pc, #8]	; (1100 <SERCOM5_Handler+0xc>)
    10f8:	695b      	ldr	r3, [r3, #20]
    10fa:	2005      	movs	r0, #5
    10fc:	4798      	blx	r3
    10fe:	bd10      	pop	{r4, pc}
    1100:	20000030 	.word	0x20000030

00001104 <usart_write_callback>:
 * @return				- void
 *
 * @note				- Interrupt Callback
 **********************************************************************/
 void usart_write_callback( struct usart_module *const usart_module )
 {
    1104:	b510      	push	{r4, lr}
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    1106:	2280      	movs	r2, #128	; 0x80
    1108:	01d2      	lsls	r2, r2, #7
    110a:	4b04      	ldr	r3, [pc, #16]	; (111c <usart_write_callback+0x18>)
    110c:	61da      	str	r2, [r3, #28]
	 port_pin_toggle_output_level( LED_0_PIN );
	 usart_write_buffer_wait(&usart_instance, newLine, sizeof(newLine));
    110e:	2203      	movs	r2, #3
    1110:	4903      	ldr	r1, [pc, #12]	; (1120 <usart_write_callback+0x1c>)
    1112:	4804      	ldr	r0, [pc, #16]	; (1124 <usart_write_callback+0x20>)
    1114:	4b04      	ldr	r3, [pc, #16]	; (1128 <usart_write_callback+0x24>)
    1116:	4798      	blx	r3
 }//usart_write_callback
    1118:	bd10      	pop	{r4, pc}
    111a:	46c0      	nop			; (mov r8, r8)
    111c:	41004400 	.word	0x41004400
    1120:	20000000 	.word	0x20000000
    1124:	2000008c 	.word	0x2000008c
    1128:	00000dd9 	.word	0x00000dd9

0000112c <usart_read_callback>:
 {
    112c:	b510      	push	{r4, lr}
    112e:	b084      	sub	sp, #16
	 UINT8 echoString[] = "\r\nEcho: ";
    1130:	a901      	add	r1, sp, #4
    1132:	4b09      	ldr	r3, [pc, #36]	; (1158 <usart_read_callback+0x2c>)
    1134:	000a      	movs	r2, r1
    1136:	cb11      	ldmia	r3!, {r0, r4}
    1138:	c211      	stmia	r2!, {r0, r4}
    113a:	781b      	ldrb	r3, [r3, #0]
    113c:	7013      	strb	r3, [r2, #0]
	 usart_write_buffer_wait(&usart_instance, echoString, sizeof(echoString));
    113e:	4c07      	ldr	r4, [pc, #28]	; (115c <usart_read_callback+0x30>)
    1140:	2209      	movs	r2, #9
    1142:	0020      	movs	r0, r4
    1144:	4b06      	ldr	r3, [pc, #24]	; (1160 <usart_read_callback+0x34>)
    1146:	4798      	blx	r3
	 usart_write_buffer_job( &usart_instance,(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH );
    1148:	2205      	movs	r2, #5
    114a:	4906      	ldr	r1, [pc, #24]	; (1164 <usart_read_callback+0x38>)
    114c:	0020      	movs	r0, r4
    114e:	4b06      	ldr	r3, [pc, #24]	; (1168 <usart_read_callback+0x3c>)
    1150:	4798      	blx	r3
 }//usart_read_callback
    1152:	b004      	add	sp, #16
    1154:	bd10      	pop	{r4, pc}
    1156:	46c0      	nop			; (mov r8, r8)
    1158:	00001db8 	.word	0x00001db8
    115c:	2000008c 	.word	0x2000008c
    1160:	00000dd9 	.word	0x00000dd9
    1164:	200000bc 	.word	0x200000bc
    1168:	00000ef1 	.word	0x00000ef1

0000116c <i2c_write_complete_callback>:
 * @return				- void
 *
 * @note				- called from main
 **********************************************************************/ 
 void i2c_write_complete_callback(struct i2c_master_module *const module)
{
    116c:	b510      	push	{r4, lr}
	/* Initiate new packet read */
	i2c_master_read_packet_job(&i2c_master_instance,&read_packet);
    116e:	4902      	ldr	r1, [pc, #8]	; (1178 <i2c_write_complete_callback+0xc>)
    1170:	4802      	ldr	r0, [pc, #8]	; (117c <i2c_write_complete_callback+0x10>)
    1172:	4b03      	ldr	r3, [pc, #12]	; (1180 <i2c_write_complete_callback+0x14>)
    1174:	4798      	blx	r3
}
    1176:	bd10      	pop	{r4, pc}
    1178:	200000b0 	.word	0x200000b0
    117c:	200000c4 	.word	0x200000c4
    1180:	000005d3 	.word	0x000005d3

00001184 <configure_usart>:
 {
    1184:	b530      	push	{r4, r5, lr}
    1186:	b08d      	sub	sp, #52	; 0x34
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1188:	2380      	movs	r3, #128	; 0x80
    118a:	05db      	lsls	r3, r3, #23
    118c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    118e:	2300      	movs	r3, #0
    1190:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1192:	22ff      	movs	r2, #255	; 0xff
    1194:	4669      	mov	r1, sp
    1196:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1198:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    119a:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    119c:	2296      	movs	r2, #150	; 0x96
    119e:	0192      	lsls	r2, r2, #6
    11a0:	9204      	str	r2, [sp, #16]
	config->receiver_enable  = true;
    11a2:	2201      	movs	r2, #1
    11a4:	750a      	strb	r2, [r1, #20]
	config->transmitter_enable = true;
    11a6:	754a      	strb	r2, [r1, #21]
	config->clock_polarity_inverted = false;
    11a8:	758b      	strb	r3, [r1, #22]
	config->use_external_clock = false;
    11aa:	75cb      	strb	r3, [r1, #23]
	config->ext_clock_freq   = 0;
    11ac:	9306      	str	r3, [sp, #24]
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    11ae:	770b      	strb	r3, [r1, #28]
	config->generator_source = GCLK_GENERATOR_0;
    11b0:	774b      	strb	r3, [r1, #29]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    11b2:	9308      	str	r3, [sp, #32]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    11b4:	9309      	str	r3, [sp, #36]	; 0x24
	 config_usart.mux_setting	= USART_RX_3_TX_2_XCK_3;
    11b6:	23c4      	movs	r3, #196	; 0xc4
    11b8:	039b      	lsls	r3, r3, #14
    11ba:	9303      	str	r3, [sp, #12]
	 config_usart.pinmux_pad2	= PINMUX_PA24C_SERCOM3_PAD2;
    11bc:	4b10      	ldr	r3, [pc, #64]	; (1200 <configure_usart+0x7c>)
    11be:	930a      	str	r3, [sp, #40]	; 0x28
	 config_usart.pinmux_pad3	= PINMUX_PA25C_SERCOM3_PAD3;
    11c0:	4b10      	ldr	r3, [pc, #64]	; (1204 <configure_usart+0x80>)
    11c2:	930b      	str	r3, [sp, #44]	; 0x2c
	 while ( usart_init( &usart_instance, SERCOM3, &config_usart ) != STATUS_OK ) { }
    11c4:	4d10      	ldr	r5, [pc, #64]	; (1208 <configure_usart+0x84>)
    11c6:	4c11      	ldr	r4, [pc, #68]	; (120c <configure_usart+0x88>)
    11c8:	466a      	mov	r2, sp
    11ca:	4911      	ldr	r1, [pc, #68]	; (1210 <configure_usart+0x8c>)
    11cc:	0028      	movs	r0, r5
    11ce:	47a0      	blx	r4
    11d0:	2800      	cmp	r0, #0
    11d2:	d1f9      	bne.n	11c8 <configure_usart+0x44>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    11d4:	4d0c      	ldr	r5, [pc, #48]	; (1208 <configure_usart+0x84>)
    11d6:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    11d8:	0020      	movs	r0, r4
    11da:	4b0e      	ldr	r3, [pc, #56]	; (1214 <configure_usart+0x90>)
    11dc:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    11de:	231f      	movs	r3, #31
    11e0:	4018      	ands	r0, r3
    11e2:	3b1e      	subs	r3, #30
    11e4:	4083      	lsls	r3, r0
    11e6:	4a0c      	ldr	r2, [pc, #48]	; (1218 <configure_usart+0x94>)
    11e8:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    11ea:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    11ec:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
    11ee:	b21b      	sxth	r3, r3
    11f0:	2b00      	cmp	r3, #0
    11f2:	dbfb      	blt.n	11ec <configure_usart+0x68>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    11f4:	6823      	ldr	r3, [r4, #0]
    11f6:	2202      	movs	r2, #2
    11f8:	4313      	orrs	r3, r2
    11fa:	6023      	str	r3, [r4, #0]
 }//configure_usart
    11fc:	b00d      	add	sp, #52	; 0x34
    11fe:	bd30      	pop	{r4, r5, pc}
    1200:	00180002 	.word	0x00180002
    1204:	00190002 	.word	0x00190002
    1208:	2000008c 	.word	0x2000008c
    120c:	00000b55 	.word	0x00000b55
    1210:	42001400 	.word	0x42001400
    1214:	00001075 	.word	0x00001075
    1218:	e000e100 	.word	0xe000e100

0000121c <configure_usart_callbacks>:
 {
    121c:	b570      	push	{r4, r5, r6, lr}
	 usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
    121e:	4c08      	ldr	r4, [pc, #32]	; (1240 <configure_usart_callbacks+0x24>)
    1220:	2200      	movs	r2, #0
    1222:	4908      	ldr	r1, [pc, #32]	; (1244 <configure_usart_callbacks+0x28>)
    1224:	0020      	movs	r0, r4
    1226:	4d08      	ldr	r5, [pc, #32]	; (1248 <configure_usart_callbacks+0x2c>)
    1228:	47a8      	blx	r5
	 usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    122a:	2201      	movs	r2, #1
    122c:	4907      	ldr	r1, [pc, #28]	; (124c <configure_usart_callbacks+0x30>)
    122e:	0020      	movs	r0, r4
    1230:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    1232:	2221      	movs	r2, #33	; 0x21
    1234:	5ca3      	ldrb	r3, [r4, r2]
    1236:	2103      	movs	r1, #3
    1238:	430b      	orrs	r3, r1
    123a:	54a3      	strb	r3, [r4, r2]
 }//configure_usart_callbacks
    123c:	bd70      	pop	{r4, r5, r6, pc}
    123e:	46c0      	nop			; (mov r8, r8)
    1240:	2000008c 	.word	0x2000008c
    1244:	00001105 	.word	0x00001105
    1248:	00000ed9 	.word	0x00000ed9
    124c:	0000112d 	.word	0x0000112d

00001250 <usart_Hello>:
 {
    1250:	b530      	push	{r4, r5, lr}
    1252:	b085      	sub	sp, #20
 	uint8_t string[] = "Hello World!\r\n";
    1254:	4669      	mov	r1, sp
    1256:	4b07      	ldr	r3, [pc, #28]	; (1274 <usart_Hello+0x24>)
    1258:	466a      	mov	r2, sp
    125a:	cb31      	ldmia	r3!, {r0, r4, r5}
    125c:	c231      	stmia	r2!, {r0, r4, r5}
    125e:	8818      	ldrh	r0, [r3, #0]
    1260:	8010      	strh	r0, [r2, #0]
    1262:	789b      	ldrb	r3, [r3, #2]
    1264:	7093      	strb	r3, [r2, #2]
 	usart_write_buffer_wait(&usart_instance, string, sizeof(string));
    1266:	220f      	movs	r2, #15
    1268:	4803      	ldr	r0, [pc, #12]	; (1278 <usart_Hello+0x28>)
    126a:	4b04      	ldr	r3, [pc, #16]	; (127c <usart_Hello+0x2c>)
    126c:	4798      	blx	r3
 }//usart_Hello
    126e:	b005      	add	sp, #20
    1270:	bd30      	pop	{r4, r5, pc}
    1272:	46c0      	nop			; (mov r8, r8)
    1274:	00001da8 	.word	0x00001da8
    1278:	2000008c 	.word	0x2000008c
    127c:	00000dd9 	.word	0x00000dd9

00001280 <configure_i2c_master>:
 {
    1280:	b570      	push	{r4, r5, r6, lr}
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    1282:	4a1d      	ldr	r2, [pc, #116]	; (12f8 <configure_i2c_master+0x78>)
    1284:	2364      	movs	r3, #100	; 0x64
    1286:	6013      	str	r3, [r2, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
#endif
	config->generator_source = GCLK_GENERATOR_0;
    1288:	2300      	movs	r3, #0
    128a:	7113      	strb	r3, [r2, #4]
	config->run_in_standby   = false;
    128c:	7413      	strb	r3, [r2, #16]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    128e:	2180      	movs	r1, #128	; 0x80
    1290:	0389      	lsls	r1, r1, #14
    1292:	6091      	str	r1, [r2, #8]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    1294:	2101      	movs	r1, #1
    1296:	4249      	negs	r1, r1
    1298:	8191      	strh	r1, [r2, #12]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    129a:	7713      	strb	r3, [r2, #28]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    129c:	6213      	str	r3, [r2, #32]
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
	config->master_scl_low_extend_timeout  = false;
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    129e:	33d7      	adds	r3, #215	; 0xd7
    12a0:	8493      	strh	r3, [r2, #36]	; 0x24
	 config_i2c_master.buffer_timeout = 10000;
    12a2:	4b16      	ldr	r3, [pc, #88]	; (12fc <configure_i2c_master+0x7c>)
    12a4:	81d3      	strh	r3, [r2, #14]
	 config_i2c_master.pinmux_pad0    = PINMUX_PA08D_SERCOM2_PAD0;
    12a6:	4b16      	ldr	r3, [pc, #88]	; (1300 <configure_i2c_master+0x80>)
    12a8:	6153      	str	r3, [r2, #20]
	 config_i2c_master.pinmux_pad1    = PINMUX_PA09D_SERCOM2_PAD1;
    12aa:	4b16      	ldr	r3, [pc, #88]	; (1304 <configure_i2c_master+0x84>)
    12ac:	6193      	str	r3, [r2, #24]
	 i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);	 	
    12ae:	4c16      	ldr	r4, [pc, #88]	; (1308 <configure_i2c_master+0x88>)
    12b0:	4916      	ldr	r1, [pc, #88]	; (130c <configure_i2c_master+0x8c>)
    12b2:	0020      	movs	r0, r4
    12b4:	4b16      	ldr	r3, [pc, #88]	; (1310 <configure_i2c_master+0x90>)
    12b6:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    12b8:	6824      	ldr	r4, [r4, #0]
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
    12ba:	8a23      	ldrh	r3, [r4, #16]
	while (i2c_master_is_syncing(module)) {
    12bc:	b21b      	sxth	r3, r3
    12be:	2b00      	cmp	r3, #0
    12c0:	dbfb      	blt.n	12ba <configure_i2c_master+0x3a>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    12c2:	6823      	ldr	r3, [r4, #0]
    12c4:	2202      	movs	r2, #2
    12c6:	4313      	orrs	r3, r2
    12c8:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    12ca:	4d0f      	ldr	r5, [pc, #60]	; (1308 <configure_i2c_master+0x88>)
    12cc:	6828      	ldr	r0, [r5, #0]
    12ce:	4b11      	ldr	r3, [pc, #68]	; (1314 <configure_i2c_master+0x94>)
    12d0:	4798      	blx	r3
    12d2:	231f      	movs	r3, #31
    12d4:	4018      	ands	r0, r3
    12d6:	3b1e      	subs	r3, #30
    12d8:	4083      	lsls	r3, r0
    12da:	4a0f      	ldr	r2, [pc, #60]	; (1318 <configure_i2c_master+0x98>)
    12dc:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    12de:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    12e0:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    12e2:	2110      	movs	r1, #16
    12e4:	8a22      	ldrh	r2, [r4, #16]
    12e6:	420a      	tst	r2, r1
    12e8:	d104      	bne.n	12f4 <configure_i2c_master+0x74>
		timeout_counter++;
    12ea:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    12ec:	4283      	cmp	r3, r0
    12ee:	d3f9      	bcc.n	12e4 <configure_i2c_master+0x64>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    12f0:	2310      	movs	r3, #16
    12f2:	8223      	strh	r3, [r4, #16]
 }// configure_i2c_master
    12f4:	bd70      	pop	{r4, r5, r6, pc}
    12f6:	46c0      	nop			; (mov r8, r8)
    12f8:	200000ec 	.word	0x200000ec
    12fc:	00002710 	.word	0x00002710
    1300:	00080003 	.word	0x00080003
    1304:	00090003 	.word	0x00090003
    1308:	200000c4 	.word	0x200000c4
    130c:	42001000 	.word	0x42001000
    1310:	00000321 	.word	0x00000321
    1314:	00001075 	.word	0x00001075
    1318:	e000e100 	.word	0xe000e100

0000131c <configure_i2c_callbacks>:
{
    131c:	b510      	push	{r4, lr}
	i2c_master_register_callback(&i2c_master_instance, i2c_write_complete_callback,
    131e:	4c05      	ldr	r4, [pc, #20]	; (1334 <configure_i2c_callbacks+0x18>)
    1320:	2200      	movs	r2, #0
    1322:	4905      	ldr	r1, [pc, #20]	; (1338 <configure_i2c_callbacks+0x1c>)
    1324:	0020      	movs	r0, r4
    1326:	4b05      	ldr	r3, [pc, #20]	; (133c <configure_i2c_callbacks+0x20>)
    1328:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    132a:	7e63      	ldrb	r3, [r4, #25]
    132c:	2201      	movs	r2, #1
    132e:	4313      	orrs	r3, r2
    1330:	7663      	strb	r3, [r4, #25]
}
    1332:	bd10      	pop	{r4, pc}
    1334:	200000c4 	.word	0x200000c4
    1338:	0000116d 	.word	0x0000116d
    133c:	000005bd 	.word	0x000005bd

00001340 <i2c_Read>:
 {
    1340:	b5f0      	push	{r4, r5, r6, r7, lr}
    1342:	b083      	sub	sp, #12
    1344:	0017      	movs	r7, r2
    1346:	9300      	str	r3, [sp, #0]
    1348:	466b      	mov	r3, sp
    134a:	1dda      	adds	r2, r3, #7
    134c:	71d9      	strb	r1, [r3, #7]
	read_packet.address = i2c_addr;
    134e:	4b18      	ldr	r3, [pc, #96]	; (13b0 <i2c_Read+0x70>)
    1350:	8018      	strh	r0, [r3, #0]
	read_packet.data = &reg_addr;
    1352:	605a      	str	r2, [r3, #4]
	read_packet.data_length = 1;
    1354:	2201      	movs	r2, #1
    1356:	805a      	strh	r2, [r3, #2]
	read_packet.ten_bit_address = FALSE;
    1358:	2200      	movs	r2, #0
    135a:	721a      	strb	r2, [r3, #8]
	read_packet.high_speed = FALSE;
    135c:	725a      	strb	r2, [r3, #9]
	while (i2c_master_write_packet_wait(&i2c_master_instance, &read_packet) != STATUS_OK) 
    135e:	001d      	movs	r5, r3
    1360:	4c14      	ldr	r4, [pc, #80]	; (13b4 <i2c_Read+0x74>)
    1362:	4e15      	ldr	r6, [pc, #84]	; (13b8 <i2c_Read+0x78>)
    1364:	0029      	movs	r1, r5
    1366:	0020      	movs	r0, r4
    1368:	47b0      	blx	r6
    136a:	2800      	cmp	r0, #0
    136c:	d009      	beq.n	1382 <i2c_Read+0x42>
		if (timeout++ == I2C_TIMEOUT) {
    136e:	4a13      	ldr	r2, [pc, #76]	; (13bc <i2c_Read+0x7c>)
    1370:	8813      	ldrh	r3, [r2, #0]
    1372:	1c59      	adds	r1, r3, #1
    1374:	8011      	strh	r1, [r2, #0]
    1376:	2b0a      	cmp	r3, #10
    1378:	d1f4      	bne.n	1364 <i2c_Read+0x24>
			return -1;
    137a:	2001      	movs	r0, #1
    137c:	4240      	negs	r0, r0
 }// i2c_Read
    137e:	b003      	add	sp, #12
    1380:	bdf0      	pop	{r4, r5, r6, r7, pc}
	read_packet.data = read_buffer;
    1382:	4b0b      	ldr	r3, [pc, #44]	; (13b0 <i2c_Read+0x70>)
    1384:	605f      	str	r7, [r3, #4]
	read_packet.data_length = len;
    1386:	466a      	mov	r2, sp
    1388:	8812      	ldrh	r2, [r2, #0]
    138a:	805a      	strh	r2, [r3, #2]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &read_packet) != STATUS_OK)
    138c:	001d      	movs	r5, r3
    138e:	4c09      	ldr	r4, [pc, #36]	; (13b4 <i2c_Read+0x74>)
    1390:	4e0b      	ldr	r6, [pc, #44]	; (13c0 <i2c_Read+0x80>)
    1392:	0029      	movs	r1, r5
    1394:	0020      	movs	r0, r4
    1396:	47b0      	blx	r6
    1398:	2800      	cmp	r0, #0
    139a:	d0f0      	beq.n	137e <i2c_Read+0x3e>
		if (timeout++ == I2C_TIMEOUT) {
    139c:	4a07      	ldr	r2, [pc, #28]	; (13bc <i2c_Read+0x7c>)
    139e:	8813      	ldrh	r3, [r2, #0]
    13a0:	1c59      	adds	r1, r3, #1
    13a2:	8011      	strh	r1, [r2, #0]
    13a4:	2b0a      	cmp	r3, #10
    13a6:	d1f4      	bne.n	1392 <i2c_Read+0x52>
			return -1;
    13a8:	2001      	movs	r0, #1
    13aa:	4240      	negs	r0, r0
    13ac:	e7e7      	b.n	137e <i2c_Read+0x3e>
    13ae:	46c0      	nop			; (mov r8, r8)
    13b0:	200000b0 	.word	0x200000b0
    13b4:	200000c4 	.word	0x200000c4
    13b8:	000004d9 	.word	0x000004d9
    13bc:	20000048 	.word	0x20000048
    13c0:	000004b5 	.word	0x000004b5

000013c4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    13c4:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    13c6:	2000      	movs	r0, #0
    13c8:	4b08      	ldr	r3, [pc, #32]	; (13ec <delay_init+0x28>)
    13ca:	4798      	blx	r3
    13cc:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    13ce:	4c08      	ldr	r4, [pc, #32]	; (13f0 <delay_init+0x2c>)
    13d0:	21fa      	movs	r1, #250	; 0xfa
    13d2:	0089      	lsls	r1, r1, #2
    13d4:	47a0      	blx	r4
    13d6:	4b07      	ldr	r3, [pc, #28]	; (13f4 <delay_init+0x30>)
    13d8:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    13da:	4907      	ldr	r1, [pc, #28]	; (13f8 <delay_init+0x34>)
    13dc:	0028      	movs	r0, r5
    13de:	47a0      	blx	r4
    13e0:	4b06      	ldr	r3, [pc, #24]	; (13fc <delay_init+0x38>)
    13e2:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    13e4:	2205      	movs	r2, #5
    13e6:	4b06      	ldr	r3, [pc, #24]	; (1400 <delay_init+0x3c>)
    13e8:	601a      	str	r2, [r3, #0]
}
    13ea:	bd70      	pop	{r4, r5, r6, pc}
    13ec:	00001875 	.word	0x00001875
    13f0:	00001bdd 	.word	0x00001bdd
    13f4:	20000004 	.word	0x20000004
    13f8:	000f4240 	.word	0x000f4240
    13fc:	20000008 	.word	0x20000008
    1400:	e000e010 	.word	0xe000e010

00001404 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1404:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    1406:	4b08      	ldr	r3, [pc, #32]	; (1428 <delay_cycles_ms+0x24>)
    1408:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    140a:	4a08      	ldr	r2, [pc, #32]	; (142c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    140c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    140e:	2180      	movs	r1, #128	; 0x80
    1410:	0249      	lsls	r1, r1, #9
	while (n--) {
    1412:	3801      	subs	r0, #1
    1414:	d307      	bcc.n	1426 <delay_cycles_ms+0x22>
	if (n > 0) {
    1416:	2c00      	cmp	r4, #0
    1418:	d0fb      	beq.n	1412 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    141a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    141c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    141e:	6813      	ldr	r3, [r2, #0]
    1420:	420b      	tst	r3, r1
    1422:	d0fc      	beq.n	141e <delay_cycles_ms+0x1a>
    1424:	e7f5      	b.n	1412 <delay_cycles_ms+0xe>
	}
}
    1426:	bd30      	pop	{r4, r5, pc}
    1428:	20000004 	.word	0x20000004
    142c:	e000e010 	.word	0xe000e010

00001430 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1430:	b500      	push	{lr}
    1432:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1434:	ab01      	add	r3, sp, #4
    1436:	2280      	movs	r2, #128	; 0x80
    1438:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    143a:	780a      	ldrb	r2, [r1, #0]
    143c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    143e:	784a      	ldrb	r2, [r1, #1]
    1440:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1442:	788a      	ldrb	r2, [r1, #2]
    1444:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1446:	0019      	movs	r1, r3
    1448:	4b01      	ldr	r3, [pc, #4]	; (1450 <port_pin_set_config+0x20>)
    144a:	4798      	blx	r3
}
    144c:	b003      	add	sp, #12
    144e:	bd00      	pop	{pc}
    1450:	00001a85 	.word	0x00001a85

00001454 <config_led>:
 


 /** Configure LED0, turn it off*/
 void config_led(void)
 {
    1454:	b500      	push	{lr}
    1456:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    1458:	a901      	add	r1, sp, #4
    145a:	2301      	movs	r3, #1
    145c:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    145e:	2200      	movs	r2, #0
    1460:	708a      	strb	r2, [r1, #2]
	 struct port_config pin_conf;
	 port_get_config_defaults(&pin_conf);

	 pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1462:	700b      	strb	r3, [r1, #0]
	 port_pin_set_config(LED_0_PIN, &pin_conf);
    1464:	200e      	movs	r0, #14
    1466:	4b04      	ldr	r3, [pc, #16]	; (1478 <config_led+0x24>)
    1468:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    146a:	2280      	movs	r2, #128	; 0x80
    146c:	01d2      	lsls	r2, r2, #7
    146e:	4b03      	ldr	r3, [pc, #12]	; (147c <config_led+0x28>)
    1470:	619a      	str	r2, [r3, #24]
	 port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
 
}
    1472:	b003      	add	sp, #12
    1474:	bd00      	pop	{pc}
    1476:	46c0      	nop			; (mov r8, r8)
    1478:	00001431 	.word	0x00001431
    147c:	41004400 	.word	0x41004400

00001480 <config_board>:

void config_board(void)
{
    1480:	b510      	push	{r4, lr}
 	/*Configure system tick to generate periodic interrupts */
 	SysTick_Config(system_gclk_gen_get_hz(GCLK_GENERATOR_0));
    1482:	2000      	movs	r0, #0
    1484:	4b13      	ldr	r3, [pc, #76]	; (14d4 <config_board+0x54>)
    1486:	4798      	blx	r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
    1488:	3801      	subs	r0, #1
    148a:	4b13      	ldr	r3, [pc, #76]	; (14d8 <config_board+0x58>)
    148c:	4298      	cmp	r0, r3
    148e:	d80d      	bhi.n	14ac <config_board+0x2c>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
    1490:	4a12      	ldr	r2, [pc, #72]	; (14dc <config_board+0x5c>)
    1492:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1494:	4812      	ldr	r0, [pc, #72]	; (14e0 <config_board+0x60>)
    1496:	6a03      	ldr	r3, [r0, #32]
    1498:	021b      	lsls	r3, r3, #8
    149a:	0a1b      	lsrs	r3, r3, #8
    149c:	21c0      	movs	r1, #192	; 0xc0
    149e:	0609      	lsls	r1, r1, #24
    14a0:	430b      	orrs	r3, r1
    14a2:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    14a4:	2300      	movs	r3, #0
    14a6:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    14a8:	3307      	adds	r3, #7
    14aa:	6013      	str	r3, [r2, #0]

	config_led();
    14ac:	4b0d      	ldr	r3, [pc, #52]	; (14e4 <config_board+0x64>)
    14ae:	4798      	blx	r3
	delay_init();
    14b0:	4b0d      	ldr	r3, [pc, #52]	; (14e8 <config_board+0x68>)
    14b2:	4798      	blx	r3

	configure_usart();
    14b4:	4b0d      	ldr	r3, [pc, #52]	; (14ec <config_board+0x6c>)
    14b6:	4798      	blx	r3
	configure_usart_callbacks();
    14b8:	4b0d      	ldr	r3, [pc, #52]	; (14f0 <config_board+0x70>)
    14ba:	4798      	blx	r3

	configure_i2c_master();
    14bc:	4b0d      	ldr	r3, [pc, #52]	; (14f4 <config_board+0x74>)
    14be:	4798      	blx	r3
	configure_i2c_callbacks();
    14c0:	4b0d      	ldr	r3, [pc, #52]	; (14f8 <config_board+0x78>)
    14c2:	4798      	blx	r3
	cpu_irq_enable();
    14c4:	2201      	movs	r2, #1
    14c6:	4b0d      	ldr	r3, [pc, #52]	; (14fc <config_board+0x7c>)
    14c8:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    14ca:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    14ce:	b662      	cpsie	i

	system_interrupt_enable_global();	//Enable Interrupts for callbacks


    14d0:	bd10      	pop	{r4, pc}
    14d2:	46c0      	nop			; (mov r8, r8)
    14d4:	00001875 	.word	0x00001875
    14d8:	00ffffff 	.word	0x00ffffff
    14dc:	e000e010 	.word	0xe000e010
    14e0:	e000ed00 	.word	0xe000ed00
    14e4:	00001455 	.word	0x00001455
    14e8:	000013c5 	.word	0x000013c5
    14ec:	00001185 	.word	0x00001185
    14f0:	0000121d 	.word	0x0000121d
    14f4:	00001281 	.word	0x00001281
    14f8:	0000131d 	.word	0x0000131d
    14fc:	2000000c 	.word	0x2000000c

00001500 <system_board_init>:
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	 
}
    1500:	4770      	bx	lr
	...

00001504 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1504:	4b0c      	ldr	r3, [pc, #48]	; (1538 <cpu_irq_enter_critical+0x34>)
    1506:	681b      	ldr	r3, [r3, #0]
    1508:	2b00      	cmp	r3, #0
    150a:	d106      	bne.n	151a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    150c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1510:	2b00      	cmp	r3, #0
    1512:	d007      	beq.n	1524 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1514:	2200      	movs	r2, #0
    1516:	4b09      	ldr	r3, [pc, #36]	; (153c <cpu_irq_enter_critical+0x38>)
    1518:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    151a:	4a07      	ldr	r2, [pc, #28]	; (1538 <cpu_irq_enter_critical+0x34>)
    151c:	6813      	ldr	r3, [r2, #0]
    151e:	3301      	adds	r3, #1
    1520:	6013      	str	r3, [r2, #0]
}
    1522:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1524:	b672      	cpsid	i
    1526:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    152a:	2200      	movs	r2, #0
    152c:	4b04      	ldr	r3, [pc, #16]	; (1540 <cpu_irq_enter_critical+0x3c>)
    152e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1530:	3201      	adds	r2, #1
    1532:	4b02      	ldr	r3, [pc, #8]	; (153c <cpu_irq_enter_critical+0x38>)
    1534:	701a      	strb	r2, [r3, #0]
    1536:	e7f0      	b.n	151a <cpu_irq_enter_critical+0x16>
    1538:	2000004c 	.word	0x2000004c
    153c:	20000050 	.word	0x20000050
    1540:	2000000c 	.word	0x2000000c

00001544 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1544:	4b08      	ldr	r3, [pc, #32]	; (1568 <cpu_irq_leave_critical+0x24>)
    1546:	681a      	ldr	r2, [r3, #0]
    1548:	3a01      	subs	r2, #1
    154a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    154c:	681b      	ldr	r3, [r3, #0]
    154e:	2b00      	cmp	r3, #0
    1550:	d109      	bne.n	1566 <cpu_irq_leave_critical+0x22>
    1552:	4b06      	ldr	r3, [pc, #24]	; (156c <cpu_irq_leave_critical+0x28>)
    1554:	781b      	ldrb	r3, [r3, #0]
    1556:	2b00      	cmp	r3, #0
    1558:	d005      	beq.n	1566 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    155a:	2201      	movs	r2, #1
    155c:	4b04      	ldr	r3, [pc, #16]	; (1570 <cpu_irq_leave_critical+0x2c>)
    155e:	701a      	strb	r2, [r3, #0]
    1560:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1564:	b662      	cpsie	i
	}
}
    1566:	4770      	bx	lr
    1568:	2000004c 	.word	0x2000004c
    156c:	20000050 	.word	0x20000050
    1570:	2000000c 	.word	0x2000000c

00001574 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1574:	b510      	push	{r4, lr}
	switch (clock_source) {
    1576:	2807      	cmp	r0, #7
    1578:	d803      	bhi.n	1582 <system_clock_source_get_hz+0xe>
    157a:	0080      	lsls	r0, r0, #2
    157c:	4b16      	ldr	r3, [pc, #88]	; (15d8 <system_clock_source_get_hz+0x64>)
    157e:	581b      	ldr	r3, [r3, r0]
    1580:	469f      	mov	pc, r3
		}

		return 48000000UL;

	default:
		return 0;
    1582:	2000      	movs	r0, #0
    1584:	e027      	b.n	15d6 <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc.frequency;
    1586:	4b15      	ldr	r3, [pc, #84]	; (15dc <system_clock_source_get_hz+0x68>)
    1588:	68d8      	ldr	r0, [r3, #12]
    158a:	e024      	b.n	15d6 <system_clock_source_get_hz+0x62>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    158c:	4b14      	ldr	r3, [pc, #80]	; (15e0 <system_clock_source_get_hz+0x6c>)
    158e:	6a1b      	ldr	r3, [r3, #32]
    1590:	059b      	lsls	r3, r3, #22
    1592:	0f9b      	lsrs	r3, r3, #30
    1594:	4813      	ldr	r0, [pc, #76]	; (15e4 <system_clock_source_get_hz+0x70>)
    1596:	40d8      	lsrs	r0, r3
    1598:	e01d      	b.n	15d6 <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc32k.frequency;
    159a:	4b10      	ldr	r3, [pc, #64]	; (15dc <system_clock_source_get_hz+0x68>)
    159c:	6918      	ldr	r0, [r3, #16]
    159e:	e01a      	b.n	15d6 <system_clock_source_get_hz+0x62>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    15a0:	4b0e      	ldr	r3, [pc, #56]	; (15dc <system_clock_source_get_hz+0x68>)
    15a2:	681b      	ldr	r3, [r3, #0]
			return 0;
    15a4:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    15a6:	079b      	lsls	r3, r3, #30
    15a8:	d515      	bpl.n	15d6 <system_clock_source_get_hz+0x62>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    15aa:	490d      	ldr	r1, [pc, #52]	; (15e0 <system_clock_source_get_hz+0x6c>)
    15ac:	2210      	movs	r2, #16
    15ae:	68cb      	ldr	r3, [r1, #12]
    15b0:	421a      	tst	r2, r3
    15b2:	d0fc      	beq.n	15ae <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    15b4:	4b09      	ldr	r3, [pc, #36]	; (15dc <system_clock_source_get_hz+0x68>)
    15b6:	681b      	ldr	r3, [r3, #0]
    15b8:	075b      	lsls	r3, r3, #29
    15ba:	d401      	bmi.n	15c0 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    15bc:	480a      	ldr	r0, [pc, #40]	; (15e8 <system_clock_source_get_hz+0x74>)
    15be:	e00a      	b.n	15d6 <system_clock_source_get_hz+0x62>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    15c0:	2000      	movs	r0, #0
    15c2:	4b0a      	ldr	r3, [pc, #40]	; (15ec <system_clock_source_get_hz+0x78>)
    15c4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    15c6:	4b05      	ldr	r3, [pc, #20]	; (15dc <system_clock_source_get_hz+0x68>)
    15c8:	689b      	ldr	r3, [r3, #8]
    15ca:	041b      	lsls	r3, r3, #16
    15cc:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    15ce:	4358      	muls	r0, r3
    15d0:	e001      	b.n	15d6 <system_clock_source_get_hz+0x62>
		return 32768UL;
    15d2:	2080      	movs	r0, #128	; 0x80
    15d4:	0200      	lsls	r0, r0, #8
	}
}
    15d6:	bd10      	pop	{r4, pc}
    15d8:	00001dc4 	.word	0x00001dc4
    15dc:	20000054 	.word	0x20000054
    15e0:	40000800 	.word	0x40000800
    15e4:	007a1200 	.word	0x007a1200
    15e8:	02dc6c00 	.word	0x02dc6c00
    15ec:	000019a9 	.word	0x000019a9

000015f0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    15f0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    15f2:	490c      	ldr	r1, [pc, #48]	; (1624 <system_clock_source_osc8m_set_config+0x34>)
    15f4:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    15f6:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    15f8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    15fa:	7840      	ldrb	r0, [r0, #1]
    15fc:	2201      	movs	r2, #1
    15fe:	4010      	ands	r0, r2
    1600:	0180      	lsls	r0, r0, #6
    1602:	2640      	movs	r6, #64	; 0x40
    1604:	43b3      	bics	r3, r6
    1606:	4303      	orrs	r3, r0
    1608:	402a      	ands	r2, r5
    160a:	01d2      	lsls	r2, r2, #7
    160c:	2080      	movs	r0, #128	; 0x80
    160e:	4383      	bics	r3, r0
    1610:	4313      	orrs	r3, r2
    1612:	2203      	movs	r2, #3
    1614:	4022      	ands	r2, r4
    1616:	0212      	lsls	r2, r2, #8
    1618:	4803      	ldr	r0, [pc, #12]	; (1628 <system_clock_source_osc8m_set_config+0x38>)
    161a:	4003      	ands	r3, r0
    161c:	4313      	orrs	r3, r2
    161e:	620b      	str	r3, [r1, #32]
}
    1620:	bd70      	pop	{r4, r5, r6, pc}
    1622:	46c0      	nop			; (mov r8, r8)
    1624:	40000800 	.word	0x40000800
    1628:	fffffcff 	.word	0xfffffcff

0000162c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    162c:	2807      	cmp	r0, #7
    162e:	d803      	bhi.n	1638 <system_clock_source_enable+0xc>
    1630:	0080      	lsls	r0, r0, #2
    1632:	4b1e      	ldr	r3, [pc, #120]	; (16ac <system_clock_source_enable+0x80>)
    1634:	581b      	ldr	r3, [r3, r0]
    1636:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1638:	2017      	movs	r0, #23
    163a:	e036      	b.n	16aa <system_clock_source_enable+0x7e>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    163c:	4a1c      	ldr	r2, [pc, #112]	; (16b0 <system_clock_source_enable+0x84>)
    163e:	6a13      	ldr	r3, [r2, #32]
    1640:	2102      	movs	r1, #2
    1642:	430b      	orrs	r3, r1
    1644:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1646:	2000      	movs	r0, #0
    1648:	e02f      	b.n	16aa <system_clock_source_enable+0x7e>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    164a:	4a19      	ldr	r2, [pc, #100]	; (16b0 <system_clock_source_enable+0x84>)
    164c:	6993      	ldr	r3, [r2, #24]
    164e:	2102      	movs	r1, #2
    1650:	430b      	orrs	r3, r1
    1652:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1654:	2000      	movs	r0, #0
		break;
    1656:	e028      	b.n	16aa <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1658:	4a15      	ldr	r2, [pc, #84]	; (16b0 <system_clock_source_enable+0x84>)
    165a:	8a13      	ldrh	r3, [r2, #16]
    165c:	2102      	movs	r1, #2
    165e:	430b      	orrs	r3, r1
    1660:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1662:	2000      	movs	r0, #0
		break;
    1664:	e021      	b.n	16aa <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1666:	4a12      	ldr	r2, [pc, #72]	; (16b0 <system_clock_source_enable+0x84>)
    1668:	8a93      	ldrh	r3, [r2, #20]
    166a:	2102      	movs	r1, #2
    166c:	430b      	orrs	r3, r1
    166e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1670:	2000      	movs	r0, #0
		break;
    1672:	e01a      	b.n	16aa <system_clock_source_enable+0x7e>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1674:	4b0f      	ldr	r3, [pc, #60]	; (16b4 <system_clock_source_enable+0x88>)
    1676:	681a      	ldr	r2, [r3, #0]
    1678:	2102      	movs	r1, #2
    167a:	430a      	orrs	r2, r1
    167c:	601a      	str	r2, [r3, #0]
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    167e:	681b      	ldr	r3, [r3, #0]
    1680:	4a0d      	ldr	r2, [pc, #52]	; (16b8 <system_clock_source_enable+0x8c>)
    1682:	4013      	ands	r3, r2
    1684:	4a0a      	ldr	r2, [pc, #40]	; (16b0 <system_clock_source_enable+0x84>)
    1686:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1688:	0011      	movs	r1, r2
    168a:	2210      	movs	r2, #16
    168c:	68cb      	ldr	r3, [r1, #12]
    168e:	421a      	tst	r2, r3
    1690:	d0fc      	beq.n	168c <system_clock_source_enable+0x60>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1692:	4a08      	ldr	r2, [pc, #32]	; (16b4 <system_clock_source_enable+0x88>)
    1694:	6891      	ldr	r1, [r2, #8]
    1696:	4b06      	ldr	r3, [pc, #24]	; (16b0 <system_clock_source_enable+0x84>)
    1698:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    169a:	6851      	ldr	r1, [r2, #4]
    169c:	6299      	str	r1, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    169e:	6812      	ldr	r2, [r2, #0]
    16a0:	b292      	uxth	r2, r2
    16a2:	849a      	strh	r2, [r3, #36]	; 0x24
	return STATUS_OK;
    16a4:	2000      	movs	r0, #0
    16a6:	e000      	b.n	16aa <system_clock_source_enable+0x7e>
		return STATUS_OK;
    16a8:	2000      	movs	r0, #0
}
    16aa:	4770      	bx	lr
    16ac:	00001de4 	.word	0x00001de4
    16b0:	40000800 	.word	0x40000800
    16b4:	20000054 	.word	0x20000054
    16b8:	0000ff7f 	.word	0x0000ff7f

000016bc <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    16bc:	b530      	push	{r4, r5, lr}
    16be:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    16c0:	22c2      	movs	r2, #194	; 0xc2
    16c2:	00d2      	lsls	r2, r2, #3
    16c4:	4b1a      	ldr	r3, [pc, #104]	; (1730 <system_clock_init+0x74>)
    16c6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    16c8:	4a1a      	ldr	r2, [pc, #104]	; (1734 <system_clock_init+0x78>)
    16ca:	6853      	ldr	r3, [r2, #4]
    16cc:	211e      	movs	r1, #30
    16ce:	438b      	bics	r3, r1
    16d0:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    16d2:	2301      	movs	r3, #1
    16d4:	466a      	mov	r2, sp
    16d6:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    16d8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    16da:	4d17      	ldr	r5, [pc, #92]	; (1738 <system_clock_init+0x7c>)
    16dc:	b2e0      	uxtb	r0, r4
    16de:	4669      	mov	r1, sp
    16e0:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    16e2:	3401      	adds	r4, #1
    16e4:	2c1c      	cmp	r4, #28
    16e6:	d1f9      	bne.n	16dc <system_clock_init+0x20>
	config->run_in_standby  = false;
    16e8:	a803      	add	r0, sp, #12
    16ea:	2400      	movs	r4, #0
    16ec:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    16ee:	2501      	movs	r5, #1
    16f0:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    16f2:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    16f4:	4b11      	ldr	r3, [pc, #68]	; (173c <system_clock_init+0x80>)
    16f6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    16f8:	2006      	movs	r0, #6
    16fa:	4b11      	ldr	r3, [pc, #68]	; (1740 <system_clock_init+0x84>)
    16fc:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    16fe:	4b11      	ldr	r3, [pc, #68]	; (1744 <system_clock_init+0x88>)
    1700:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    1702:	4b11      	ldr	r3, [pc, #68]	; (1748 <system_clock_init+0x8c>)
    1704:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1706:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1708:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    170a:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    170c:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    170e:	466b      	mov	r3, sp
    1710:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1712:	2306      	movs	r3, #6
    1714:	466a      	mov	r2, sp
    1716:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    1718:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    171a:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    171c:	4669      	mov	r1, sp
    171e:	2000      	movs	r0, #0
    1720:	4b0a      	ldr	r3, [pc, #40]	; (174c <system_clock_init+0x90>)
    1722:	4798      	blx	r3
    1724:	2000      	movs	r0, #0
    1726:	4b0a      	ldr	r3, [pc, #40]	; (1750 <system_clock_init+0x94>)
    1728:	4798      	blx	r3
#endif
}
    172a:	b005      	add	sp, #20
    172c:	bd30      	pop	{r4, r5, pc}
    172e:	46c0      	nop			; (mov r8, r8)
    1730:	40000800 	.word	0x40000800
    1734:	41004000 	.word	0x41004000
    1738:	0000198d 	.word	0x0000198d
    173c:	000015f1 	.word	0x000015f1
    1740:	0000162d 	.word	0x0000162d
    1744:	00001755 	.word	0x00001755
    1748:	40000400 	.word	0x40000400
    174c:	00001779 	.word	0x00001779
    1750:	00001831 	.word	0x00001831

00001754 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1754:	4a06      	ldr	r2, [pc, #24]	; (1770 <system_gclk_init+0x1c>)
    1756:	6993      	ldr	r3, [r2, #24]
    1758:	2108      	movs	r1, #8
    175a:	430b      	orrs	r3, r1
    175c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    175e:	2201      	movs	r2, #1
    1760:	4b04      	ldr	r3, [pc, #16]	; (1774 <system_gclk_init+0x20>)
    1762:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1764:	0019      	movs	r1, r3
    1766:	780b      	ldrb	r3, [r1, #0]
    1768:	4213      	tst	r3, r2
    176a:	d1fc      	bne.n	1766 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    176c:	4770      	bx	lr
    176e:	46c0      	nop			; (mov r8, r8)
    1770:	40000400 	.word	0x40000400
    1774:	40000c00 	.word	0x40000c00

00001778 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1778:	b570      	push	{r4, r5, r6, lr}
    177a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    177c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    177e:	780d      	ldrb	r5, [r1, #0]
    1780:	022d      	lsls	r5, r5, #8
    1782:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1784:	784b      	ldrb	r3, [r1, #1]
    1786:	2b00      	cmp	r3, #0
    1788:	d002      	beq.n	1790 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    178a:	2380      	movs	r3, #128	; 0x80
    178c:	02db      	lsls	r3, r3, #11
    178e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1790:	7a4b      	ldrb	r3, [r1, #9]
    1792:	2b00      	cmp	r3, #0
    1794:	d002      	beq.n	179c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1796:	2380      	movs	r3, #128	; 0x80
    1798:	031b      	lsls	r3, r3, #12
    179a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    179c:	6848      	ldr	r0, [r1, #4]
    179e:	2801      	cmp	r0, #1
    17a0:	d910      	bls.n	17c4 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    17a2:	1e43      	subs	r3, r0, #1
    17a4:	4218      	tst	r0, r3
    17a6:	d134      	bne.n	1812 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    17a8:	2802      	cmp	r0, #2
    17aa:	d930      	bls.n	180e <system_gclk_gen_set_config+0x96>
    17ac:	2302      	movs	r3, #2
    17ae:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    17b0:	3201      	adds	r2, #1
						mask <<= 1) {
    17b2:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    17b4:	4298      	cmp	r0, r3
    17b6:	d8fb      	bhi.n	17b0 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    17b8:	0212      	lsls	r2, r2, #8
    17ba:	4332      	orrs	r2, r6
    17bc:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    17be:	2380      	movs	r3, #128	; 0x80
    17c0:	035b      	lsls	r3, r3, #13
    17c2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    17c4:	7a0b      	ldrb	r3, [r1, #8]
    17c6:	2b00      	cmp	r3, #0
    17c8:	d002      	beq.n	17d0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    17ca:	2380      	movs	r3, #128	; 0x80
    17cc:	039b      	lsls	r3, r3, #14
    17ce:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    17d0:	4a13      	ldr	r2, [pc, #76]	; (1820 <system_gclk_gen_set_config+0xa8>)
    17d2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    17d4:	b25b      	sxtb	r3, r3
    17d6:	2b00      	cmp	r3, #0
    17d8:	dbfb      	blt.n	17d2 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    17da:	4b12      	ldr	r3, [pc, #72]	; (1824 <system_gclk_gen_set_config+0xac>)
    17dc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    17de:	4b12      	ldr	r3, [pc, #72]	; (1828 <system_gclk_gen_set_config+0xb0>)
    17e0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    17e2:	4a0f      	ldr	r2, [pc, #60]	; (1820 <system_gclk_gen_set_config+0xa8>)
    17e4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    17e6:	b25b      	sxtb	r3, r3
    17e8:	2b00      	cmp	r3, #0
    17ea:	dbfb      	blt.n	17e4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    17ec:	4b0c      	ldr	r3, [pc, #48]	; (1820 <system_gclk_gen_set_config+0xa8>)
    17ee:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    17f0:	001a      	movs	r2, r3
    17f2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    17f4:	b25b      	sxtb	r3, r3
    17f6:	2b00      	cmp	r3, #0
    17f8:	dbfb      	blt.n	17f2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    17fa:	4a09      	ldr	r2, [pc, #36]	; (1820 <system_gclk_gen_set_config+0xa8>)
    17fc:	6853      	ldr	r3, [r2, #4]
    17fe:	2180      	movs	r1, #128	; 0x80
    1800:	0249      	lsls	r1, r1, #9
    1802:	400b      	ands	r3, r1
    1804:	431d      	orrs	r5, r3
    1806:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1808:	4b08      	ldr	r3, [pc, #32]	; (182c <system_gclk_gen_set_config+0xb4>)
    180a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    180c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    180e:	2200      	movs	r2, #0
    1810:	e7d2      	b.n	17b8 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1812:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1814:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1816:	2380      	movs	r3, #128	; 0x80
    1818:	029b      	lsls	r3, r3, #10
    181a:	431d      	orrs	r5, r3
    181c:	e7d2      	b.n	17c4 <system_gclk_gen_set_config+0x4c>
    181e:	46c0      	nop			; (mov r8, r8)
    1820:	40000c00 	.word	0x40000c00
    1824:	00001505 	.word	0x00001505
    1828:	40000c08 	.word	0x40000c08
    182c:	00001545 	.word	0x00001545

00001830 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1830:	b510      	push	{r4, lr}
    1832:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1834:	4a0b      	ldr	r2, [pc, #44]	; (1864 <system_gclk_gen_enable+0x34>)
    1836:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1838:	b25b      	sxtb	r3, r3
    183a:	2b00      	cmp	r3, #0
    183c:	dbfb      	blt.n	1836 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    183e:	4b0a      	ldr	r3, [pc, #40]	; (1868 <system_gclk_gen_enable+0x38>)
    1840:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1842:	4b0a      	ldr	r3, [pc, #40]	; (186c <system_gclk_gen_enable+0x3c>)
    1844:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1846:	4a07      	ldr	r2, [pc, #28]	; (1864 <system_gclk_gen_enable+0x34>)
    1848:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    184a:	b25b      	sxtb	r3, r3
    184c:	2b00      	cmp	r3, #0
    184e:	dbfb      	blt.n	1848 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1850:	4a04      	ldr	r2, [pc, #16]	; (1864 <system_gclk_gen_enable+0x34>)
    1852:	6851      	ldr	r1, [r2, #4]
    1854:	2380      	movs	r3, #128	; 0x80
    1856:	025b      	lsls	r3, r3, #9
    1858:	430b      	orrs	r3, r1
    185a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    185c:	4b04      	ldr	r3, [pc, #16]	; (1870 <system_gclk_gen_enable+0x40>)
    185e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1860:	bd10      	pop	{r4, pc}
    1862:	46c0      	nop			; (mov r8, r8)
    1864:	40000c00 	.word	0x40000c00
    1868:	00001505 	.word	0x00001505
    186c:	40000c04 	.word	0x40000c04
    1870:	00001545 	.word	0x00001545

00001874 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1874:	b570      	push	{r4, r5, r6, lr}
    1876:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1878:	4a1a      	ldr	r2, [pc, #104]	; (18e4 <system_gclk_gen_get_hz+0x70>)
    187a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    187c:	b25b      	sxtb	r3, r3
    187e:	2b00      	cmp	r3, #0
    1880:	dbfb      	blt.n	187a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1882:	4b19      	ldr	r3, [pc, #100]	; (18e8 <system_gclk_gen_get_hz+0x74>)
    1884:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1886:	4b19      	ldr	r3, [pc, #100]	; (18ec <system_gclk_gen_get_hz+0x78>)
    1888:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    188a:	4a16      	ldr	r2, [pc, #88]	; (18e4 <system_gclk_gen_get_hz+0x70>)
    188c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    188e:	b25b      	sxtb	r3, r3
    1890:	2b00      	cmp	r3, #0
    1892:	dbfb      	blt.n	188c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1894:	4e13      	ldr	r6, [pc, #76]	; (18e4 <system_gclk_gen_get_hz+0x70>)
    1896:	6870      	ldr	r0, [r6, #4]
    1898:	04c0      	lsls	r0, r0, #19
    189a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    189c:	4b14      	ldr	r3, [pc, #80]	; (18f0 <system_gclk_gen_get_hz+0x7c>)
    189e:	4798      	blx	r3
    18a0:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    18a2:	4b12      	ldr	r3, [pc, #72]	; (18ec <system_gclk_gen_get_hz+0x78>)
    18a4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    18a6:	6876      	ldr	r6, [r6, #4]
    18a8:	02f6      	lsls	r6, r6, #11
    18aa:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    18ac:	4b11      	ldr	r3, [pc, #68]	; (18f4 <system_gclk_gen_get_hz+0x80>)
    18ae:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18b0:	4a0c      	ldr	r2, [pc, #48]	; (18e4 <system_gclk_gen_get_hz+0x70>)
    18b2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    18b4:	b25b      	sxtb	r3, r3
    18b6:	2b00      	cmp	r3, #0
    18b8:	dbfb      	blt.n	18b2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    18ba:	4b0a      	ldr	r3, [pc, #40]	; (18e4 <system_gclk_gen_get_hz+0x70>)
    18bc:	689c      	ldr	r4, [r3, #8]
    18be:	0224      	lsls	r4, r4, #8
    18c0:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    18c2:	4b0d      	ldr	r3, [pc, #52]	; (18f8 <system_gclk_gen_get_hz+0x84>)
    18c4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    18c6:	2e00      	cmp	r6, #0
    18c8:	d107      	bne.n	18da <system_gclk_gen_get_hz+0x66>
    18ca:	2c01      	cmp	r4, #1
    18cc:	d907      	bls.n	18de <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    18ce:	0021      	movs	r1, r4
    18d0:	0028      	movs	r0, r5
    18d2:	4b0a      	ldr	r3, [pc, #40]	; (18fc <system_gclk_gen_get_hz+0x88>)
    18d4:	4798      	blx	r3
    18d6:	0005      	movs	r5, r0
    18d8:	e001      	b.n	18de <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    18da:	3401      	adds	r4, #1
    18dc:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    18de:	0028      	movs	r0, r5
    18e0:	bd70      	pop	{r4, r5, r6, pc}
    18e2:	46c0      	nop			; (mov r8, r8)
    18e4:	40000c00 	.word	0x40000c00
    18e8:	00001505 	.word	0x00001505
    18ec:	40000c04 	.word	0x40000c04
    18f0:	00001575 	.word	0x00001575
    18f4:	40000c08 	.word	0x40000c08
    18f8:	00001545 	.word	0x00001545
    18fc:	00001bdd 	.word	0x00001bdd

00001900 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1900:	b510      	push	{r4, lr}
    1902:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1904:	4b06      	ldr	r3, [pc, #24]	; (1920 <system_gclk_chan_enable+0x20>)
    1906:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1908:	4b06      	ldr	r3, [pc, #24]	; (1924 <system_gclk_chan_enable+0x24>)
    190a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    190c:	4a06      	ldr	r2, [pc, #24]	; (1928 <system_gclk_chan_enable+0x28>)
    190e:	8853      	ldrh	r3, [r2, #2]
    1910:	2180      	movs	r1, #128	; 0x80
    1912:	01c9      	lsls	r1, r1, #7
    1914:	430b      	orrs	r3, r1
    1916:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1918:	4b04      	ldr	r3, [pc, #16]	; (192c <system_gclk_chan_enable+0x2c>)
    191a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    191c:	bd10      	pop	{r4, pc}
    191e:	46c0      	nop			; (mov r8, r8)
    1920:	00001505 	.word	0x00001505
    1924:	40000c02 	.word	0x40000c02
    1928:	40000c00 	.word	0x40000c00
    192c:	00001545 	.word	0x00001545

00001930 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1930:	b510      	push	{r4, lr}
    1932:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1934:	4b0f      	ldr	r3, [pc, #60]	; (1974 <system_gclk_chan_disable+0x44>)
    1936:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1938:	4b0f      	ldr	r3, [pc, #60]	; (1978 <system_gclk_chan_disable+0x48>)
    193a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    193c:	4a0f      	ldr	r2, [pc, #60]	; (197c <system_gclk_chan_disable+0x4c>)
    193e:	8853      	ldrh	r3, [r2, #2]
    1940:	051b      	lsls	r3, r3, #20
    1942:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1944:	8853      	ldrh	r3, [r2, #2]
    1946:	490e      	ldr	r1, [pc, #56]	; (1980 <system_gclk_chan_disable+0x50>)
    1948:	400b      	ands	r3, r1
    194a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    194c:	8853      	ldrh	r3, [r2, #2]
    194e:	490d      	ldr	r1, [pc, #52]	; (1984 <system_gclk_chan_disable+0x54>)
    1950:	400b      	ands	r3, r1
    1952:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1954:	0011      	movs	r1, r2
    1956:	2280      	movs	r2, #128	; 0x80
    1958:	01d2      	lsls	r2, r2, #7
    195a:	884b      	ldrh	r3, [r1, #2]
    195c:	4213      	tst	r3, r2
    195e:	d1fc      	bne.n	195a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1960:	4906      	ldr	r1, [pc, #24]	; (197c <system_gclk_chan_disable+0x4c>)
    1962:	884a      	ldrh	r2, [r1, #2]
    1964:	0203      	lsls	r3, r0, #8
    1966:	4806      	ldr	r0, [pc, #24]	; (1980 <system_gclk_chan_disable+0x50>)
    1968:	4002      	ands	r2, r0
    196a:	4313      	orrs	r3, r2
    196c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    196e:	4b06      	ldr	r3, [pc, #24]	; (1988 <system_gclk_chan_disable+0x58>)
    1970:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1972:	bd10      	pop	{r4, pc}
    1974:	00001505 	.word	0x00001505
    1978:	40000c02 	.word	0x40000c02
    197c:	40000c00 	.word	0x40000c00
    1980:	fffff0ff 	.word	0xfffff0ff
    1984:	ffffbfff 	.word	0xffffbfff
    1988:	00001545 	.word	0x00001545

0000198c <system_gclk_chan_set_config>:
{
    198c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    198e:	780c      	ldrb	r4, [r1, #0]
    1990:	0224      	lsls	r4, r4, #8
    1992:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1994:	4b02      	ldr	r3, [pc, #8]	; (19a0 <system_gclk_chan_set_config+0x14>)
    1996:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1998:	b2a4      	uxth	r4, r4
    199a:	4b02      	ldr	r3, [pc, #8]	; (19a4 <system_gclk_chan_set_config+0x18>)
    199c:	805c      	strh	r4, [r3, #2]
}
    199e:	bd10      	pop	{r4, pc}
    19a0:	00001931 	.word	0x00001931
    19a4:	40000c00 	.word	0x40000c00

000019a8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    19a8:	b510      	push	{r4, lr}
    19aa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    19ac:	4b06      	ldr	r3, [pc, #24]	; (19c8 <system_gclk_chan_get_hz+0x20>)
    19ae:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    19b0:	4b06      	ldr	r3, [pc, #24]	; (19cc <system_gclk_chan_get_hz+0x24>)
    19b2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    19b4:	4b06      	ldr	r3, [pc, #24]	; (19d0 <system_gclk_chan_get_hz+0x28>)
    19b6:	885c      	ldrh	r4, [r3, #2]
    19b8:	0524      	lsls	r4, r4, #20
    19ba:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    19bc:	4b05      	ldr	r3, [pc, #20]	; (19d4 <system_gclk_chan_get_hz+0x2c>)
    19be:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    19c0:	0020      	movs	r0, r4
    19c2:	4b05      	ldr	r3, [pc, #20]	; (19d8 <system_gclk_chan_get_hz+0x30>)
    19c4:	4798      	blx	r3
}
    19c6:	bd10      	pop	{r4, pc}
    19c8:	00001505 	.word	0x00001505
    19cc:	40000c02 	.word	0x40000c02
    19d0:	40000c00 	.word	0x40000c00
    19d4:	00001545 	.word	0x00001545
    19d8:	00001875 	.word	0x00001875

000019dc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    19dc:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    19de:	78d3      	ldrb	r3, [r2, #3]
    19e0:	2b00      	cmp	r3, #0
    19e2:	d135      	bne.n	1a50 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    19e4:	7813      	ldrb	r3, [r2, #0]
    19e6:	2b80      	cmp	r3, #128	; 0x80
    19e8:	d029      	beq.n	1a3e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    19ea:	061b      	lsls	r3, r3, #24
    19ec:	2480      	movs	r4, #128	; 0x80
    19ee:	0264      	lsls	r4, r4, #9
    19f0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    19f2:	7854      	ldrb	r4, [r2, #1]
    19f4:	2502      	movs	r5, #2
    19f6:	43ac      	bics	r4, r5
    19f8:	d106      	bne.n	1a08 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    19fa:	7894      	ldrb	r4, [r2, #2]
    19fc:	2c00      	cmp	r4, #0
    19fe:	d120      	bne.n	1a42 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1a00:	2480      	movs	r4, #128	; 0x80
    1a02:	02a4      	lsls	r4, r4, #10
    1a04:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1a06:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1a08:	7854      	ldrb	r4, [r2, #1]
    1a0a:	3c01      	subs	r4, #1
    1a0c:	2c01      	cmp	r4, #1
    1a0e:	d91c      	bls.n	1a4a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1a10:	040d      	lsls	r5, r1, #16
    1a12:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1a14:	24a0      	movs	r4, #160	; 0xa0
    1a16:	05e4      	lsls	r4, r4, #23
    1a18:	432c      	orrs	r4, r5
    1a1a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a1c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1a1e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1a20:	24d0      	movs	r4, #208	; 0xd0
    1a22:	0624      	lsls	r4, r4, #24
    1a24:	432c      	orrs	r4, r5
    1a26:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a28:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1a2a:	78d4      	ldrb	r4, [r2, #3]
    1a2c:	2c00      	cmp	r4, #0
    1a2e:	d122      	bne.n	1a76 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1a30:	035b      	lsls	r3, r3, #13
    1a32:	d51c      	bpl.n	1a6e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1a34:	7893      	ldrb	r3, [r2, #2]
    1a36:	2b01      	cmp	r3, #1
    1a38:	d01e      	beq.n	1a78 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1a3a:	6141      	str	r1, [r0, #20]
    1a3c:	e017      	b.n	1a6e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1a3e:	2300      	movs	r3, #0
    1a40:	e7d7      	b.n	19f2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1a42:	24c0      	movs	r4, #192	; 0xc0
    1a44:	02e4      	lsls	r4, r4, #11
    1a46:	4323      	orrs	r3, r4
    1a48:	e7dd      	b.n	1a06 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1a4a:	4c0d      	ldr	r4, [pc, #52]	; (1a80 <_system_pinmux_config+0xa4>)
    1a4c:	4023      	ands	r3, r4
    1a4e:	e7df      	b.n	1a10 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1a50:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1a52:	040c      	lsls	r4, r1, #16
    1a54:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1a56:	23a0      	movs	r3, #160	; 0xa0
    1a58:	05db      	lsls	r3, r3, #23
    1a5a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a5c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1a5e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1a60:	23d0      	movs	r3, #208	; 0xd0
    1a62:	061b      	lsls	r3, r3, #24
    1a64:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a66:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1a68:	78d3      	ldrb	r3, [r2, #3]
    1a6a:	2b00      	cmp	r3, #0
    1a6c:	d103      	bne.n	1a76 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1a6e:	7853      	ldrb	r3, [r2, #1]
    1a70:	3b01      	subs	r3, #1
    1a72:	2b01      	cmp	r3, #1
    1a74:	d902      	bls.n	1a7c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1a76:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1a78:	6181      	str	r1, [r0, #24]
    1a7a:	e7f8      	b.n	1a6e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1a7c:	6081      	str	r1, [r0, #8]
}
    1a7e:	e7fa      	b.n	1a76 <_system_pinmux_config+0x9a>
    1a80:	fffbffff 	.word	0xfffbffff

00001a84 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1a84:	b510      	push	{r4, lr}
    1a86:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1a88:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1a8a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1a8c:	2900      	cmp	r1, #0
    1a8e:	d104      	bne.n	1a9a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1a90:	0943      	lsrs	r3, r0, #5
    1a92:	01db      	lsls	r3, r3, #7
    1a94:	4905      	ldr	r1, [pc, #20]	; (1aac <system_pinmux_pin_set_config+0x28>)
    1a96:	468c      	mov	ip, r1
    1a98:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1a9a:	241f      	movs	r4, #31
    1a9c:	4020      	ands	r0, r4
    1a9e:	2101      	movs	r1, #1
    1aa0:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1aa2:	0018      	movs	r0, r3
    1aa4:	4b02      	ldr	r3, [pc, #8]	; (1ab0 <system_pinmux_pin_set_config+0x2c>)
    1aa6:	4798      	blx	r3
}
    1aa8:	bd10      	pop	{r4, pc}
    1aaa:	46c0      	nop			; (mov r8, r8)
    1aac:	41004400 	.word	0x41004400
    1ab0:	000019dd 	.word	0x000019dd

00001ab4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1ab4:	4770      	bx	lr
	...

00001ab8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1ab8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1aba:	4b05      	ldr	r3, [pc, #20]	; (1ad0 <system_init+0x18>)
    1abc:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1abe:	4b05      	ldr	r3, [pc, #20]	; (1ad4 <system_init+0x1c>)
    1ac0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1ac2:	4b05      	ldr	r3, [pc, #20]	; (1ad8 <system_init+0x20>)
    1ac4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1ac6:	4b05      	ldr	r3, [pc, #20]	; (1adc <system_init+0x24>)
    1ac8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1aca:	4b05      	ldr	r3, [pc, #20]	; (1ae0 <system_init+0x28>)
    1acc:	4798      	blx	r3
}
    1ace:	bd10      	pop	{r4, pc}
    1ad0:	000016bd 	.word	0x000016bd
    1ad4:	00001501 	.word	0x00001501
    1ad8:	00001ab5 	.word	0x00001ab5
    1adc:	00001ab5 	.word	0x00001ab5
    1ae0:	00001ab5 	.word	0x00001ab5

00001ae4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1ae4:	e7fe      	b.n	1ae4 <Dummy_Handler>
	...

00001ae8 <Reset_Handler>:
{
    1ae8:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    1aea:	4a1a      	ldr	r2, [pc, #104]	; (1b54 <Reset_Handler+0x6c>)
    1aec:	4b1a      	ldr	r3, [pc, #104]	; (1b58 <Reset_Handler+0x70>)
    1aee:	429a      	cmp	r2, r3
    1af0:	d011      	beq.n	1b16 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1af2:	001a      	movs	r2, r3
    1af4:	4b19      	ldr	r3, [pc, #100]	; (1b5c <Reset_Handler+0x74>)
    1af6:	429a      	cmp	r2, r3
    1af8:	d20d      	bcs.n	1b16 <Reset_Handler+0x2e>
    1afa:	4a19      	ldr	r2, [pc, #100]	; (1b60 <Reset_Handler+0x78>)
    1afc:	3303      	adds	r3, #3
    1afe:	1a9b      	subs	r3, r3, r2
    1b00:	089b      	lsrs	r3, r3, #2
    1b02:	3301      	adds	r3, #1
    1b04:	009b      	lsls	r3, r3, #2
    1b06:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1b08:	4813      	ldr	r0, [pc, #76]	; (1b58 <Reset_Handler+0x70>)
    1b0a:	4912      	ldr	r1, [pc, #72]	; (1b54 <Reset_Handler+0x6c>)
    1b0c:	588c      	ldr	r4, [r1, r2]
    1b0e:	5084      	str	r4, [r0, r2]
    1b10:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1b12:	429a      	cmp	r2, r3
    1b14:	d1fa      	bne.n	1b0c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1b16:	4a13      	ldr	r2, [pc, #76]	; (1b64 <Reset_Handler+0x7c>)
    1b18:	4b13      	ldr	r3, [pc, #76]	; (1b68 <Reset_Handler+0x80>)
    1b1a:	429a      	cmp	r2, r3
    1b1c:	d20a      	bcs.n	1b34 <Reset_Handler+0x4c>
    1b1e:	43d3      	mvns	r3, r2
    1b20:	4911      	ldr	r1, [pc, #68]	; (1b68 <Reset_Handler+0x80>)
    1b22:	185b      	adds	r3, r3, r1
    1b24:	2103      	movs	r1, #3
    1b26:	438b      	bics	r3, r1
    1b28:	3304      	adds	r3, #4
    1b2a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1b2c:	2100      	movs	r1, #0
    1b2e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1b30:	4293      	cmp	r3, r2
    1b32:	d1fc      	bne.n	1b2e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1b34:	4a0d      	ldr	r2, [pc, #52]	; (1b6c <Reset_Handler+0x84>)
    1b36:	21ff      	movs	r1, #255	; 0xff
    1b38:	4b0d      	ldr	r3, [pc, #52]	; (1b70 <Reset_Handler+0x88>)
    1b3a:	438b      	bics	r3, r1
    1b3c:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1b3e:	4a0d      	ldr	r2, [pc, #52]	; (1b74 <Reset_Handler+0x8c>)
    1b40:	6853      	ldr	r3, [r2, #4]
    1b42:	397f      	subs	r1, #127	; 0x7f
    1b44:	430b      	orrs	r3, r1
    1b46:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1b48:	4b0b      	ldr	r3, [pc, #44]	; (1b78 <Reset_Handler+0x90>)
    1b4a:	4798      	blx	r3
        main();
    1b4c:	4b0b      	ldr	r3, [pc, #44]	; (1b7c <Reset_Handler+0x94>)
    1b4e:	4798      	blx	r3
    1b50:	e7fe      	b.n	1b50 <Reset_Handler+0x68>
    1b52:	46c0      	nop			; (mov r8, r8)
    1b54:	00001e24 	.word	0x00001e24
    1b58:	20000000 	.word	0x20000000
    1b5c:	20000010 	.word	0x20000010
    1b60:	20000004 	.word	0x20000004
    1b64:	20000010 	.word	0x20000010
    1b68:	20000114 	.word	0x20000114
    1b6c:	e000ed00 	.word	0xe000ed00
    1b70:	00000000 	.word	0x00000000
    1b74:	41004000 	.word	0x41004000
    1b78:	00001d49 	.word	0x00001d49
    1b7c:	00001bad 	.word	0x00001bad

00001b80 <SysTick_Handler>:
#include "main.h"

void SysTick_Handler(void)
{
	// Your code goes here
}
    1b80:	4770      	bx	lr
	...

00001b84 <sensorRead>:


void sensorRead(void)
{
    1b84:	b510      	push	{r4, lr}
    1b86:	b082      	sub	sp, #8
	uint8_t sensorADDR = 0x18;
	uint8_t mfgIDReg = 0x06;		//expected 0x0054
	uint8_t rd_buf[2] = {0};
    1b88:	aa01      	add	r2, sp, #4
    1b8a:	2300      	movs	r3, #0
    1b8c:	8013      	strh	r3, [r2, #0]

	//int8_t i2c_Read(uint8_t i2c_addr, uint8_t reg_addr, uint8_t *read_buffer, uint8_t len);
	i2c_Read(sensorADDR, mfgIDReg, rd_buf, 2);
    1b8e:	3302      	adds	r3, #2
    1b90:	2106      	movs	r1, #6
    1b92:	2018      	movs	r0, #24
    1b94:	4c03      	ldr	r4, [pc, #12]	; (1ba4 <sensorRead+0x20>)
    1b96:	47a0      	blx	r4
	port_base->OUTTGL.reg = pin_mask;
    1b98:	2280      	movs	r2, #128	; 0x80
    1b9a:	01d2      	lsls	r2, r2, #7
    1b9c:	4b02      	ldr	r3, [pc, #8]	; (1ba8 <sensorRead+0x24>)
    1b9e:	61da      	str	r2, [r3, #28]
	
	port_pin_toggle_output_level( LED_0_PIN );

}
    1ba0:	b002      	add	sp, #8
    1ba2:	bd10      	pop	{r4, pc}
    1ba4:	00001341 	.word	0x00001341
    1ba8:	41004400 	.word	0x41004400

00001bac <main>:

int main (void)
{
    1bac:	b570      	push	{r4, r5, r6, lr}
	system_init();
    1bae:	4b06      	ldr	r3, [pc, #24]	; (1bc8 <main+0x1c>)
    1bb0:	4798      	blx	r3
	config_board();
    1bb2:	4b06      	ldr	r3, [pc, #24]	; (1bcc <main+0x20>)
    1bb4:	4798      	blx	r3

	usart_Hello();
    1bb6:	4b06      	ldr	r3, [pc, #24]	; (1bd0 <main+0x24>)
    1bb8:	4798      	blx	r3
		//delay_ms(100);

		//In Terminal, echo every 5 characters typed forever and toggle LED0
		//usart_Echo();
		
		sensorRead();
    1bba:	4d06      	ldr	r5, [pc, #24]	; (1bd4 <main+0x28>)
		/* Write buffer to slave until success. */
		//i2c_Write(0x18, wr_buffer, sizeof(wr_buffer));
		//port_pin_toggle_output_level( LED_0_PIN );


		delay_ms(100);
    1bbc:	4c06      	ldr	r4, [pc, #24]	; (1bd8 <main+0x2c>)
		sensorRead();
    1bbe:	47a8      	blx	r5
		delay_ms(100);
    1bc0:	2064      	movs	r0, #100	; 0x64
    1bc2:	47a0      	blx	r4
    1bc4:	e7fb      	b.n	1bbe <main+0x12>
    1bc6:	46c0      	nop			; (mov r8, r8)
    1bc8:	00001ab9 	.word	0x00001ab9
    1bcc:	00001481 	.word	0x00001481
    1bd0:	00001251 	.word	0x00001251
    1bd4:	00001b85 	.word	0x00001b85
    1bd8:	00001405 	.word	0x00001405

00001bdc <__udivsi3>:
    1bdc:	2200      	movs	r2, #0
    1bde:	0843      	lsrs	r3, r0, #1
    1be0:	428b      	cmp	r3, r1
    1be2:	d374      	bcc.n	1cce <__udivsi3+0xf2>
    1be4:	0903      	lsrs	r3, r0, #4
    1be6:	428b      	cmp	r3, r1
    1be8:	d35f      	bcc.n	1caa <__udivsi3+0xce>
    1bea:	0a03      	lsrs	r3, r0, #8
    1bec:	428b      	cmp	r3, r1
    1bee:	d344      	bcc.n	1c7a <__udivsi3+0x9e>
    1bf0:	0b03      	lsrs	r3, r0, #12
    1bf2:	428b      	cmp	r3, r1
    1bf4:	d328      	bcc.n	1c48 <__udivsi3+0x6c>
    1bf6:	0c03      	lsrs	r3, r0, #16
    1bf8:	428b      	cmp	r3, r1
    1bfa:	d30d      	bcc.n	1c18 <__udivsi3+0x3c>
    1bfc:	22ff      	movs	r2, #255	; 0xff
    1bfe:	0209      	lsls	r1, r1, #8
    1c00:	ba12      	rev	r2, r2
    1c02:	0c03      	lsrs	r3, r0, #16
    1c04:	428b      	cmp	r3, r1
    1c06:	d302      	bcc.n	1c0e <__udivsi3+0x32>
    1c08:	1212      	asrs	r2, r2, #8
    1c0a:	0209      	lsls	r1, r1, #8
    1c0c:	d065      	beq.n	1cda <__udivsi3+0xfe>
    1c0e:	0b03      	lsrs	r3, r0, #12
    1c10:	428b      	cmp	r3, r1
    1c12:	d319      	bcc.n	1c48 <__udivsi3+0x6c>
    1c14:	e000      	b.n	1c18 <__udivsi3+0x3c>
    1c16:	0a09      	lsrs	r1, r1, #8
    1c18:	0bc3      	lsrs	r3, r0, #15
    1c1a:	428b      	cmp	r3, r1
    1c1c:	d301      	bcc.n	1c22 <__udivsi3+0x46>
    1c1e:	03cb      	lsls	r3, r1, #15
    1c20:	1ac0      	subs	r0, r0, r3
    1c22:	4152      	adcs	r2, r2
    1c24:	0b83      	lsrs	r3, r0, #14
    1c26:	428b      	cmp	r3, r1
    1c28:	d301      	bcc.n	1c2e <__udivsi3+0x52>
    1c2a:	038b      	lsls	r3, r1, #14
    1c2c:	1ac0      	subs	r0, r0, r3
    1c2e:	4152      	adcs	r2, r2
    1c30:	0b43      	lsrs	r3, r0, #13
    1c32:	428b      	cmp	r3, r1
    1c34:	d301      	bcc.n	1c3a <__udivsi3+0x5e>
    1c36:	034b      	lsls	r3, r1, #13
    1c38:	1ac0      	subs	r0, r0, r3
    1c3a:	4152      	adcs	r2, r2
    1c3c:	0b03      	lsrs	r3, r0, #12
    1c3e:	428b      	cmp	r3, r1
    1c40:	d301      	bcc.n	1c46 <__udivsi3+0x6a>
    1c42:	030b      	lsls	r3, r1, #12
    1c44:	1ac0      	subs	r0, r0, r3
    1c46:	4152      	adcs	r2, r2
    1c48:	0ac3      	lsrs	r3, r0, #11
    1c4a:	428b      	cmp	r3, r1
    1c4c:	d301      	bcc.n	1c52 <__udivsi3+0x76>
    1c4e:	02cb      	lsls	r3, r1, #11
    1c50:	1ac0      	subs	r0, r0, r3
    1c52:	4152      	adcs	r2, r2
    1c54:	0a83      	lsrs	r3, r0, #10
    1c56:	428b      	cmp	r3, r1
    1c58:	d301      	bcc.n	1c5e <__udivsi3+0x82>
    1c5a:	028b      	lsls	r3, r1, #10
    1c5c:	1ac0      	subs	r0, r0, r3
    1c5e:	4152      	adcs	r2, r2
    1c60:	0a43      	lsrs	r3, r0, #9
    1c62:	428b      	cmp	r3, r1
    1c64:	d301      	bcc.n	1c6a <__udivsi3+0x8e>
    1c66:	024b      	lsls	r3, r1, #9
    1c68:	1ac0      	subs	r0, r0, r3
    1c6a:	4152      	adcs	r2, r2
    1c6c:	0a03      	lsrs	r3, r0, #8
    1c6e:	428b      	cmp	r3, r1
    1c70:	d301      	bcc.n	1c76 <__udivsi3+0x9a>
    1c72:	020b      	lsls	r3, r1, #8
    1c74:	1ac0      	subs	r0, r0, r3
    1c76:	4152      	adcs	r2, r2
    1c78:	d2cd      	bcs.n	1c16 <__udivsi3+0x3a>
    1c7a:	09c3      	lsrs	r3, r0, #7
    1c7c:	428b      	cmp	r3, r1
    1c7e:	d301      	bcc.n	1c84 <__udivsi3+0xa8>
    1c80:	01cb      	lsls	r3, r1, #7
    1c82:	1ac0      	subs	r0, r0, r3
    1c84:	4152      	adcs	r2, r2
    1c86:	0983      	lsrs	r3, r0, #6
    1c88:	428b      	cmp	r3, r1
    1c8a:	d301      	bcc.n	1c90 <__udivsi3+0xb4>
    1c8c:	018b      	lsls	r3, r1, #6
    1c8e:	1ac0      	subs	r0, r0, r3
    1c90:	4152      	adcs	r2, r2
    1c92:	0943      	lsrs	r3, r0, #5
    1c94:	428b      	cmp	r3, r1
    1c96:	d301      	bcc.n	1c9c <__udivsi3+0xc0>
    1c98:	014b      	lsls	r3, r1, #5
    1c9a:	1ac0      	subs	r0, r0, r3
    1c9c:	4152      	adcs	r2, r2
    1c9e:	0903      	lsrs	r3, r0, #4
    1ca0:	428b      	cmp	r3, r1
    1ca2:	d301      	bcc.n	1ca8 <__udivsi3+0xcc>
    1ca4:	010b      	lsls	r3, r1, #4
    1ca6:	1ac0      	subs	r0, r0, r3
    1ca8:	4152      	adcs	r2, r2
    1caa:	08c3      	lsrs	r3, r0, #3
    1cac:	428b      	cmp	r3, r1
    1cae:	d301      	bcc.n	1cb4 <__udivsi3+0xd8>
    1cb0:	00cb      	lsls	r3, r1, #3
    1cb2:	1ac0      	subs	r0, r0, r3
    1cb4:	4152      	adcs	r2, r2
    1cb6:	0883      	lsrs	r3, r0, #2
    1cb8:	428b      	cmp	r3, r1
    1cba:	d301      	bcc.n	1cc0 <__udivsi3+0xe4>
    1cbc:	008b      	lsls	r3, r1, #2
    1cbe:	1ac0      	subs	r0, r0, r3
    1cc0:	4152      	adcs	r2, r2
    1cc2:	0843      	lsrs	r3, r0, #1
    1cc4:	428b      	cmp	r3, r1
    1cc6:	d301      	bcc.n	1ccc <__udivsi3+0xf0>
    1cc8:	004b      	lsls	r3, r1, #1
    1cca:	1ac0      	subs	r0, r0, r3
    1ccc:	4152      	adcs	r2, r2
    1cce:	1a41      	subs	r1, r0, r1
    1cd0:	d200      	bcs.n	1cd4 <__udivsi3+0xf8>
    1cd2:	4601      	mov	r1, r0
    1cd4:	4152      	adcs	r2, r2
    1cd6:	4610      	mov	r0, r2
    1cd8:	4770      	bx	lr
    1cda:	e7ff      	b.n	1cdc <__udivsi3+0x100>
    1cdc:	b501      	push	{r0, lr}
    1cde:	2000      	movs	r0, #0
    1ce0:	f000 f806 	bl	1cf0 <__aeabi_idiv0>
    1ce4:	bd02      	pop	{r1, pc}
    1ce6:	46c0      	nop			; (mov r8, r8)

00001ce8 <__aeabi_uidivmod>:
    1ce8:	2900      	cmp	r1, #0
    1cea:	d0f7      	beq.n	1cdc <__udivsi3+0x100>
    1cec:	e776      	b.n	1bdc <__udivsi3>
    1cee:	4770      	bx	lr

00001cf0 <__aeabi_idiv0>:
    1cf0:	4770      	bx	lr
    1cf2:	46c0      	nop			; (mov r8, r8)

00001cf4 <__aeabi_lmul>:
    1cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cf6:	46ce      	mov	lr, r9
    1cf8:	4647      	mov	r7, r8
    1cfa:	0415      	lsls	r5, r2, #16
    1cfc:	0c2d      	lsrs	r5, r5, #16
    1cfe:	002e      	movs	r6, r5
    1d00:	b580      	push	{r7, lr}
    1d02:	0407      	lsls	r7, r0, #16
    1d04:	0c14      	lsrs	r4, r2, #16
    1d06:	0c3f      	lsrs	r7, r7, #16
    1d08:	4699      	mov	r9, r3
    1d0a:	0c03      	lsrs	r3, r0, #16
    1d0c:	437e      	muls	r6, r7
    1d0e:	435d      	muls	r5, r3
    1d10:	4367      	muls	r7, r4
    1d12:	4363      	muls	r3, r4
    1d14:	197f      	adds	r7, r7, r5
    1d16:	0c34      	lsrs	r4, r6, #16
    1d18:	19e4      	adds	r4, r4, r7
    1d1a:	469c      	mov	ip, r3
    1d1c:	42a5      	cmp	r5, r4
    1d1e:	d903      	bls.n	1d28 <__aeabi_lmul+0x34>
    1d20:	2380      	movs	r3, #128	; 0x80
    1d22:	025b      	lsls	r3, r3, #9
    1d24:	4698      	mov	r8, r3
    1d26:	44c4      	add	ip, r8
    1d28:	464b      	mov	r3, r9
    1d2a:	4351      	muls	r1, r2
    1d2c:	4343      	muls	r3, r0
    1d2e:	0436      	lsls	r6, r6, #16
    1d30:	0c36      	lsrs	r6, r6, #16
    1d32:	0c25      	lsrs	r5, r4, #16
    1d34:	0424      	lsls	r4, r4, #16
    1d36:	4465      	add	r5, ip
    1d38:	19a4      	adds	r4, r4, r6
    1d3a:	1859      	adds	r1, r3, r1
    1d3c:	1949      	adds	r1, r1, r5
    1d3e:	0020      	movs	r0, r4
    1d40:	bc0c      	pop	{r2, r3}
    1d42:	4690      	mov	r8, r2
    1d44:	4699      	mov	r9, r3
    1d46:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001d48 <__libc_init_array>:
    1d48:	b570      	push	{r4, r5, r6, lr}
    1d4a:	2600      	movs	r6, #0
    1d4c:	4d0c      	ldr	r5, [pc, #48]	; (1d80 <__libc_init_array+0x38>)
    1d4e:	4c0d      	ldr	r4, [pc, #52]	; (1d84 <__libc_init_array+0x3c>)
    1d50:	1b64      	subs	r4, r4, r5
    1d52:	10a4      	asrs	r4, r4, #2
    1d54:	42a6      	cmp	r6, r4
    1d56:	d109      	bne.n	1d6c <__libc_init_array+0x24>
    1d58:	2600      	movs	r6, #0
    1d5a:	f000 f853 	bl	1e04 <_init>
    1d5e:	4d0a      	ldr	r5, [pc, #40]	; (1d88 <__libc_init_array+0x40>)
    1d60:	4c0a      	ldr	r4, [pc, #40]	; (1d8c <__libc_init_array+0x44>)
    1d62:	1b64      	subs	r4, r4, r5
    1d64:	10a4      	asrs	r4, r4, #2
    1d66:	42a6      	cmp	r6, r4
    1d68:	d105      	bne.n	1d76 <__libc_init_array+0x2e>
    1d6a:	bd70      	pop	{r4, r5, r6, pc}
    1d6c:	00b3      	lsls	r3, r6, #2
    1d6e:	58eb      	ldr	r3, [r5, r3]
    1d70:	4798      	blx	r3
    1d72:	3601      	adds	r6, #1
    1d74:	e7ee      	b.n	1d54 <__libc_init_array+0xc>
    1d76:	00b3      	lsls	r3, r6, #2
    1d78:	58eb      	ldr	r3, [r5, r3]
    1d7a:	4798      	blx	r3
    1d7c:	3601      	adds	r6, #1
    1d7e:	e7f2      	b.n	1d66 <__libc_init_array+0x1e>
    1d80:	00001e10 	.word	0x00001e10
    1d84:	00001e10 	.word	0x00001e10
    1d88:	00001e10 	.word	0x00001e10
    1d8c:	00001e14 	.word	0x00001e14
    1d90:	42000800 	.word	0x42000800
    1d94:	42000c00 	.word	0x42000c00
    1d98:	42001000 	.word	0x42001000
    1d9c:	42001400 	.word	0x42001400
    1da0:	42001800 	.word	0x42001800
    1da4:	42001c00 	.word	0x42001c00
    1da8:	6c6c6548 	.word	0x6c6c6548
    1dac:	6f57206f 	.word	0x6f57206f
    1db0:	21646c72 	.word	0x21646c72
    1db4:	00000a0d 	.word	0x00000a0d
    1db8:	63450a0d 	.word	0x63450a0d
    1dbc:	203a6f68 	.word	0x203a6f68
    1dc0:	00000000 	.word	0x00000000
    1dc4:	00001586 	.word	0x00001586
    1dc8:	00001582 	.word	0x00001582
    1dcc:	00001582 	.word	0x00001582
    1dd0:	000015d2 	.word	0x000015d2
    1dd4:	000015d2 	.word	0x000015d2
    1dd8:	0000159a 	.word	0x0000159a
    1ddc:	0000158c 	.word	0x0000158c
    1de0:	000015a0 	.word	0x000015a0
    1de4:	00001658 	.word	0x00001658
    1de8:	00001638 	.word	0x00001638
    1dec:	00001638 	.word	0x00001638
    1df0:	000016a8 	.word	0x000016a8
    1df4:	0000164a 	.word	0x0000164a
    1df8:	00001666 	.word	0x00001666
    1dfc:	0000163c 	.word	0x0000163c
    1e00:	00001674 	.word	0x00001674

00001e04 <_init>:
    1e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e06:	46c0      	nop			; (mov r8, r8)
    1e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1e0a:	bc08      	pop	{r3}
    1e0c:	469e      	mov	lr, r3
    1e0e:	4770      	bx	lr

00001e10 <__init_array_start>:
    1e10:	000000cd 	.word	0x000000cd

00001e14 <_fini>:
    1e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e16:	46c0      	nop			; (mov r8, r8)
    1e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1e1a:	bc08      	pop	{r3}
    1e1c:	469e      	mov	lr, r3
    1e1e:	4770      	bx	lr

00001e20 <__fini_array_start>:
    1e20:	000000a5 	.word	0x000000a5
